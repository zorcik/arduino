
C:\Users\Jacek\AppData\Local\Temp\arduino_build_115489/Blink3.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
   0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
   4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  40:	0c 94 b9 00 	jmp	0x172	; 0x172 <__vector_16>
  44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  48:	0c 94 47 03 	jmp	0x68e	; 0x68e <__vector_18>
  4c:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__vector_19>
  50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
  68:	00 00       	nop
  6a:	00 09       	sbc	r16, r0
  6c:	00 03       	mulsu	r16, r16
  6e:	02 00       	.word	0x0002	; ????
  70:	00 04       	cpc	r0, r0
  72:	05 08       	sbc	r0, r5
	...

0000007f <digital_pin_to_bit_mask_PGM>:
  7f:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8f:	04 08 10 20 40 80 40                                ... @.@

00000096 <digital_pin_to_port_PGM>:
  96:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a6:	03 03 03 03 02 02 03                                .......

000000ad <port_to_output_PGM>:
  ad:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b7 <port_to_mode_PGM>:
  b7:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000c2 <__ctors_start>:
__ctors_start():
  c2:	a9 03       	fmulsu	r18, r17

000000c4 <__ctors_end>:
__dtors_end():
  c4:	11 24       	eor	r1, r1
  c6:	1f be       	out	0x3f, r1	; 63
  c8:	cf ef       	ldi	r28, 0xFF	; 255
  ca:	d8 e0       	ldi	r29, 0x08	; 8
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
  d0:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
  d2:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
  d4:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
  d6:	e0 ed       	ldi	r30, 0xD0	; 208
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
  d8:	f8 e0       	ldi	r31, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
  da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
  dc:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
  de:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
  e0:	ae 31       	cpi	r26, 0x1E	; 30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
  e2:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
  e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
  e6:	21 e0       	ldi	r18, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
  e8:	ae e1       	ldi	r26, 0x1E	; 30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
  ea:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
  ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
  f0:	a4 3c       	cpi	r26, 0xC4	; 196
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
  f2:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
  f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
  f6:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
  f8:	c2 e6       	ldi	r28, 0x62	; 98
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
  fa:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
  fc:	04 c0       	rjmp	.+8      	; 0x106 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
  fe:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
 100:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
 102:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
 106:	c1 36       	cpi	r28, 0x61	; 97
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
 108:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
 10a:	c9 f7       	brne	.-14     	; 0xfe <__do_global_ctors+0x8>
 10c:	0e 94 2e 04 	call	0x85c	; 0x85c <main>
 110:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <_exit>

00000114 <__bad_interrupt>:
__vector_22():
 114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <setup>:
setup():
C:\Users\Jacek\Documents\Arduino\Blink3/Blink3.ino:28
*/

// the setup function runs once when you press reset or power the board
void setup() {
  // initialize digital pin LED_BUILTIN as an output.
  pinMode(4, OUTPUT);
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	84 e0       	ldi	r24, 0x04	; 4
 11c:	0e 94 b2 01 	call	0x364	; 0x364 <pinMode>
_ZN14HardwareSerial5beginEm():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.h:121
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 120:	26 e0       	ldi	r18, 0x06	; 6
 122:	40 e8       	ldi	r20, 0x80	; 128
 124:	55 e2       	ldi	r21, 0x25	; 37
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	87 e2       	ldi	r24, 0x27	; 39
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	0c 94 ef 02 	jmp	0x5de	; 0x5de <HardwareSerial::begin(unsigned long, unsigned char)>

00000132 <loop>:
loop():
C:\Users\Jacek\Documents\Arduino\Blink3/Blink3.ino:34
  Serial.begin(9600);
}

// the loop function runs over and over again forever
void loop() {
  digitalWrite(4, HIGH);   // turn the LED on (HIGH is the voltage level)
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	84 e0       	ldi	r24, 0x04	; 4
 136:	0e 94 ee 01 	call	0x3dc	; 0x3dc <digitalWrite>
C:\Users\Jacek\Documents\Arduino\Blink3/Blink3.ino:35
  Serial.println("OK1");
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	71 e0       	ldi	r23, 0x01	; 1
 13e:	87 e2       	ldi	r24, 0x27	; 39
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	0e 94 16 04 	call	0x82c	; 0x82c <Print::println(char const*)>
C:\Users\Jacek\Documents\Arduino\Blink3/Blink3.ino:36
  delay(1000);                       // wait for a second
 146:	68 ee       	ldi	r22, 0xE8	; 232
 148:	73 e0       	ldi	r23, 0x03	; 3
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 28 01 	call	0x250	; 0x250 <delay>
C:\Users\Jacek\Documents\Arduino\Blink3/Blink3.ino:37
  digitalWrite(4, LOW);    // turn the LED off by making the voltage LOW
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	84 e0       	ldi	r24, 0x04	; 4
 156:	0e 94 ee 01 	call	0x3dc	; 0x3dc <digitalWrite>
C:\Users\Jacek\Documents\Arduino\Blink3/Blink3.ino:38
  Serial.println("OK2");
 15a:	64 e0       	ldi	r22, 0x04	; 4
 15c:	71 e0       	ldi	r23, 0x01	; 1
 15e:	87 e2       	ldi	r24, 0x27	; 39
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	0e 94 16 04 	call	0x82c	; 0x82c <Print::println(char const*)>
C:\Users\Jacek\Documents\Arduino\Blink3/Blink3.ino:39
  delay(1000);                       // wait for a second
 166:	68 ee       	ldi	r22, 0xE8	; 232
 168:	73 e0       	ldi	r23, 0x03	; 3
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0c 94 28 01 	jmp	0x250	; 0x250 <delay>

00000172 <__vector_16>:
__vector_16():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
 172:	1f 92       	push	r1
 174:	0f 92       	push	r0
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	0f 92       	push	r0
 17a:	11 24       	eor	r1, r1
 17c:	2f 93       	push	r18
 17e:	3f 93       	push	r19
 180:	8f 93       	push	r24
 182:	9f 93       	push	r25
 184:	af 93       	push	r26
 186:	bf 93       	push	r27
 188:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <timer0_millis>
 18c:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <timer0_millis+0x1>
 190:	a0 91 25 01 	lds	r26, 0x0125	; 0x800125 <timer0_millis+0x2>
 194:	b0 91 26 01 	lds	r27, 0x0126	; 0x800126 <timer0_millis+0x3>
 198:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <timer0_fract>
 19c:	23 e0       	ldi	r18, 0x03	; 3
 19e:	23 0f       	add	r18, r19
 1a0:	2d 37       	cpi	r18, 0x7D	; 125
 1a2:	68 f1       	brcs	.+90     	; 0x1fe <__vector_16+0x8c>
 1a4:	26 e8       	ldi	r18, 0x86	; 134
 1a6:	23 0f       	add	r18, r19
 1a8:	02 96       	adiw	r24, 0x02	; 2
 1aa:	a1 1d       	adc	r26, r1
 1ac:	b1 1d       	adc	r27, r1
 1ae:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <timer0_fract>
 1b2:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timer0_millis>
 1b6:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timer0_millis+0x1>
 1ba:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timer0_millis+0x2>
 1be:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timer0_millis+0x3>
 1c2:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
 1c6:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
 1ca:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <__data_end+0x2>
 1ce:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <__data_end+0x3>
 1d2:	01 96       	adiw	r24, 0x01	; 1
 1d4:	a1 1d       	adc	r26, r1
 1d6:	b1 1d       	adc	r27, r1
 1d8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
 1dc:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <__data_end+0x1>
 1e0:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <__data_end+0x2>
 1e4:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <__data_end+0x3>
 1e8:	bf 91       	pop	r27
 1ea:	af 91       	pop	r26
 1ec:	9f 91       	pop	r25
 1ee:	8f 91       	pop	r24
 1f0:	3f 91       	pop	r19
 1f2:	2f 91       	pop	r18
 1f4:	0f 90       	pop	r0
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	0f 90       	pop	r0
 1fa:	1f 90       	pop	r1
 1fc:	18 95       	reti
 1fe:	01 96       	adiw	r24, 0x01	; 1
 200:	a1 1d       	adc	r26, r1
 202:	b1 1d       	adc	r27, r1
 204:	d4 cf       	rjmp	.-88     	; 0x1ae <__vector_16+0x3c>

00000206 <micros>:
micros():
 206:	3f b7       	in	r19, 0x3f	; 63
 208:	f8 94       	cli
 20a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
 20e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
 212:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <__data_end+0x2>
 216:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <__data_end+0x3>
 21a:	26 b5       	in	r18, 0x26	; 38
 21c:	a8 9b       	sbis	0x15, 0	; 21
 21e:	05 c0       	rjmp	.+10     	; 0x22a <micros+0x24>
 220:	2f 3f       	cpi	r18, 0xFF	; 255
 222:	19 f0       	breq	.+6      	; 0x22a <micros+0x24>
 224:	01 96       	adiw	r24, 0x01	; 1
 226:	a1 1d       	adc	r26, r1
 228:	b1 1d       	adc	r27, r1
 22a:	3f bf       	out	0x3f, r19	; 63
 22c:	ba 2f       	mov	r27, r26
 22e:	a9 2f       	mov	r26, r25
 230:	98 2f       	mov	r25, r24
 232:	88 27       	eor	r24, r24
 234:	bc 01       	movw	r22, r24
 236:	cd 01       	movw	r24, r26
 238:	62 0f       	add	r22, r18
 23a:	71 1d       	adc	r23, r1
 23c:	81 1d       	adc	r24, r1
 23e:	91 1d       	adc	r25, r1
 240:	42 e0       	ldi	r20, 0x02	; 2
 242:	66 0f       	add	r22, r22
 244:	77 1f       	adc	r23, r23
 246:	88 1f       	adc	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	4a 95       	dec	r20
 24c:	d1 f7       	brne	.-12     	; 0x242 <micros+0x3c>
 24e:	08 95       	ret

00000250 <delay>:
delay():
 250:	8f 92       	push	r8
 252:	9f 92       	push	r9
 254:	af 92       	push	r10
 256:	bf 92       	push	r11
 258:	cf 92       	push	r12
 25a:	df 92       	push	r13
 25c:	ef 92       	push	r14
 25e:	ff 92       	push	r15
 260:	6b 01       	movw	r12, r22
 262:	7c 01       	movw	r14, r24
 264:	0e 94 03 01 	call	0x206	; 0x206 <micros>
 268:	4b 01       	movw	r8, r22
 26a:	5c 01       	movw	r10, r24
 26c:	c1 14       	cp	r12, r1
 26e:	d1 04       	cpc	r13, r1
 270:	e1 04       	cpc	r14, r1
 272:	f1 04       	cpc	r15, r1
 274:	e9 f0       	breq	.+58     	; 0x2b0 <delay+0x60>
 276:	0e 94 3d 04 	call	0x87a	; 0x87a <yield>
 27a:	0e 94 03 01 	call	0x206	; 0x206 <micros>
 27e:	68 19       	sub	r22, r8
 280:	79 09       	sbc	r23, r9
 282:	8a 09       	sbc	r24, r10
 284:	9b 09       	sbc	r25, r11
 286:	68 3e       	cpi	r22, 0xE8	; 232
 288:	73 40       	sbci	r23, 0x03	; 3
 28a:	81 05       	cpc	r24, r1
 28c:	91 05       	cpc	r25, r1
 28e:	70 f3       	brcs	.-36     	; 0x26c <delay+0x1c>
 290:	21 e0       	ldi	r18, 0x01	; 1
 292:	c2 1a       	sub	r12, r18
 294:	d1 08       	sbc	r13, r1
 296:	e1 08       	sbc	r14, r1
 298:	f1 08       	sbc	r15, r1
 29a:	88 ee       	ldi	r24, 0xE8	; 232
 29c:	88 0e       	add	r8, r24
 29e:	83 e0       	ldi	r24, 0x03	; 3
 2a0:	98 1e       	adc	r9, r24
 2a2:	a1 1c       	adc	r10, r1
 2a4:	b1 1c       	adc	r11, r1
 2a6:	c1 14       	cp	r12, r1
 2a8:	d1 04       	cpc	r13, r1
 2aa:	e1 04       	cpc	r14, r1
 2ac:	f1 04       	cpc	r15, r1
 2ae:	29 f7       	brne	.-54     	; 0x27a <delay+0x2a>
 2b0:	ff 90       	pop	r15
 2b2:	ef 90       	pop	r14
 2b4:	df 90       	pop	r13
 2b6:	cf 90       	pop	r12
 2b8:	bf 90       	pop	r11
 2ba:	af 90       	pop	r10
 2bc:	9f 90       	pop	r9
 2be:	8f 90       	pop	r8
 2c0:	08 95       	ret

000002c2 <init>:
init():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
 2c2:	78 94       	sei
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
 2c4:	84 b5       	in	r24, 0x24	; 36
 2c6:	83 60       	ori	r24, 0x03	; 3
 2c8:	84 bd       	out	0x24, r24	; 36
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
 2ca:	85 b5       	in	r24, 0x25	; 37
 2cc:	83 60       	ori	r24, 0x03	; 3
 2ce:	85 bd       	out	0x25, r24	; 37
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
 2d0:	ee e6       	ldi	r30, 0x6E	; 110
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	81 60       	ori	r24, 0x01	; 1
 2d8:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
 2da:	e1 e8       	ldi	r30, 0x81	; 129
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	82 e0       	ldi	r24, 0x02	; 2
 2e0:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
 2e2:	80 81       	ld	r24, Z
 2e4:	81 60       	ori	r24, 0x01	; 1
 2e6:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
 2e8:	e0 e8       	ldi	r30, 0x80	; 128
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	81 60       	ori	r24, 0x01	; 1
 2f0:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
 2f2:	e1 eb       	ldi	r30, 0xB1	; 177
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	80 81       	ld	r24, Z
 2f8:	84 60       	ori	r24, 0x04	; 4
 2fa:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
 2fc:	e0 eb       	ldi	r30, 0xB0	; 176
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	80 81       	ld	r24, Z
 302:	81 60       	ori	r24, 0x01	; 1
 304:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
 306:	87 e8       	ldi	r24, 0x87	; 135
 308:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
 30c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
 310:	08 95       	ret

00000312 <turnOffPWM>:
turnOffPWM():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
 312:	84 30       	cpi	r24, 0x04	; 4
 314:	81 f0       	breq	.+32     	; 0x336 <turnOffPWM+0x24>
 316:	28 f4       	brcc	.+10     	; 0x322 <turnOffPWM+0x10>
 318:	82 30       	cpi	r24, 0x02	; 2
 31a:	e9 f0       	breq	.+58     	; 0x356 <turnOffPWM+0x44>
 31c:	83 30       	cpi	r24, 0x03	; 3
 31e:	f9 f0       	breq	.+62     	; 0x35e <turnOffPWM+0x4c>
 320:	08 95       	ret
 322:	88 30       	cpi	r24, 0x08	; 8
 324:	71 f0       	breq	.+28     	; 0x342 <turnOffPWM+0x30>
 326:	89 30       	cpi	r24, 0x09	; 9
 328:	91 f0       	breq	.+36     	; 0x34e <turnOffPWM+0x3c>
 32a:	85 30       	cpi	r24, 0x05	; 5
 32c:	b9 f4       	brne	.+46     	; 0x35c <turnOffPWM+0x4a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
 32e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 332:	8f 7d       	andi	r24, 0xDF	; 223
 334:	03 c0       	rjmp	.+6      	; 0x33c <turnOffPWM+0x2a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
 336:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 33a:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
 33c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
 340:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
 342:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 346:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
 348:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
 34c:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
 34e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 352:	8f 7d       	andi	r24, 0xDF	; 223
 354:	f9 cf       	rjmp	.-14     	; 0x348 <turnOffPWM+0x36>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
 356:	84 b5       	in	r24, 0x24	; 36
 358:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
 35a:	84 bd       	out	0x24, r24	; 36
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
 35c:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
 35e:	84 b5       	in	r24, 0x24	; 36
 360:	8f 7d       	andi	r24, 0xDF	; 223
 362:	fb cf       	rjmp	.-10     	; 0x35a <turnOffPWM+0x48>

00000364 <pinMode>:
pinMode():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 364:	cf 93       	push	r28
 366:	df 93       	push	r29
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	fc 01       	movw	r30, r24
 36c:	e1 58       	subi	r30, 0x81	; 129
 36e:	ff 4f       	sbci	r31, 0xFF	; 255
 370:	24 91       	lpm	r18, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
 372:	8a 56       	subi	r24, 0x6A	; 106
 374:	9f 4f       	sbci	r25, 0xFF	; 255
 376:	fc 01       	movw	r30, r24
 378:	84 91       	lpm	r24, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
 37a:	88 23       	and	r24, r24
 37c:	c9 f0       	breq	.+50     	; 0x3b0 <pinMode+0x4c>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	fc 01       	movw	r30, r24
 386:	e9 54       	subi	r30, 0x49	; 73
 388:	ff 4f       	sbci	r31, 0xFF	; 255
 38a:	a5 91       	lpm	r26, Z+
 38c:	b4 91       	lpm	r27, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
 38e:	fc 01       	movw	r30, r24
 390:	e3 55       	subi	r30, 0x53	; 83
 392:	ff 4f       	sbci	r31, 0xFF	; 255
 394:	c5 91       	lpm	r28, Z+
 396:	d4 91       	lpm	r29, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
 398:	61 11       	cpse	r22, r1
 39a:	0d c0       	rjmp	.+26     	; 0x3b6 <pinMode+0x52>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
 39c:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
 39e:	f8 94       	cli
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
 3a0:	8c 91       	ld	r24, X
 3a2:	20 95       	com	r18
 3a4:	82 23       	and	r24, r18
 3a6:	8c 93       	st	X, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
 3a8:	88 81       	ld	r24, Y
 3aa:	28 23       	and	r18, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
 3ac:	28 83       	st	Y, r18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
 3ae:	9f bf       	out	0x3f, r25	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
 3b6:	62 30       	cpi	r22, 0x02	; 2
 3b8:	51 f4       	brne	.+20     	; 0x3ce <pinMode+0x6a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
 3ba:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
 3bc:	f8 94       	cli
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
 3be:	3c 91       	ld	r19, X
 3c0:	82 2f       	mov	r24, r18
 3c2:	80 95       	com	r24
 3c4:	83 23       	and	r24, r19
 3c6:	8c 93       	st	X, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
 3c8:	e8 81       	ld	r30, Y
 3ca:	2e 2b       	or	r18, r30
 3cc:	ef cf       	rjmp	.-34     	; 0x3ac <pinMode+0x48>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
 3ce:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
 3d0:	f8 94       	cli
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
 3d2:	ec 91       	ld	r30, X
 3d4:	2e 2b       	or	r18, r30
 3d6:	2c 93       	st	X, r18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
 3d8:	8f bf       	out	0x3f, r24	; 63
 3da:	ea cf       	rjmp	.-44     	; 0x3b0 <pinMode+0x4c>

000003dc <digitalWrite>:
digitalWrite():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 3dc:	1f 93       	push	r17
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
 3e2:	28 2f       	mov	r18, r24
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	f9 01       	movw	r30, r18
 3e8:	e8 59       	subi	r30, 0x98	; 152
 3ea:	ff 4f       	sbci	r31, 0xFF	; 255
 3ec:	84 91       	lpm	r24, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
 3ee:	f9 01       	movw	r30, r18
 3f0:	e1 58       	subi	r30, 0x81	; 129
 3f2:	ff 4f       	sbci	r31, 0xFF	; 255
 3f4:	d4 91       	lpm	r29, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
 3f6:	f9 01       	movw	r30, r18
 3f8:	ea 56       	subi	r30, 0x6A	; 106
 3fa:	ff 4f       	sbci	r31, 0xFF	; 255
 3fc:	c4 91       	lpm	r28, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
 3fe:	cc 23       	and	r28, r28
 400:	a9 f0       	breq	.+42     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 402:	16 2f       	mov	r17, r22
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 404:	81 11       	cpse	r24, r1
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
 406:	0e 94 89 01 	call	0x312	; 0x312 <turnOffPWM>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
 40a:	ec 2f       	mov	r30, r28
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	ee 0f       	add	r30, r30
 410:	ff 1f       	adc	r31, r31
 412:	e3 55       	subi	r30, 0x53	; 83
 414:	ff 4f       	sbci	r31, 0xFF	; 255
 416:	a5 91       	lpm	r26, Z+
 418:	b4 91       	lpm	r27, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
 41a:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
 41c:	f8 94       	cli
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
 41e:	ec 91       	ld	r30, X
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
 420:	11 11       	cpse	r17, r1
 422:	08 c0       	rjmp	.+16     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
 424:	d0 95       	com	r29
 426:	de 23       	and	r29, r30
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
 428:	dc 93       	st	X, r29
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
 42a:	8f bf       	out	0x3f, r24	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	1f 91       	pop	r17
 432:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
 434:	de 2b       	or	r29, r30
 436:	f8 cf       	rjmp	.-16     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>

00000438 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 438:	fc 01       	movw	r30, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 43a:	91 8d       	ldd	r25, Z+25	; 0x19
 43c:	22 8d       	ldd	r18, Z+26	; 0x1a
 43e:	89 2f       	mov	r24, r25
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	80 5c       	subi	r24, 0xC0	; 192
 444:	9f 4f       	sbci	r25, 0xFF	; 255
 446:	82 1b       	sub	r24, r18
 448:	91 09       	sbc	r25, r1
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:152
}
 44a:	8f 73       	andi	r24, 0x3F	; 63
 44c:	99 27       	eor	r25, r25
 44e:	08 95       	ret

00000450 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
 450:	fc 01       	movw	r30, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
 452:	91 8d       	ldd	r25, Z+25	; 0x19
 454:	82 8d       	ldd	r24, Z+26	; 0x1a
 456:	98 17       	cp	r25, r24
 458:	31 f0       	breq	.+12     	; 0x466 <HardwareSerial::peek()+0x16>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 45a:	82 8d       	ldd	r24, Z+26	; 0x1a
 45c:	e8 0f       	add	r30, r24
 45e:	f1 1d       	adc	r31, r1
 460:	85 8d       	ldd	r24, Z+29	; 0x1d
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 466:	8f ef       	ldi	r24, 0xFF	; 255
 468:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 46a:	08 95       	ret

0000046c <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
 46c:	fc 01       	movw	r30, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 46e:	91 8d       	ldd	r25, Z+25	; 0x19
 470:	82 8d       	ldd	r24, Z+26	; 0x1a
 472:	98 17       	cp	r25, r24
 474:	61 f0       	breq	.+24     	; 0x48e <HardwareSerial::read()+0x22>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 476:	a2 8d       	ldd	r26, Z+26	; 0x1a
 478:	ae 0f       	add	r26, r30
 47a:	bf 2f       	mov	r27, r31
 47c:	b1 1d       	adc	r27, r1
 47e:	5d 96       	adiw	r26, 0x1d	; 29
 480:	8c 91       	ld	r24, X
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 482:	92 8d       	ldd	r25, Z+26	; 0x1a
 484:	9f 5f       	subi	r25, 0xFF	; 255
 486:	9f 73       	andi	r25, 0x3F	; 63
 488:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 48e:	8f ef       	ldi	r24, 0xFF	; 255
 490:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 492:	08 95       	ret

00000494 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 494:	fc 01       	movw	r30, r24
 496:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
 498:	44 8d       	ldd	r20, Z+28	; 0x1c
 49a:	25 2f       	mov	r18, r21
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	84 2f       	mov	r24, r20
 4a0:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 4a2:	82 1b       	sub	r24, r18
 4a4:	93 0b       	sbc	r25, r19
 4a6:	54 17       	cp	r21, r20
 4a8:	10 f0       	brcs	.+4      	; 0x4ae <HardwareSerial::availableForWrite()+0x1a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
 4aa:	cf 96       	adiw	r24, 0x3f	; 63
 4ac:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
 4ae:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:188
}
 4b0:	08 95       	ret

000004b2 <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 4b2:	8f e9       	ldi	r24, 0x9F	; 159
 4b4:	93 e0       	ldi	r25, 0x03	; 3
 4b6:	89 2b       	or	r24, r25
 4b8:	49 f0       	breq	.+18     	; 0x4cc <serialEventRun()+0x1a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	89 2b       	or	r24, r25
 4c0:	29 f0       	breq	.+10     	; 0x4cc <serialEventRun()+0x1a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
 4c2:	0e 94 9f 03 	call	0x73e	; 0x73e <Serial0_available()>
 4c6:	81 11       	cpse	r24, r1
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
 4c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
 4cc:	08 95       	ret

000004ce <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 4ce:	fc 01       	movw	r30, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 4d0:	a4 8d       	ldd	r26, Z+28	; 0x1c
 4d2:	a8 0f       	add	r26, r24
 4d4:	b9 2f       	mov	r27, r25
 4d6:	b1 1d       	adc	r27, r1
 4d8:	a3 5a       	subi	r26, 0xA3	; 163
 4da:	bf 4f       	sbci	r27, 0xFF	; 255
 4dc:	2c 91       	ld	r18, X
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 4de:	84 8d       	ldd	r24, Z+28	; 0x1c
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	01 96       	adiw	r24, 0x01	; 1
 4e4:	8f 73       	andi	r24, 0x3F	; 63
 4e6:	99 27       	eor	r25, r25
 4e8:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
 4ea:	a6 89       	ldd	r26, Z+22	; 0x16
 4ec:	b7 89       	ldd	r27, Z+23	; 0x17
 4ee:	2c 93       	st	X, r18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
 4f0:	a0 89       	ldd	r26, Z+16	; 0x10
 4f2:	b1 89       	ldd	r27, Z+17	; 0x11
 4f4:	8c 91       	ld	r24, X
 4f6:	80 64       	ori	r24, 0x40	; 64
 4f8:	8c 93       	st	X, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
 4fa:	93 8d       	ldd	r25, Z+27	; 0x1b
 4fc:	84 8d       	ldd	r24, Z+28	; 0x1c
 4fe:	98 13       	cpse	r25, r24
 500:	06 c0       	rjmp	.+12     	; 0x50e <HardwareSerial::_tx_udr_empty_irq()+0x40>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
 502:	02 88       	ldd	r0, Z+18	; 0x12
 504:	f3 89       	ldd	r31, Z+19	; 0x13
 506:	e0 2d       	mov	r30, r0
 508:	80 81       	ld	r24, Z
 50a:	8f 7d       	andi	r24, 0xDF	; 223
 50c:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
 50e:	08 95       	ret

00000510 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 510:	cf 93       	push	r28
 512:	df 93       	push	r29
 514:	ec 01       	movw	r28, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 516:	88 8d       	ldd	r24, Y+24	; 0x18
 518:	88 23       	and	r24, r24
 51a:	b9 f0       	breq	.+46     	; 0x54a <HardwareSerial::flush()+0x3a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 51c:	aa 89       	ldd	r26, Y+18	; 0x12
 51e:	bb 89       	ldd	r27, Y+19	; 0x13
 520:	e8 89       	ldd	r30, Y+16	; 0x10
 522:	f9 89       	ldd	r31, Y+17	; 0x11
 524:	8c 91       	ld	r24, X
 526:	85 fd       	sbrc	r24, 5
 528:	03 c0       	rjmp	.+6      	; 0x530 <HardwareSerial::flush()+0x20>
 52a:	80 81       	ld	r24, Z
 52c:	86 fd       	sbrc	r24, 6
 52e:	0d c0       	rjmp	.+26     	; 0x54a <HardwareSerial::flush()+0x3a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 530:	0f b6       	in	r0, 0x3f	; 63
 532:	07 fc       	sbrc	r0, 7
 534:	f7 cf       	rjmp	.-18     	; 0x524 <HardwareSerial::flush()+0x14>
 536:	8c 91       	ld	r24, X
 538:	85 ff       	sbrs	r24, 5
 53a:	f2 cf       	rjmp	.-28     	; 0x520 <HardwareSerial::flush()+0x10>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
 53c:	80 81       	ld	r24, Z
 53e:	85 ff       	sbrs	r24, 5
 540:	ed cf       	rjmp	.-38     	; 0x51c <HardwareSerial::flush()+0xc>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
 542:	ce 01       	movw	r24, r28
 544:	0e 94 67 02 	call	0x4ce	; 0x4ce <HardwareSerial::_tx_udr_empty_irq()>
 548:	e9 cf       	rjmp	.-46     	; 0x51c <HardwareSerial::flush()+0xc>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 54a:	df 91       	pop	r29
 54c:	cf 91       	pop	r28
 54e:	08 95       	ret

00000550 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
 550:	ef 92       	push	r14
 552:	ff 92       	push	r15
 554:	0f 93       	push	r16
 556:	1f 93       	push	r17
 558:	cf 93       	push	r28
 55a:	df 93       	push	r29
 55c:	ec 01       	movw	r28, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 562:	9b 8d       	ldd	r25, Y+27	; 0x1b
 564:	8c 8d       	ldd	r24, Y+28	; 0x1c
 566:	98 13       	cpse	r25, r24
 568:	16 c0       	rjmp	.+44     	; 0x596 <HardwareSerial::write(unsigned char)+0x46>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
 56a:	e8 89       	ldd	r30, Y+16	; 0x10
 56c:	f9 89       	ldd	r31, Y+17	; 0x11
 56e:	80 81       	ld	r24, Z
 570:	85 ff       	sbrs	r24, 5
 572:	11 c0       	rjmp	.+34     	; 0x596 <HardwareSerial::write(unsigned char)+0x46>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
 574:	ee 89       	ldd	r30, Y+22	; 0x16
 576:	ff 89       	ldd	r31, Y+23	; 0x17
 578:	60 83       	st	Z, r22
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
 57a:	e8 89       	ldd	r30, Y+16	; 0x10
 57c:	f9 89       	ldd	r31, Y+17	; 0x11
 57e:	80 81       	ld	r24, Z
 580:	80 64       	ori	r24, 0x40	; 64
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
 582:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	df 91       	pop	r29
 58a:	cf 91       	pop	r28
 58c:	1f 91       	pop	r17
 58e:	0f 91       	pop	r16
 590:	ff 90       	pop	r15
 592:	ef 90       	pop	r14
 594:	08 95       	ret
 596:	f6 2e       	mov	r15, r22
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 598:	0b 8d       	ldd	r16, Y+27	; 0x1b
 59a:	10 e0       	ldi	r17, 0x00	; 0
 59c:	0f 5f       	subi	r16, 0xFF	; 255
 59e:	1f 4f       	sbci	r17, 0xFF	; 255
 5a0:	0f 73       	andi	r16, 0x3F	; 63
 5a2:	11 27       	eor	r17, r17
 5a4:	e0 2e       	mov	r14, r16
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 5a6:	8c 8d       	ldd	r24, Y+28	; 0x1c
 5a8:	8e 11       	cpse	r24, r14
 5aa:	0c c0       	rjmp	.+24     	; 0x5c4 <HardwareSerial::write(unsigned char)+0x74>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
 5ac:	0f b6       	in	r0, 0x3f	; 63
 5ae:	07 fc       	sbrc	r0, 7
 5b0:	fa cf       	rjmp	.-12     	; 0x5a6 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 5b2:	e8 89       	ldd	r30, Y+16	; 0x10
 5b4:	f9 89       	ldd	r31, Y+17	; 0x11
 5b6:	80 81       	ld	r24, Z
 5b8:	85 ff       	sbrs	r24, 5
 5ba:	f5 cf       	rjmp	.-22     	; 0x5a6 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
 5bc:	ce 01       	movw	r24, r28
 5be:	0e 94 67 02 	call	0x4ce	; 0x4ce <HardwareSerial::_tx_udr_empty_irq()>
 5c2:	f1 cf       	rjmp	.-30     	; 0x5a6 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 5c4:	eb 8d       	ldd	r30, Y+27	; 0x1b
 5c6:	ec 0f       	add	r30, r28
 5c8:	fd 2f       	mov	r31, r29
 5ca:	f1 1d       	adc	r31, r1
 5cc:	e3 5a       	subi	r30, 0xA3	; 163
 5ce:	ff 4f       	sbci	r31, 0xFF	; 255
 5d0:	f0 82       	st	Z, r15
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
 5d2:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
 5d4:	ea 89       	ldd	r30, Y+18	; 0x12
 5d6:	fb 89       	ldd	r31, Y+19	; 0x13
 5d8:	80 81       	ld	r24, Z
 5da:	80 62       	ori	r24, 0x20	; 32
 5dc:	d2 cf       	rjmp	.-92     	; 0x582 <HardwareSerial::write(unsigned char)+0x32>

000005de <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:104
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 5de:	cf 92       	push	r12
 5e0:	df 92       	push	r13
 5e2:	ef 92       	push	r14
 5e4:	ff 92       	push	r15
 5e6:	1f 93       	push	r17
 5e8:	cf 93       	push	r28
 5ea:	df 93       	push	r29
 5ec:	ec 01       	movw	r28, r24
 5ee:	6a 01       	movw	r12, r20
 5f0:	7b 01       	movw	r14, r22
 5f2:	12 2f       	mov	r17, r18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:107
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 5f4:	e8 89       	ldd	r30, Y+16	; 0x10
 5f6:	f9 89       	ldd	r31, Y+17	; 0x11
 5f8:	82 e0       	ldi	r24, 0x02	; 2
 5fa:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 5fc:	c1 14       	cp	r12, r1
 5fe:	81 ee       	ldi	r24, 0xE1	; 225
 600:	d8 06       	cpc	r13, r24
 602:	e1 04       	cpc	r14, r1
 604:	f1 04       	cpc	r15, r1
 606:	a1 f0       	breq	.+40     	; 0x630 <HardwareSerial::begin(unsigned long, unsigned char)+0x52>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:106 (discriminator 1)
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 608:	60 e0       	ldi	r22, 0x00	; 0
 60a:	79 e0       	ldi	r23, 0x09	; 9
 60c:	8d e3       	ldi	r24, 0x3D	; 61
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	a7 01       	movw	r20, r14
 612:	96 01       	movw	r18, r12
 614:	0e 94 3e 04 	call	0x87c	; 0x87c <__udivmodsi4>
 618:	21 50       	subi	r18, 0x01	; 1
 61a:	31 09       	sbc	r19, r1
 61c:	41 09       	sbc	r20, r1
 61e:	51 09       	sbc	r21, r1
 620:	56 95       	lsr	r21
 622:	47 95       	ror	r20
 624:	37 95       	ror	r19
 626:	27 95       	ror	r18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114 (discriminator 1)
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 628:	21 15       	cp	r18, r1
 62a:	80 e1       	ldi	r24, 0x10	; 16
 62c:	38 07       	cpc	r19, r24
 62e:	98 f0       	brcs	.+38     	; 0x656 <HardwareSerial::begin(unsigned long, unsigned char)+0x78>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:116
  {
    *_ucsra = 0;
 630:	e8 89       	ldd	r30, Y+16	; 0x10
 632:	f9 89       	ldd	r31, Y+17	; 0x11
 634:	10 82       	st	Z, r1
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:117
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 636:	60 e8       	ldi	r22, 0x80	; 128
 638:	74 e8       	ldi	r23, 0x84	; 132
 63a:	8e e1       	ldi	r24, 0x1E	; 30
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	a7 01       	movw	r20, r14
 640:	96 01       	movw	r18, r12
 642:	0e 94 3e 04 	call	0x87c	; 0x87c <__udivmodsi4>
 646:	21 50       	subi	r18, 0x01	; 1
 648:	31 09       	sbc	r19, r1
 64a:	41 09       	sbc	r20, r1
 64c:	51 09       	sbc	r21, r1
 64e:	56 95       	lsr	r21
 650:	47 95       	ror	r20
 652:	37 95       	ror	r19
 654:	27 95       	ror	r18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 656:	ec 85       	ldd	r30, Y+12	; 0x0c
 658:	fd 85       	ldd	r31, Y+13	; 0x0d
 65a:	30 83       	st	Z, r19
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
 65c:	ee 85       	ldd	r30, Y+14	; 0x0e
 65e:	ff 85       	ldd	r31, Y+15	; 0x0f
 660:	20 83       	st	Z, r18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:124

  _written = false;
 662:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:132
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 664:	ec 89       	ldd	r30, Y+20	; 0x14
 666:	fd 89       	ldd	r31, Y+21	; 0x15
 668:	10 83       	st	Z, r17
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:134
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
 66a:	ea 89       	ldd	r30, Y+18	; 0x12
 66c:	fb 89       	ldd	r31, Y+19	; 0x13
 66e:	80 81       	ld	r24, Z
 670:	88 69       	ori	r24, 0x98	; 152
 672:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  *_ucsrb &= ~_BV(UDRIE0);
 674:	ea 89       	ldd	r30, Y+18	; 0x12
 676:	fb 89       	ldd	r31, Y+19	; 0x13
 678:	80 81       	ld	r24, Z
 67a:	8f 7d       	andi	r24, 0xDF	; 223
 67c:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:136
}
 67e:	df 91       	pop	r29
 680:	cf 91       	pop	r28
 682:	1f 91       	pop	r17
 684:	ff 90       	pop	r15
 686:	ef 90       	pop	r14
 688:	df 90       	pop	r13
 68a:	cf 90       	pop	r12
 68c:	08 95       	ret

0000068e <__vector_18>:
__vector_18():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 68e:	1f 92       	push	r1
 690:	0f 92       	push	r0
 692:	0f b6       	in	r0, 0x3f	; 63
 694:	0f 92       	push	r0
 696:	11 24       	eor	r1, r1
 698:	2f 93       	push	r18
 69a:	8f 93       	push	r24
 69c:	9f 93       	push	r25
 69e:	ef 93       	push	r30
 6a0:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 6a2:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <Serial+0x10>
 6a6:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <Serial+0x11>
 6aa:	80 81       	ld	r24, Z
 6ac:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <Serial+0x16>
 6b0:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <Serial+0x17>
 6b4:	82 fd       	sbrc	r24, 2
 6b6:	1b c0       	rjmp	.+54     	; 0x6ee <__vector_18+0x60>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 6b8:	90 81       	ld	r25, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 6ba:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <Serial+0x19>
 6be:	8f 5f       	subi	r24, 0xFF	; 255
 6c0:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 6c2:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <Serial+0x1a>
 6c6:	82 17       	cp	r24, r18
 6c8:	41 f0       	breq	.+16     	; 0x6da <__vector_18+0x4c>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
 6ca:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <Serial+0x19>
 6ce:	f0 e0       	ldi	r31, 0x00	; 0
 6d0:	e9 5d       	subi	r30, 0xD9	; 217
 6d2:	fe 4f       	sbci	r31, 0xFE	; 254
 6d4:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
 6d6:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <Serial+0x19>
__vector_18():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
 6da:	ff 91       	pop	r31
 6dc:	ef 91       	pop	r30
 6de:	9f 91       	pop	r25
 6e0:	8f 91       	pop	r24
 6e2:	2f 91       	pop	r18
 6e4:	0f 90       	pop	r0
 6e6:	0f be       	out	0x3f, r0	; 63
 6e8:	0f 90       	pop	r0
 6ea:	1f 90       	pop	r1
 6ec:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 6ee:	80 81       	ld	r24, Z
__vector_18():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
 6f0:	f4 cf       	rjmp	.-24     	; 0x6da <__vector_18+0x4c>

000006f2 <__vector_19>:
__vector_19():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 6f2:	1f 92       	push	r1
 6f4:	0f 92       	push	r0
 6f6:	0f b6       	in	r0, 0x3f	; 63
 6f8:	0f 92       	push	r0
 6fa:	11 24       	eor	r1, r1
 6fc:	2f 93       	push	r18
 6fe:	3f 93       	push	r19
 700:	4f 93       	push	r20
 702:	5f 93       	push	r21
 704:	6f 93       	push	r22
 706:	7f 93       	push	r23
 708:	8f 93       	push	r24
 70a:	9f 93       	push	r25
 70c:	af 93       	push	r26
 70e:	bf 93       	push	r27
 710:	ef 93       	push	r30
 712:	ff 93       	push	r31
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
 714:	87 e2       	ldi	r24, 0x27	; 39
 716:	91 e0       	ldi	r25, 0x01	; 1
 718:	0e 94 67 02 	call	0x4ce	; 0x4ce <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
 71c:	ff 91       	pop	r31
 71e:	ef 91       	pop	r30
 720:	bf 91       	pop	r27
 722:	af 91       	pop	r26
 724:	9f 91       	pop	r25
 726:	8f 91       	pop	r24
 728:	7f 91       	pop	r23
 72a:	6f 91       	pop	r22
 72c:	5f 91       	pop	r21
 72e:	4f 91       	pop	r20
 730:	3f 91       	pop	r19
 732:	2f 91       	pop	r18
 734:	0f 90       	pop	r0
 736:	0f be       	out	0x3f, r0	; 63
 738:	0f 90       	pop	r0
 73a:	1f 90       	pop	r1
 73c:	18 95       	reti

0000073e <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 73e:	87 e2       	ldi	r24, 0x27	; 39
 740:	91 e0       	ldi	r25, 0x01	; 1
 742:	0e 94 1c 02 	call	0x438	; 0x438 <HardwareSerial::available()>
 746:	21 e0       	ldi	r18, 0x01	; 1
 748:	89 2b       	or	r24, r25
 74a:	09 f4       	brne	.+2      	; 0x74e <Serial0_available()+0x10>
 74c:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
 74e:	82 2f       	mov	r24, r18
 750:	08 95       	ret

00000752 <_GLOBAL__sub_I___vector_18>:
_ZN5PrintC4Ev():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 752:	e7 e2       	ldi	r30, 0x27	; 39
 754:	f1 e0       	ldi	r31, 0x01	; 1
 756:	13 82       	std	Z+3, r1	; 0x03
 758:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 75a:	88 ee       	ldi	r24, 0xE8	; 232
 75c:	93 e0       	ldi	r25, 0x03	; 3
 75e:	a0 e0       	ldi	r26, 0x00	; 0
 760:	b0 e0       	ldi	r27, 0x00	; 0
 762:	84 83       	std	Z+4, r24	; 0x04
 764:	95 83       	std	Z+5, r25	; 0x05
 766:	a6 83       	std	Z+6, r26	; 0x06
 768:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 76a:	8c e0       	ldi	r24, 0x0C	; 12
 76c:	91 e0       	ldi	r25, 0x01	; 1
 76e:	91 83       	std	Z+1, r25	; 0x01
 770:	80 83       	st	Z, r24
 772:	85 ec       	ldi	r24, 0xC5	; 197
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	95 87       	std	Z+13, r25	; 0x0d
 778:	84 87       	std	Z+12, r24	; 0x0c
 77a:	84 ec       	ldi	r24, 0xC4	; 196
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	97 87       	std	Z+15, r25	; 0x0f
 780:	86 87       	std	Z+14, r24	; 0x0e
 782:	80 ec       	ldi	r24, 0xC0	; 192
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	91 8b       	std	Z+17, r25	; 0x11
 788:	80 8b       	std	Z+16, r24	; 0x10
 78a:	81 ec       	ldi	r24, 0xC1	; 193
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	93 8b       	std	Z+19, r25	; 0x13
 790:	82 8b       	std	Z+18, r24	; 0x12
 792:	82 ec       	ldi	r24, 0xC2	; 194
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	95 8b       	std	Z+21, r25	; 0x15
 798:	84 8b       	std	Z+20, r24	; 0x14
 79a:	86 ec       	ldi	r24, 0xC6	; 198
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	97 8b       	std	Z+23, r25	; 0x17
 7a0:	86 8b       	std	Z+22, r24	; 0x16
 7a2:	11 8e       	std	Z+25, r1	; 0x19
 7a4:	12 8e       	std	Z+26, r1	; 0x1a
 7a6:	13 8e       	std	Z+27, r1	; 0x1b
 7a8:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_18():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
 7aa:	08 95       	ret

000007ac <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:136
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
 7ac:	af 92       	push	r10
 7ae:	bf 92       	push	r11
 7b0:	cf 92       	push	r12
 7b2:	df 92       	push	r13
 7b4:	ef 92       	push	r14
 7b6:	ff 92       	push	r15
 7b8:	0f 93       	push	r16
 7ba:	1f 93       	push	r17
 7bc:	cf 93       	push	r28
 7be:	df 93       	push	r29
 7c0:	6c 01       	movw	r12, r24
 7c2:	7b 01       	movw	r14, r22
 7c4:	8b 01       	movw	r16, r22
 7c6:	04 0f       	add	r16, r20
 7c8:	15 1f       	adc	r17, r21
 7ca:	eb 01       	movw	r28, r22
 7cc:	5e 01       	movw	r10, r28
 7ce:	ae 18       	sub	r10, r14
 7d0:	bf 08       	sbc	r11, r15
 7d2:	c0 17       	cp	r28, r16
 7d4:	d1 07       	cpc	r29, r17
 7d6:	59 f0       	breq	.+22     	; 0x7ee <Print::write(unsigned char const*, unsigned int)+0x42>
 7d8:	69 91       	ld	r22, Y+
 7da:	d6 01       	movw	r26, r12
 7dc:	ed 91       	ld	r30, X+
 7de:	fc 91       	ld	r31, X
 7e0:	01 90       	ld	r0, Z+
 7e2:	f0 81       	ld	r31, Z
 7e4:	e0 2d       	mov	r30, r0
 7e6:	c6 01       	movw	r24, r12
 7e8:	09 95       	icall
 7ea:	89 2b       	or	r24, r25
 7ec:	79 f7       	brne	.-34     	; 0x7cc <Print::write(unsigned char const*, unsigned int)+0x20>
 7ee:	c5 01       	movw	r24, r10
 7f0:	df 91       	pop	r29
 7f2:	cf 91       	pop	r28
 7f4:	1f 91       	pop	r17
 7f6:	0f 91       	pop	r16
 7f8:	ff 90       	pop	r15
 7fa:	ef 90       	pop	r14
 7fc:	df 90       	pop	r13
 7fe:	cf 90       	pop	r12
 800:	bf 90       	pop	r11
 802:	af 90       	pop	r10
 804:	08 95       	ret

00000806 <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
 806:	fb 01       	movw	r30, r22
 808:	01 90       	ld	r0, Z+
 80a:	00 20       	and	r0, r0
 80c:	e9 f7       	brne	.-6      	; 0x808 <Print::write(char const*) [clone .part.2]+0x2>
 80e:	31 97       	sbiw	r30, 0x01	; 1
 810:	af 01       	movw	r20, r30
 812:	46 1b       	sub	r20, r22
 814:	57 0b       	sbc	r21, r23
 816:	dc 01       	movw	r26, r24
 818:	ed 91       	ld	r30, X+
 81a:	fc 91       	ld	r31, X
 81c:	02 80       	ldd	r0, Z+2	; 0x02
 81e:	f3 81       	ldd	r31, Z+3	; 0x03
 820:	e0 2d       	mov	r30, r0
 822:	09 94       	ijmp

00000824 <Print::println()>:
 824:	6a e1       	ldi	r22, 0x1A	; 26
 826:	71 e0       	ldi	r23, 0x01	; 1
 828:	0c 94 03 04 	jmp	0x806	; 0x806 <Print::write(char const*) [clone .part.2]>

0000082c <Print::println(char const*)>:
_ZN5Print7printlnEPKc():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:139

size_t Print::println(const char c[])
{
 82c:	0f 93       	push	r16
 82e:	1f 93       	push	r17
 830:	cf 93       	push	r28
 832:	df 93       	push	r29
 834:	8c 01       	movw	r16, r24
_ZN5Print5writeEPKc():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 836:	d0 e0       	ldi	r29, 0x00	; 0
 838:	c0 e0       	ldi	r28, 0x00	; 0
 83a:	61 15       	cp	r22, r1
 83c:	71 05       	cpc	r23, r1
 83e:	19 f0       	breq	.+6      	; 0x846 <Print::println(char const*)+0x1a>
 840:	0e 94 03 04 	call	0x806	; 0x806 <Print::write(char const*) [clone .part.2]>
 844:	ec 01       	movw	r28, r24
_ZN5Print7printlnEPKc():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:141
  size_t n = print(c);
  n += println();
 846:	c8 01       	movw	r24, r16
 848:	0e 94 12 04 	call	0x824	; 0x824 <Print::println()>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:143
  return n;
}
 84c:	8c 0f       	add	r24, r28
 84e:	9d 1f       	adc	r25, r29
 850:	df 91       	pop	r29
 852:	cf 91       	pop	r28
 854:	1f 91       	pop	r17
 856:	0f 91       	pop	r16
 858:	08 95       	ret

0000085a <initVariant>:
initVariant():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
 85a:	08 95       	ret

0000085c <main>:
main():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
 85c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <init>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
 860:	0e 94 2d 04 	call	0x85a	; 0x85a <initVariant>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
 864:	0e 94 8c 00 	call	0x118	; 0x118 <setup>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
 868:	c9 e5       	ldi	r28, 0x59	; 89
 86a:	d2 e0       	ldi	r29, 0x02	; 2
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
 86c:	0e 94 99 00 	call	0x132	; 0x132 <loop>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
 870:	20 97       	sbiw	r28, 0x00	; 0
 872:	e1 f3       	breq	.-8      	; 0x86c <main+0x10>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
 874:	0e 94 59 02 	call	0x4b2	; 0x4b2 <serialEventRun()>
 878:	f9 cf       	rjmp	.-14     	; 0x86c <main+0x10>

0000087a <yield>:
__empty():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
 87a:	08 95       	ret

0000087c <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
 87c:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
 87e:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
 880:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
 882:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
 884:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
 886:	0d c0       	rjmp	.+26     	; 0x8a2 <__udivmodsi4_ep>

00000888 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
 888:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
 88a:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
 88c:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
 88e:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
 890:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
 892:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
 894:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
 896:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
 898:	20 f0       	brcs	.+8      	; 0x8a2 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
 89a:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
 89c:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
 89e:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
 8a0:	f5 0b       	sbc	r31, r21

000008a2 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
 8a2:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
 8a4:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
 8a6:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
 8a8:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
 8aa:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
 8ac:	69 f7       	brne	.-38     	; 0x888 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
 8ae:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
 8b0:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
 8b2:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
 8b4:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
 8b6:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
 8b8:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
 8ba:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
 8bc:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
 8be:	08 95       	ret

000008c0 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
 8c0:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
 8c2:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
 8c4:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
 8c6:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
 8c8:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
 8ca:	09 94       	ijmp

000008cc <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
 8cc:	f8 94       	cli

000008ce <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
 8ce:	ff cf       	rjmp	.-2      	; 0x8ce <__stop_program>
