
C:\Users\Jacek\AppData\Local\Temp\arduino_build_822547/light-switch-rs485.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
       4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
       8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
       c:	0c 94 49 01 	jmp	0x292	; 0x292 <__vector_3>
      10:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__vector_4>
      14:	0c 94 93 01 	jmp	0x326	; 0x326 <__vector_5>
      18:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      1c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      20:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      24:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      28:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      2c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      30:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      34:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      38:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      3c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      40:	0c 94 0f 0c 	jmp	0x181e	; 0x181e <__vector_16>
      44:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      48:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__vector_18>
      4c:	0c 94 7d 0e 	jmp	0x1cfa	; 0x1cfa <__vector_19>
      50:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      54:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      58:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      5c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      60:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <__vector_24>
      64:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	00 00       	nop
      6a:	00 09       	sbc	r16, r0
      6c:	00 03       	mulsu	r16, r16
      6e:	02 00       	.word	0x0002	; ????
      70:	00 04       	cpc	r0, r0
      72:	05 08       	sbc	r0, r5
	...

0000007f <digital_pin_to_bit_mask_PGM>:
      7f:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8f:	04 08 10 20 40 80 40                                ... @.@

00000096 <digital_pin_to_port_PGM>:
      96:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a6:	03 03 03 03 02 02 03                                .......

000000ad <port_to_input_PGM>:
      ad:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000b7 <port_to_output_PGM>:
      b7:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000c1 <port_to_mode_PGM>:
      c1:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000cc <__ctors_start>:
__ctors_start():
      cc:	6b 08       	sbc	r6, r11
      ce:	e0 09       	sbc	r30, r0
      d0:	ad 0e       	add	r10, r29

000000d2 <__ctors_end>:
__dtors_end():
      d2:	11 24       	eor	r1, r1
      d4:	1f be       	out	0x3f, r1	; 63
      d6:	cf ef       	ldi	r28, 0xFF	; 255
      d8:	d4 e0       	ldi	r29, 0x04	; 4
      da:	de bf       	out	0x3e, r29	; 62
      dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      de:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      e0:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      e2:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      e4:	e8 e8       	ldi	r30, 0x88	; 136
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      e6:	fe e1       	ldi	r31, 0x1E	; 30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      ea:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      ec:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      ee:	a4 33       	cpi	r26, 0x34	; 52
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      f0:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      f4:	23 e0       	ldi	r18, 0x03	; 3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      f6:	a4 e3       	ldi	r26, 0x34	; 52
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      f8:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      fe:	a4 3a       	cpi	r26, 0xA4	; 164
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     100:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>

00000104 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     104:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     106:	c9 e6       	ldi	r28, 0x69	; 105
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     108:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     10a:	04 c0       	rjmp	.+8      	; 0x114 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     10c:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     10e:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     110:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     114:	c6 36       	cpi	r28, 0x66	; 102
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     116:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     118:	c9 f7       	brne	.-14     	; 0x10c <__do_global_ctors+0x8>
     11a:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <main>
     11e:	0c 94 42 0f 	jmp	0x1e84	; 0x1e84 <_exit>

00000122 <__bad_interrupt>:
__vector_22():
     122:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000126 <PCint(unsigned char)>:
_ZL5PCinth():
C:\Users\Jacek\AppData\Local\Temp\arduino_build_822547\sketch/PCF8574.cpp:74

	/* Set PORT bit value */
	if (value)
		_PORT |= (1 << pin);
	else
		_PORT &= ~(1 << pin);
     126:	df 92       	push	r13
     128:	ef 92       	push	r14
     12a:	ff 92       	push	r15
     12c:	0f 93       	push	r16
     12e:	1f 93       	push	r17
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
     134:	28 2f       	mov	r18, r24
     136:	30 e0       	ldi	r19, 0x00	; 0
     138:	f9 01       	movw	r30, r18
     13a:	ee 0f       	add	r30, r30
     13c:	ff 1f       	adc	r31, r31
     13e:	ef 54       	subi	r30, 0x4F	; 79
     140:	ff 4f       	sbci	r31, 0xFF	; 255
     142:	a5 91       	lpm	r26, Z+
     144:	b4 91       	lpm	r27, Z
     146:	fc 90       	ld	r15, X
     148:	f9 01       	movw	r30, r18
     14a:	ec 5c       	subi	r30, 0xCC	; 204
     14c:	fe 4f       	sbci	r31, 0xFE	; 254
     14e:	e0 80       	ld	r14, Z
     150:	ef 24       	eor	r14, r15
     152:	f0 82       	st	Z, r15
     154:	22 0f       	add	r18, r18
     156:	33 1f       	adc	r19, r19
     158:	f9 01       	movw	r30, r18
     15a:	e0 50       	subi	r30, 0x00	; 0
     15c:	ff 4f       	sbci	r31, 0xFF	; 255
     15e:	01 90       	ld	r0, Z+
     160:	f0 81       	ld	r31, Z
     162:	e0 2d       	mov	r30, r0
     164:	90 81       	ld	r25, Z
     166:	e9 22       	and	r14, r25
     168:	39 f1       	breq	.+78     	; 0x1b8 <PCint(unsigned char)+0x92>
     16a:	d8 2e       	mov	r13, r24
     16c:	dd 0c       	add	r13, r13
     16e:	dd 0c       	add	r13, r13
     170:	dd 0c       	add	r13, r13
     172:	d0 e0       	ldi	r29, 0x00	; 0
     174:	c0 e0       	ldi	r28, 0x00	; 0
     176:	01 e0       	ldi	r16, 0x01	; 1
     178:	10 e0       	ldi	r17, 0x00	; 0
     17a:	98 01       	movw	r18, r16
     17c:	0c 2e       	mov	r0, r28
     17e:	01 c0       	rjmp	.+2      	; 0x182 <PCint(unsigned char)+0x5c>
     180:	22 0f       	add	r18, r18
     182:	0a 94       	dec	r0
     184:	ea f7       	brpl	.-6      	; 0x180 <PCint(unsigned char)+0x5a>
     186:	8e 2d       	mov	r24, r14
     188:	82 23       	and	r24, r18
     18a:	91 f0       	breq	.+36     	; 0x1b0 <PCint(unsigned char)+0x8a>
     18c:	ec 2f       	mov	r30, r28
     18e:	ed 0d       	add	r30, r13
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	ee 0f       	add	r30, r30
     194:	ff 1f       	adc	r31, r31
     196:	df 01       	movw	r26, r30
     198:	a9 59       	subi	r26, 0x99	; 153
     19a:	be 4f       	sbci	r27, 0xFE	; 254
     19c:	8d 91       	ld	r24, X+
     19e:	9c 91       	ld	r25, X
     1a0:	81 30       	cpi	r24, 0x01	; 1
     1a2:	91 05       	cpc	r25, r1
     1a4:	a9 f0       	breq	.+42     	; 0x1d0 <PCint(unsigned char)+0xaa>
     1a6:	83 30       	cpi	r24, 0x03	; 3
     1a8:	91 05       	cpc	r25, r1
     1aa:	71 f4       	brne	.+28     	; 0x1c8 <PCint(unsigned char)+0xa2>
     1ac:	2f 21       	and	r18, r15
     1ae:	81 f4       	brne	.+32     	; 0x1d0 <PCint(unsigned char)+0xaa>
     1b0:	21 96       	adiw	r28, 0x01	; 1
     1b2:	c8 30       	cpi	r28, 0x08	; 8
     1b4:	d1 05       	cpc	r29, r1
     1b6:	09 f7       	brne	.-62     	; 0x17a <PCint(unsigned char)+0x54>
     1b8:	df 91       	pop	r29
     1ba:	cf 91       	pop	r28
     1bc:	1f 91       	pop	r17
     1be:	0f 91       	pop	r16
     1c0:	ff 90       	pop	r15
     1c2:	ef 90       	pop	r14
     1c4:	df 90       	pop	r13
     1c6:	08 95       	ret
     1c8:	02 97       	sbiw	r24, 0x02	; 2
     1ca:	91 f7       	brne	.-28     	; 0x1b0 <PCint(unsigned char)+0x8a>
     1cc:	2f 21       	and	r18, r15
     1ce:	81 f7       	brne	.-32     	; 0x1b0 <PCint(unsigned char)+0x8a>
     1d0:	e9 5c       	subi	r30, 0xC9	; 201
     1d2:	fe 4f       	sbci	r31, 0xFE	; 254
     1d4:	80 81       	ld	r24, Z
     1d6:	91 81       	ldd	r25, Z+1	; 0x01
     1d8:	89 2b       	or	r24, r25
     1da:	51 f3       	breq	.-44     	; 0x1b0 <PCint(unsigned char)+0x8a>
     1dc:	01 90       	ld	r0, Z+
     1de:	f0 81       	ld	r31, Z
     1e0:	e0 2d       	mov	r30, r0
     1e2:	09 95       	icall
     1e4:	e5 cf       	rjmp	.-54     	; 0x1b0 <PCint(unsigned char)+0x8a>

000001e6 <PCattachInterrupt(unsigned char, void (*)(), int)>:
_Z17PCattachInterrupthPFvvEi():
     1e6:	cf 93       	push	r28
     1e8:	28 2f       	mov	r18, r24
     1ea:	30 e0       	ldi	r19, 0x00	; 0
     1ec:	f9 01       	movw	r30, r18
     1ee:	e1 58       	subi	r30, 0x81	; 129
     1f0:	ff 4f       	sbci	r31, 0xFF	; 255
     1f2:	c4 91       	lpm	r28, Z
     1f4:	2a 56       	subi	r18, 0x6A	; 106
     1f6:	3f 4f       	sbci	r19, 0xFF	; 255
     1f8:	f9 01       	movw	r30, r18
     1fa:	24 91       	lpm	r18, Z
     1fc:	22 23       	and	r18, r18
     1fe:	09 f4       	brne	.+2      	; 0x202 <PCattachInterrupt(unsigned char, void (*)(), int)+0x1c>
     200:	3e c0       	rjmp	.+124    	; 0x27e <PCattachInterrupt(unsigned char, void (*)(), int)+0x98>
     202:	22 50       	subi	r18, 0x02	; 2
     204:	a2 2f       	mov	r26, r18
     206:	b0 e0       	ldi	r27, 0x00	; 0
     208:	aa 0f       	add	r26, r26
     20a:	bb 1f       	adc	r27, r27
     20c:	a0 50       	subi	r26, 0x00	; 0
     20e:	bf 4f       	sbci	r27, 0xFF	; 255
     210:	0d 90       	ld	r0, X+
     212:	bc 91       	ld	r27, X
     214:	a0 2d       	mov	r26, r0
     216:	21 30       	cpi	r18, 0x01	; 1
     218:	09 f0       	breq	.+2      	; 0x21c <PCattachInterrupt(unsigned char, void (*)(), int)+0x36>
     21a:	33 c0       	rjmp	.+102    	; 0x282 <PCattachInterrupt(unsigned char, void (*)(), int)+0x9c>
     21c:	86 50       	subi	r24, 0x06	; 6
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	88 0f       	add	r24, r24
     222:	99 1f       	adc	r25, r25
     224:	fc 01       	movw	r30, r24
     226:	e9 59       	subi	r30, 0x99	; 153
     228:	fe 4f       	sbci	r31, 0xFE	; 254
     22a:	51 83       	std	Z+1, r21	; 0x01
     22c:	40 83       	st	Z, r20
     22e:	89 5c       	subi	r24, 0xC9	; 201
     230:	9e 4f       	sbci	r25, 0xFE	; 254
     232:	fc 01       	movw	r30, r24
     234:	71 83       	std	Z+1, r23	; 0x01
     236:	60 83       	st	Z, r22
     238:	ec 91       	ld	r30, X
     23a:	ce 2b       	or	r28, r30
     23c:	cc 93       	st	X, r28
     23e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
     242:	41 e0       	ldi	r20, 0x01	; 1
     244:	50 e0       	ldi	r21, 0x00	; 0
     246:	01 c0       	rjmp	.+2      	; 0x24a <PCattachInterrupt(unsigned char, void (*)(), int)+0x64>
     248:	44 0f       	add	r20, r20
     24a:	2a 95       	dec	r18
     24c:	ea f7       	brpl	.-6      	; 0x248 <PCattachInterrupt(unsigned char, void (*)(), int)+0x62>
     24e:	84 2b       	or	r24, r20
     250:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
     254:	e1 eb       	ldi	r30, 0xB1	; 177
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	a5 91       	lpm	r26, Z+
     25a:	b4 91       	lpm	r27, Z
     25c:	8c 91       	ld	r24, X
     25e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__data_end>
     262:	e3 eb       	ldi	r30, 0xB3	; 179
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	a5 91       	lpm	r26, Z+
     268:	b4 91       	lpm	r27, Z
     26a:	8c 91       	ld	r24, X
     26c:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <__data_end+0x1>
     270:	e5 eb       	ldi	r30, 0xB5	; 181
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	a5 91       	lpm	r26, Z+
     276:	b4 91       	lpm	r27, Z
     278:	8c 91       	ld	r24, X
     27a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end+0x2>
     27e:	cf 91       	pop	r28
     280:	08 95       	ret
     282:	98 2f       	mov	r25, r24
     284:	97 70       	andi	r25, 0x07	; 7
     286:	82 2f       	mov	r24, r18
     288:	88 0f       	add	r24, r24
     28a:	88 0f       	add	r24, r24
     28c:	88 0f       	add	r24, r24
     28e:	89 0f       	add	r24, r25
     290:	c6 cf       	rjmp	.-116    	; 0x21e <PCattachInterrupt(unsigned char, void (*)(), int)+0x38>

00000292 <__vector_3>:
__vector_3():
     292:	1f 92       	push	r1
     294:	0f 92       	push	r0
     296:	0f b6       	in	r0, 0x3f	; 63
     298:	0f 92       	push	r0
     29a:	11 24       	eor	r1, r1
     29c:	2f 93       	push	r18
     29e:	3f 93       	push	r19
     2a0:	4f 93       	push	r20
     2a2:	5f 93       	push	r21
     2a4:	6f 93       	push	r22
     2a6:	7f 93       	push	r23
     2a8:	8f 93       	push	r24
     2aa:	9f 93       	push	r25
     2ac:	af 93       	push	r26
     2ae:	bf 93       	push	r27
     2b0:	ef 93       	push	r30
     2b2:	ff 93       	push	r31
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	0e 94 93 00 	call	0x126	; 0x126 <PCint(unsigned char)>
     2ba:	ff 91       	pop	r31
     2bc:	ef 91       	pop	r30
     2be:	bf 91       	pop	r27
     2c0:	af 91       	pop	r26
     2c2:	9f 91       	pop	r25
     2c4:	8f 91       	pop	r24
     2c6:	7f 91       	pop	r23
     2c8:	6f 91       	pop	r22
     2ca:	5f 91       	pop	r21
     2cc:	4f 91       	pop	r20
     2ce:	3f 91       	pop	r19
     2d0:	2f 91       	pop	r18
     2d2:	0f 90       	pop	r0
     2d4:	0f be       	out	0x3f, r0	; 63
     2d6:	0f 90       	pop	r0
     2d8:	1f 90       	pop	r1
     2da:	18 95       	reti

000002dc <__vector_4>:
__vector_4():
     2dc:	1f 92       	push	r1
     2de:	0f 92       	push	r0
     2e0:	0f b6       	in	r0, 0x3f	; 63
     2e2:	0f 92       	push	r0
     2e4:	11 24       	eor	r1, r1
     2e6:	2f 93       	push	r18
     2e8:	3f 93       	push	r19
     2ea:	4f 93       	push	r20
     2ec:	5f 93       	push	r21
     2ee:	6f 93       	push	r22
     2f0:	7f 93       	push	r23
     2f2:	8f 93       	push	r24
     2f4:	9f 93       	push	r25
     2f6:	af 93       	push	r26
     2f8:	bf 93       	push	r27
     2fa:	ef 93       	push	r30
     2fc:	ff 93       	push	r31
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	0e 94 93 00 	call	0x126	; 0x126 <PCint(unsigned char)>
     304:	ff 91       	pop	r31
     306:	ef 91       	pop	r30
     308:	bf 91       	pop	r27
     30a:	af 91       	pop	r26
     30c:	9f 91       	pop	r25
     30e:	8f 91       	pop	r24
     310:	7f 91       	pop	r23
     312:	6f 91       	pop	r22
     314:	5f 91       	pop	r21
     316:	4f 91       	pop	r20
     318:	3f 91       	pop	r19
     31a:	2f 91       	pop	r18
     31c:	0f 90       	pop	r0
     31e:	0f be       	out	0x3f, r0	; 63
     320:	0f 90       	pop	r0
     322:	1f 90       	pop	r1
     324:	18 95       	reti

00000326 <__vector_5>:
__vector_5():
     326:	1f 92       	push	r1
     328:	0f 92       	push	r0
     32a:	0f b6       	in	r0, 0x3f	; 63
     32c:	0f 92       	push	r0
     32e:	11 24       	eor	r1, r1
     330:	2f 93       	push	r18
     332:	3f 93       	push	r19
     334:	4f 93       	push	r20
     336:	5f 93       	push	r21
     338:	6f 93       	push	r22
     33a:	7f 93       	push	r23
     33c:	8f 93       	push	r24
     33e:	9f 93       	push	r25
     340:	af 93       	push	r26
     342:	bf 93       	push	r27
     344:	ef 93       	push	r30
     346:	ff 93       	push	r31
     348:	82 e0       	ldi	r24, 0x02	; 2
     34a:	0e 94 93 00 	call	0x126	; 0x126 <PCint(unsigned char)>
     34e:	ff 91       	pop	r31
     350:	ef 91       	pop	r30
     352:	bf 91       	pop	r27
     354:	af 91       	pop	r26
     356:	9f 91       	pop	r25
     358:	8f 91       	pop	r24
     35a:	7f 91       	pop	r23
     35c:	6f 91       	pop	r22
     35e:	5f 91       	pop	r21
     360:	4f 91       	pop	r20
     362:	3f 91       	pop	r19
     364:	2f 91       	pop	r18
     366:	0f 90       	pop	r0
     368:	0f be       	out	0x3f, r0	; 63
     36a:	0f 90       	pop	r0
     36c:	1f 90       	pop	r1
     36e:	18 95       	reti

00000370 <PCF8574::PCF8574()>:
_ZN7PCF8574C2Ev():
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
     374:	fc 01       	movw	r30, r24
     376:	10 82       	st	Z, r1
     378:	11 82       	std	Z+1, r1	; 0x01
     37a:	12 82       	std	Z+2, r1	; 0x02
     37c:	13 82       	std	Z+3, r1	; 0x03
     37e:	14 82       	std	Z+4, r1	; 0x04
     380:	15 82       	std	Z+5, r1	; 0x05
     382:	16 82       	std	Z+6, r1	; 0x06
     384:	ec 01       	movw	r28, r24
     386:	27 96       	adiw	r28, 0x07	; 7
     388:	dc 01       	movw	r26, r24
     38a:	1f 96       	adiw	r26, 0x0f	; 15
     38c:	19 92       	st	Y+, r1
     38e:	ac 17       	cp	r26, r28
     390:	bd 07       	cpc	r27, r29
     392:	e1 f7       	brne	.-8      	; 0x38c <PCF8574::PCF8574()+0x1c>
     394:	7f 96       	adiw	r30, 0x1f	; 31
     396:	1d 92       	st	X+, r1
     398:	1d 92       	st	X+, r1
     39a:	ea 17       	cp	r30, r26
     39c:	fb 07       	cpc	r31, r27
     39e:	d9 f7       	brne	.-10     	; 0x396 <PCF8574::PCF8574()+0x26>
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	08 95       	ret

000003a6 <PCF8574::enableInterrupt(unsigned char, void (*)())>:
_ZN7PCF857415enableInterruptEhPFvvE():
     3a6:	0f 93       	push	r16
     3a8:	1f 93       	push	r17
     3aa:	cf 93       	push	r28
     3ac:	c6 2f       	mov	r28, r22
     3ae:	8a 01       	movw	r16, r20
     3b0:	fc 01       	movw	r30, r24
     3b2:	66 83       	std	Z+6, r22	; 0x06
     3b4:	62 e0       	ldi	r22, 0x02	; 2
     3b6:	8c 2f       	mov	r24, r28
     3b8:	0e 94 b6 0c 	call	0x196c	; 0x196c <pinMode>
     3bc:	42 e0       	ldi	r20, 0x02	; 2
     3be:	50 e0       	ldi	r21, 0x00	; 0
     3c0:	b8 01       	movw	r22, r16
     3c2:	8c 2f       	mov	r24, r28
     3c4:	cf 91       	pop	r28
     3c6:	1f 91       	pop	r17
     3c8:	0f 91       	pop	r16
     3ca:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <PCattachInterrupt(unsigned char, void (*)(), int)>

000003ce <PCF8574::readGPIO()>:
_ZN7PCF85748readGPIOEv():
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	ec 01       	movw	r28, r24
     3d4:	89 81       	ldd	r24, Y+1	; 0x01
     3d6:	8c 83       	std	Y+4, r24	; 0x04
     3d8:	41 e0       	ldi	r20, 0x01	; 1
     3da:	6b 81       	ldd	r22, Y+3	; 0x03
     3dc:	8a e3       	ldi	r24, 0x3A	; 58
     3de:	92 e0       	ldi	r25, 0x02	; 2
     3e0:	0e 94 da 09 	call	0x13b4	; 0x13b4 <TwoWire::requestFrom(unsigned char, unsigned char)>
     3e4:	8a e3       	ldi	r24, 0x3A	; 58
     3e6:	92 e0       	ldi	r25, 0x02	; 2
     3e8:	0e 94 8c 08 	call	0x1118	; 0x1118 <TwoWire::available()>
     3ec:	18 16       	cp	r1, r24
     3ee:	19 06       	cpc	r1, r25
     3f0:	cc f7       	brge	.-14     	; 0x3e4 <PCF8574::readGPIO()+0x16>
     3f2:	8a e3       	ldi	r24, 0x3A	; 58
     3f4:	92 e0       	ldi	r25, 0x02	; 2
     3f6:	0e 94 93 08 	call	0x1126	; 0x1126 <TwoWire::read()>
     3fa:	89 83       	std	Y+1, r24	; 0x01
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	08 95       	ret

00000402 <PCF8574::begin(unsigned char)>:
_ZN7PCF85745beginEh():
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	ec 01       	movw	r28, r24
     408:	6b 83       	std	Y+3, r22	; 0x03
     40a:	8a e3       	ldi	r24, 0x3A	; 58
     40c:	92 e0       	ldi	r25, 0x02	; 2
     40e:	0e 94 48 09 	call	0x1290	; 0x1290 <TwoWire::begin()>
     412:	ce 01       	movw	r24, r28
     414:	df 91       	pop	r29
     416:	cf 91       	pop	r28
     418:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <PCF8574::readGPIO()>

0000041c <PCF8574::read()>:
_ZN7PCF85744readEv():
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
     420:	ec 01       	movw	r28, r24
     422:	0e 94 e7 01 	call	0x3ce	; 0x3ce <PCF8574::readGPIO()>
     426:	89 81       	ldd	r24, Y+1	; 0x01
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	08 95       	ret

0000042e <PCF8574::updateGPIO()>:
_ZN7PCF857410updateGPIOEv():
     42e:	1f 93       	push	r17
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	fc 01       	movw	r30, r24
     436:	11 81       	ldd	r17, Z+1	; 0x01
     438:	c2 81       	ldd	r28, Z+2	; 0x02
     43a:	d0 81       	ld	r29, Z
     43c:	63 81       	ldd	r22, Z+3	; 0x03
     43e:	8a e3       	ldi	r24, 0x3A	; 58
     440:	92 e0       	ldi	r25, 0x02	; 2
     442:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <TwoWire::beginTransmission(unsigned char)>
     446:	6c 2f       	mov	r22, r28
     448:	60 95       	com	r22
     44a:	61 23       	and	r22, r17
     44c:	6d 2b       	or	r22, r29
     44e:	8a e3       	ldi	r24, 0x3A	; 58
     450:	92 e0       	ldi	r25, 0x02	; 2
     452:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <TwoWire::write(unsigned char)>
     456:	8a e3       	ldi	r24, 0x3A	; 58
     458:	92 e0       	ldi	r25, 0x02	; 2
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	1f 91       	pop	r17
     460:	0c 94 dd 09 	jmp	0x13ba	; 0x13ba <TwoWire::endTransmission()>

00000464 <PCF8574::pinMode(unsigned char, unsigned char)>:
_ZN7PCF85747pinModeEhh():
     464:	fc 01       	movw	r30, r24
     466:	41 30       	cpi	r20, 0x01	; 1
     468:	19 f1       	breq	.+70     	; 0x4b0 <PCF8574::pinMode(unsigned char, unsigned char)+0x4c>
     46a:	28 f0       	brcs	.+10     	; 0x476 <PCF8574::pinMode(unsigned char, unsigned char)+0x12>
     46c:	42 30       	cpi	r20, 0x02	; 2
     46e:	89 f0       	breq	.+34     	; 0x492 <PCF8574::pinMode(unsigned char, unsigned char)+0x2e>
     470:	cf 01       	movw	r24, r30
     472:	0c 94 17 02 	jmp	0x42e	; 0x42e <PCF8574::updateGPIO()>
     476:	22 81       	ldd	r18, Z+2	; 0x02
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	01 c0       	rjmp	.+2      	; 0x480 <PCF8574::pinMode(unsigned char, unsigned char)+0x1c>
     47e:	88 0f       	add	r24, r24
     480:	6a 95       	dec	r22
     482:	ea f7       	brpl	.-6      	; 0x47e <PCF8574::pinMode(unsigned char, unsigned char)+0x1a>
     484:	80 95       	com	r24
     486:	92 2f       	mov	r25, r18
     488:	98 23       	and	r25, r24
     48a:	92 83       	std	Z+2, r25	; 0x02
     48c:	90 81       	ld	r25, Z
     48e:	89 23       	and	r24, r25
     490:	0d c0       	rjmp	.+26     	; 0x4ac <PCF8574::pinMode(unsigned char, unsigned char)+0x48>
     492:	22 81       	ldd	r18, Z+2	; 0x02
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	01 c0       	rjmp	.+2      	; 0x49c <PCF8574::pinMode(unsigned char, unsigned char)+0x38>
     49a:	88 0f       	add	r24, r24
     49c:	6a 95       	dec	r22
     49e:	ea f7       	brpl	.-6      	; 0x49a <PCF8574::pinMode(unsigned char, unsigned char)+0x36>
     4a0:	98 2f       	mov	r25, r24
     4a2:	90 95       	com	r25
     4a4:	92 23       	and	r25, r18
     4a6:	92 83       	std	Z+2, r25	; 0x02
     4a8:	90 81       	ld	r25, Z
     4aa:	89 2b       	or	r24, r25
     4ac:	80 83       	st	Z, r24
     4ae:	e0 cf       	rjmp	.-64     	; 0x470 <PCF8574::pinMode(unsigned char, unsigned char)+0xc>
     4b0:	22 81       	ldd	r18, Z+2	; 0x02
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	01 c0       	rjmp	.+2      	; 0x4ba <PCF8574::pinMode(unsigned char, unsigned char)+0x56>
     4b8:	88 0f       	add	r24, r24
     4ba:	6a 95       	dec	r22
     4bc:	ea f7       	brpl	.-6      	; 0x4b8 <PCF8574::pinMode(unsigned char, unsigned char)+0x54>
     4be:	92 2f       	mov	r25, r18
     4c0:	98 2b       	or	r25, r24
     4c2:	92 83       	std	Z+2, r25	; 0x02
     4c4:	90 81       	ld	r25, Z
     4c6:	80 95       	com	r24
     4c8:	e2 cf       	rjmp	.-60     	; 0x48e <PCF8574::pinMode(unsigned char, unsigned char)+0x2a>

000004ca <PCF8574::write(unsigned char)>:
_ZN7PCF85745writeEh():
C:\Users\Jacek\AppData\Local\Temp\arduino_build_822547\sketch/PCF8574.cpp:97
}

void PCF8574::write(uint8_t value) {

	/* Store pins values and apply */
	_PORT = value;
     4ca:	fc 01       	movw	r30, r24
     4cc:	60 83       	st	Z, r22
C:\Users\Jacek\AppData\Local\Temp\arduino_build_822547\sketch/PCF8574.cpp:100

	/* Update GPIO values */
	updateGPIO();
     4ce:	0c 94 17 02 	jmp	0x42e	; 0x42e <PCF8574::updateGPIO()>

000004d2 <PCF8574::clear()>:
C:\Users\Jacek\AppData\Local\Temp\arduino_build_822547\sketch/PCF8574.cpp:97
}

void PCF8574::write(uint8_t value) {

	/* Store pins values and apply */
	_PORT = value;
     4d2:	fc 01       	movw	r30, r24
     4d4:	10 82       	st	Z, r1
C:\Users\Jacek\AppData\Local\Temp\arduino_build_822547\sketch/PCF8574.cpp:100

	/* Update GPIO values */
	updateGPIO();
     4d6:	0c 94 17 02 	jmp	0x42e	; 0x42e <PCF8574::updateGPIO()>

000004da <onInterrupt()>:
_Z11onInterruptv():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:695
        break;
    case MB_FC_READ_INPUT_REGISTER:
    case MB_FC_READ_REGISTERS :
        // call get_FC3 to transfer the incoming message to au16regs buffer
        get_FC3( );
        break;
     4da:	89 e9       	ldi	r24, 0x99	; 153
     4dc:	91 e0       	ldi	r25, 0x01	; 1
     4de:	0e 94 0e 02 	call	0x41c	; 0x41c <PCF8574::read()>
     4e2:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <state>
     4e6:	08 95       	ret

000004e8 <Modbus::start()>:
_ZN6Modbus5startEv():
     4e8:	cf 93       	push	r28
     4ea:	df 93       	push	r29
     4ec:	ec 01       	movw	r28, r24
     4ee:	8b 81       	ldd	r24, Y+3	; 0x03
     4f0:	82 30       	cpi	r24, 0x02	; 2
     4f2:	38 f0       	brcs	.+14     	; 0x502 <__stack+0x3>
     4f4:	61 e0       	ldi	r22, 0x01	; 1
     4f6:	0e 94 b6 0c 	call	0x196c	; 0x196c <pinMode>
     4fa:	60 e0       	ldi	r22, 0x00	; 0
     4fc:	8b 81       	ldd	r24, Y+3	; 0x03
     4fe:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <digitalWrite>
     502:	88 81       	ld	r24, Y
     504:	99 81       	ldd	r25, Y+1	; 0x01
     506:	dc 01       	movw	r26, r24
     508:	ed 91       	ld	r30, X+
     50a:	fc 91       	ld	r31, X
     50c:	02 84       	ldd	r0, Z+10	; 0x0a
     50e:	f3 85       	ldd	r31, Z+11	; 0x0b
     510:	e0 2d       	mov	r30, r0
     512:	09 95       	icall
     514:	97 ff       	sbrs	r25, 7
     516:	f5 cf       	rjmp	.-22     	; 0x502 <__stack+0x3>
     518:	fe 01       	movw	r30, r28
     51a:	ea 5b       	subi	r30, 0xBA	; 186
     51c:	ff 4f       	sbci	r31, 0xFF	; 255
     51e:	10 82       	st	Z, r1
     520:	31 96       	adiw	r30, 0x01	; 1
     522:	10 82       	st	Z, r1
     524:	37 96       	adiw	r30, 0x07	; 7
     526:	11 82       	std	Z+1, r1	; 0x01
     528:	10 82       	st	Z, r1
     52a:	32 97       	sbiw	r30, 0x02	; 2
     52c:	11 82       	std	Z+1, r1	; 0x01
     52e:	10 82       	st	Z, r1
     530:	c6 5b       	subi	r28, 0xB6	; 182
     532:	df 4f       	sbci	r29, 0xFF	; 255
     534:	19 82       	std	Y+1, r1	; 0x01
     536:	18 82       	st	Y, r1
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	08 95       	ret

0000053e <Modbus::begin(long)>:
_ZN6Modbus5beginEl():
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	ec 01       	movw	r28, r24
_ZN14HardwareSerial5beginEm():
     544:	26 e0       	ldi	r18, 0x06	; 6
     546:	88 81       	ld	r24, Y
     548:	99 81       	ldd	r25, Y+1	; 0x01
     54a:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <HardwareSerial::begin(unsigned long, unsigned char)>
_ZN6Modbus5beginEl():
     54e:	ce 01       	movw	r24, r28
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <Modbus::start()>

00000558 <Modbus::getRxBuffer()>:
_ZN6Modbus11getRxBufferEv():
     558:	ff 92       	push	r15
     55a:	0f 93       	push	r16
     55c:	1f 93       	push	r17
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	ec 01       	movw	r28, r24
     564:	8b 81       	ldd	r24, Y+3	; 0x03
     566:	82 30       	cpi	r24, 0x02	; 2
     568:	18 f0       	brcs	.+6      	; 0x570 <Modbus::getRxBuffer()+0x18>
     56a:	60 e0       	ldi	r22, 0x00	; 0
     56c:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <digitalWrite>
     570:	8e 01       	movw	r16, r28
     572:	0a 5b       	subi	r16, 0xBA	; 186
     574:	1f 4f       	sbci	r17, 0xFF	; 255
     576:	d8 01       	movw	r26, r16
     578:	1c 92       	st	X, r1
     57a:	f1 2c       	mov	r15, r1
     57c:	88 81       	ld	r24, Y
     57e:	99 81       	ldd	r25, Y+1	; 0x01
     580:	dc 01       	movw	r26, r24
     582:	ed 91       	ld	r30, X+
     584:	fc 91       	ld	r31, X
     586:	00 84       	ldd	r0, Z+8	; 0x08
     588:	f1 85       	ldd	r31, Z+9	; 0x09
     58a:	e0 2d       	mov	r30, r0
     58c:	09 95       	icall
     58e:	89 2b       	or	r24, r25
     590:	b9 f0       	breq	.+46     	; 0x5c0 <Modbus::getRxBuffer()+0x68>
     592:	88 81       	ld	r24, Y
     594:	99 81       	ldd	r25, Y+1	; 0x01
     596:	dc 01       	movw	r26, r24
     598:	ed 91       	ld	r30, X+
     59a:	fc 91       	ld	r31, X
     59c:	02 84       	ldd	r0, Z+10	; 0x0a
     59e:	f3 85       	ldd	r31, Z+11	; 0x0b
     5a0:	e0 2d       	mov	r30, r0
     5a2:	09 95       	icall
     5a4:	f8 01       	movw	r30, r16
     5a6:	90 81       	ld	r25, Z
     5a8:	fe 01       	movw	r30, r28
     5aa:	e9 0f       	add	r30, r25
     5ac:	f1 1d       	adc	r31, r1
     5ae:	86 83       	std	Z+6, r24	; 0x06
     5b0:	9f 5f       	subi	r25, 0xFF	; 255
     5b2:	d8 01       	movw	r26, r16
     5b4:	9c 93       	st	X, r25
     5b6:	90 34       	cpi	r25, 0x40	; 64
     5b8:	08 f3       	brcs	.-62     	; 0x57c <Modbus::getRxBuffer()+0x24>
     5ba:	ff 24       	eor	r15, r15
     5bc:	f3 94       	inc	r15
     5be:	de cf       	rjmp	.-68     	; 0x57c <Modbus::getRxBuffer()+0x24>
     5c0:	fe 01       	movw	r30, r28
     5c2:	e6 5b       	subi	r30, 0xB6	; 182
     5c4:	ff 4f       	sbci	r31, 0xFF	; 255
     5c6:	80 81       	ld	r24, Z
     5c8:	91 81       	ldd	r25, Z+1	; 0x01
     5ca:	01 96       	adiw	r24, 0x01	; 1
     5cc:	91 83       	std	Z+1, r25	; 0x01
     5ce:	80 83       	st	Z, r24
     5d0:	ff 20       	and	r15, r15
     5d2:	71 f0       	breq	.+28     	; 0x5f0 <Modbus::getRxBuffer()+0x98>
     5d4:	c2 5b       	subi	r28, 0xB2	; 178
     5d6:	df 4f       	sbci	r29, 0xFF	; 255
     5d8:	88 81       	ld	r24, Y
     5da:	99 81       	ldd	r25, Y+1	; 0x01
     5dc:	01 96       	adiw	r24, 0x01	; 1
     5de:	99 83       	std	Y+1, r25	; 0x01
     5e0:	88 83       	st	Y, r24
     5e2:	8d ef       	ldi	r24, 0xFD	; 253
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	1f 91       	pop	r17
     5ea:	0f 91       	pop	r16
     5ec:	ff 90       	pop	r15
     5ee:	08 95       	ret
     5f0:	f8 01       	movw	r30, r16
     5f2:	80 81       	ld	r24, Z
     5f4:	f7 cf       	rjmp	.-18     	; 0x5e4 <Modbus::getRxBuffer()+0x8c>

000005f6 <Modbus::calcCRC(unsigned char)>:
_ZN6Modbus7calcCRCEh():
     5f6:	fc 01       	movw	r30, r24
     5f8:	36 96       	adiw	r30, 0x06	; 6
     5fa:	20 e0       	ldi	r18, 0x00	; 0
     5fc:	8f ef       	ldi	r24, 0xFF	; 255
     5fe:	9f ef       	ldi	r25, 0xFF	; 255
     600:	26 17       	cp	r18, r22
     602:	91 f0       	breq	.+36     	; 0x628 <Modbus::calcCRC(unsigned char)+0x32>
     604:	31 91       	ld	r19, Z+
     606:	83 27       	eor	r24, r19
     608:	38 e0       	ldi	r19, 0x08	; 8
     60a:	ac 01       	movw	r20, r24
     60c:	41 70       	andi	r20, 0x01	; 1
     60e:	55 27       	eor	r21, r21
     610:	96 95       	lsr	r25
     612:	87 95       	ror	r24
     614:	45 2b       	or	r20, r21
     616:	21 f0       	breq	.+8      	; 0x620 <Modbus::calcCRC(unsigned char)+0x2a>
     618:	41 e0       	ldi	r20, 0x01	; 1
     61a:	84 27       	eor	r24, r20
     61c:	40 ea       	ldi	r20, 0xA0	; 160
     61e:	94 27       	eor	r25, r20
     620:	31 50       	subi	r19, 0x01	; 1
     622:	99 f7       	brne	.-26     	; 0x60a <Modbus::calcCRC(unsigned char)+0x14>
     624:	2f 5f       	subi	r18, 0xFF	; 255
     626:	ec cf       	rjmp	.-40     	; 0x600 <Modbus::calcCRC(unsigned char)+0xa>
     628:	98 27       	eor	r25, r24
     62a:	89 27       	eor	r24, r25
     62c:	98 27       	eor	r25, r24
     62e:	08 95       	ret

00000630 <Modbus::sendTxBuffer()>:
_ZN6Modbus12sendTxBufferEv():
     630:	cf 92       	push	r12
     632:	df 92       	push	r13
     634:	ff 92       	push	r15
     636:	0f 93       	push	r16
     638:	1f 93       	push	r17
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
     63e:	00 d0       	rcall	.+0      	; 0x640 <Modbus::sendTxBuffer()+0x10>
     640:	00 d0       	rcall	.+0      	; 0x642 <Modbus::sendTxBuffer()+0x12>
     642:	cd b7       	in	r28, 0x3d	; 61
     644:	de b7       	in	r29, 0x3e	; 62
     646:	8c 01       	movw	r16, r24
     648:	6c 01       	movw	r12, r24
     64a:	86 e4       	ldi	r24, 0x46	; 70
     64c:	c8 0e       	add	r12, r24
     64e:	d1 1c       	adc	r13, r1
     650:	d6 01       	movw	r26, r12
     652:	fc 90       	ld	r15, X
     654:	6f 2d       	mov	r22, r15
     656:	c8 01       	movw	r24, r16
     658:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <Modbus::calcCRC(unsigned char)>
     65c:	f8 01       	movw	r30, r16
     65e:	ef 0d       	add	r30, r15
     660:	f1 1d       	adc	r31, r1
     662:	96 83       	std	Z+6, r25	; 0x06
     664:	e1 e0       	ldi	r30, 0x01	; 1
     666:	ef 0d       	add	r30, r15
     668:	e0 0f       	add	r30, r16
     66a:	f1 2f       	mov	r31, r17
     66c:	f1 1d       	adc	r31, r1
     66e:	86 83       	std	Z+6, r24	; 0x06
     670:	f3 94       	inc	r15
     672:	f3 94       	inc	r15
     674:	f6 01       	movw	r30, r12
     676:	f0 82       	st	Z, r15
     678:	d8 01       	movw	r26, r16
     67a:	13 96       	adiw	r26, 0x03	; 3
     67c:	8c 91       	ld	r24, X
     67e:	82 30       	cpi	r24, 0x02	; 2
     680:	18 f0       	brcs	.+6      	; 0x688 <Modbus::sendTxBuffer()+0x58>
     682:	61 e0       	ldi	r22, 0x01	; 1
     684:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <digitalWrite>
     688:	f8 01       	movw	r30, r16
     68a:	80 81       	ld	r24, Z
     68c:	91 81       	ldd	r25, Z+1	; 0x01
     68e:	d6 01       	movw	r26, r12
     690:	4c 91       	ld	r20, X
     692:	50 e0       	ldi	r21, 0x00	; 0
     694:	dc 01       	movw	r26, r24
     696:	ed 91       	ld	r30, X+
     698:	fc 91       	ld	r31, X
     69a:	02 80       	ldd	r0, Z+2	; 0x02
     69c:	f3 81       	ldd	r31, Z+3	; 0x03
     69e:	e0 2d       	mov	r30, r0
     6a0:	b8 01       	movw	r22, r16
     6a2:	6a 5f       	subi	r22, 0xFA	; 250
     6a4:	7f 4f       	sbci	r23, 0xFF	; 255
     6a6:	09 95       	icall
     6a8:	f8 01       	movw	r30, r16
     6aa:	83 81       	ldd	r24, Z+3	; 0x03
     6ac:	82 30       	cpi	r24, 0x02	; 2
     6ae:	58 f1       	brcs	.+86     	; 0x706 <Modbus::sendTxBuffer()+0xd6>
     6b0:	80 81       	ld	r24, Z
     6b2:	91 81       	ldd	r25, Z+1	; 0x01
     6b4:	dc 01       	movw	r26, r24
     6b6:	ed 91       	ld	r30, X+
     6b8:	fc 91       	ld	r31, X
     6ba:	06 80       	ldd	r0, Z+6	; 0x06
     6bc:	f7 81       	ldd	r31, Z+7	; 0x07
     6be:	e0 2d       	mov	r30, r0
     6c0:	09 95       	icall
     6c2:	f8 01       	movw	r30, r16
     6c4:	e6 5a       	subi	r30, 0xA6	; 166
     6c6:	ff 4f       	sbci	r31, 0xFF	; 255
     6c8:	80 81       	ld	r24, Z
     6ca:	91 81       	ldd	r25, Z+1	; 0x01
     6cc:	a2 81       	ldd	r26, Z+2	; 0x02
     6ce:	b3 81       	ldd	r27, Z+3	; 0x03
     6d0:	89 83       	std	Y+1, r24	; 0x01
     6d2:	9a 83       	std	Y+2, r25	; 0x02
     6d4:	ab 83       	std	Y+3, r26	; 0x03
     6d6:	bc 83       	std	Y+4, r27	; 0x04
     6d8:	89 81       	ldd	r24, Y+1	; 0x01
     6da:	9a 81       	ldd	r25, Y+2	; 0x02
     6dc:	ab 81       	ldd	r26, Y+3	; 0x03
     6de:	bc 81       	ldd	r27, Y+4	; 0x04
     6e0:	ac 01       	movw	r20, r24
     6e2:	bd 01       	movw	r22, r26
     6e4:	41 50       	subi	r20, 0x01	; 1
     6e6:	51 09       	sbc	r21, r1
     6e8:	61 09       	sbc	r22, r1
     6ea:	71 09       	sbc	r23, r1
     6ec:	49 83       	std	Y+1, r20	; 0x01
     6ee:	5a 83       	std	Y+2, r21	; 0x02
     6f0:	6b 83       	std	Y+3, r22	; 0x03
     6f2:	7c 83       	std	Y+4, r23	; 0x04
     6f4:	89 2b       	or	r24, r25
     6f6:	8a 2b       	or	r24, r26
     6f8:	8b 2b       	or	r24, r27
     6fa:	71 f7       	brne	.-36     	; 0x6d8 <Modbus::sendTxBuffer()+0xa8>
     6fc:	60 e0       	ldi	r22, 0x00	; 0
     6fe:	f8 01       	movw	r30, r16
     700:	83 81       	ldd	r24, Z+3	; 0x03
     702:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <digitalWrite>
     706:	d8 01       	movw	r26, r16
     708:	8d 91       	ld	r24, X+
     70a:	9c 91       	ld	r25, X
     70c:	dc 01       	movw	r26, r24
     70e:	ed 91       	ld	r30, X+
     710:	fc 91       	ld	r31, X
     712:	02 84       	ldd	r0, Z+10	; 0x0a
     714:	f3 85       	ldd	r31, Z+11	; 0x0b
     716:	e0 2d       	mov	r30, r0
     718:	09 95       	icall
     71a:	97 ff       	sbrs	r25, 7
     71c:	f4 cf       	rjmp	.-24     	; 0x706 <Modbus::sendTxBuffer()+0xd6>
     71e:	f6 01       	movw	r30, r12
     720:	10 82       	st	Z, r1
     722:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <millis>
     726:	f8 01       	movw	r30, r16
     728:	ea 5a       	subi	r30, 0xAA	; 170
     72a:	ff 4f       	sbci	r31, 0xFF	; 255
     72c:	60 83       	st	Z, r22
     72e:	71 83       	std	Z+1, r23	; 0x01
     730:	82 83       	std	Z+2, r24	; 0x02
     732:	93 83       	std	Z+3, r25	; 0x03
     734:	3a 97       	sbiw	r30, 0x0a	; 10
     736:	80 81       	ld	r24, Z
     738:	91 81       	ldd	r25, Z+1	; 0x01
     73a:	01 96       	adiw	r24, 0x01	; 1
     73c:	91 83       	std	Z+1, r25	; 0x01
     73e:	80 83       	st	Z, r24
     740:	0f 90       	pop	r0
     742:	0f 90       	pop	r0
     744:	0f 90       	pop	r0
     746:	0f 90       	pop	r0
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	1f 91       	pop	r17
     74e:	0f 91       	pop	r16
     750:	ff 90       	pop	r15
     752:	df 90       	pop	r13
     754:	cf 90       	pop	r12
     756:	08 95       	ret

00000758 <Modbus::validateRequest()>:
_ZN6Modbus15validateRequestEv():
     758:	0f 93       	push	r16
     75a:	1f 93       	push	r17
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	ec 01       	movw	r28, r24
     762:	fc 01       	movw	r30, r24
     764:	ea 5b       	subi	r30, 0xBA	; 186
     766:	ff 4f       	sbci	r31, 0xFF	; 255
     768:	60 81       	ld	r22, Z
     76a:	06 2f       	mov	r16, r22
     76c:	10 e0       	ldi	r17, 0x00	; 0
     76e:	62 50       	subi	r22, 0x02	; 2
     770:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <Modbus::calcCRC(unsigned char)>
     774:	fe 01       	movw	r30, r28
     776:	e0 0f       	add	r30, r16
     778:	f1 1f       	adc	r31, r17
     77a:	24 81       	ldd	r18, Z+4	; 0x04
     77c:	35 81       	ldd	r19, Z+5	; 0x05
     77e:	23 27       	eor	r18, r19
     780:	32 27       	eor	r19, r18
     782:	23 27       	eor	r18, r19
     784:	82 17       	cp	r24, r18
     786:	93 07       	cpc	r25, r19
     788:	69 f0       	breq	.+26     	; 0x7a4 <Modbus::validateRequest()+0x4c>
     78a:	c2 5b       	subi	r28, 0xB2	; 178
     78c:	df 4f       	sbci	r29, 0xFF	; 255
     78e:	88 81       	ld	r24, Y
     790:	99 81       	ldd	r25, Y+1	; 0x01
     792:	01 96       	adiw	r24, 0x01	; 1
     794:	99 83       	std	Y+1, r25	; 0x01
     796:	88 83       	st	Y, r24
     798:	8f ef       	ldi	r24, 0xFF	; 255
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	1f 91       	pop	r17
     7a0:	0f 91       	pop	r16
     7a2:	08 95       	ret
     7a4:	ef 81       	ldd	r30, Y+7	; 0x07
     7a6:	a7 e0       	ldi	r26, 0x07	; 7
     7a8:	b1 e0       	ldi	r27, 0x01	; 1
     7aa:	8d 91       	ld	r24, X+
     7ac:	8e 17       	cp	r24, r30
     7ae:	09 f4       	brne	.+2      	; 0x7b2 <Modbus::validateRequest()+0x5a>
     7b0:	44 c0       	rjmp	.+136    	; 0x83a <Modbus::validateRequest()+0xe2>
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	af 30       	cpi	r26, 0x0F	; 15
     7b6:	b8 07       	cpc	r27, r24
     7b8:	c1 f7       	brne	.-16     	; 0x7aa <Modbus::validateRequest()+0x52>
     7ba:	c2 5b       	subi	r28, 0xB2	; 178
     7bc:	df 4f       	sbci	r29, 0xFF	; 255
     7be:	88 81       	ld	r24, Y
     7c0:	99 81       	ldd	r25, Y+1	; 0x01
     7c2:	01 96       	adiw	r24, 0x01	; 1
     7c4:	99 83       	std	Y+1, r25	; 0x01
     7c6:	88 83       	st	Y, r24
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	e7 cf       	rjmp	.-50     	; 0x79a <Modbus::validateRequest()+0x42>
     7cc:	69 85       	ldd	r22, Y+9	; 0x09
     7ce:	88 85       	ldd	r24, Y+8	; 0x08
     7d0:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <makeWord(unsigned char, unsigned char)>
     7d4:	8c 01       	movw	r16, r24
     7d6:	34 e0       	ldi	r19, 0x04	; 4
     7d8:	16 95       	lsr	r17
     7da:	07 95       	ror	r16
     7dc:	3a 95       	dec	r19
     7de:	e1 f7       	brne	.-8      	; 0x7d8 <Modbus::validateRequest()+0x80>
     7e0:	6b 85       	ldd	r22, Y+11	; 0x0b
     7e2:	8a 85       	ldd	r24, Y+10	; 0x0a
     7e4:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <makeWord(unsigned char, unsigned char)>
     7e8:	44 e0       	ldi	r20, 0x04	; 4
     7ea:	96 95       	lsr	r25
     7ec:	87 95       	ror	r24
     7ee:	4a 95       	dec	r20
     7f0:	e1 f7       	brne	.-8      	; 0x7ea <Modbus::validateRequest()+0x92>
     7f2:	80 0f       	add	r24, r16
     7f4:	91 1f       	adc	r25, r17
     7f6:	c2 5a       	subi	r28, 0xA2	; 162
     7f8:	df 4f       	sbci	r29, 0xFF	; 255
     7fa:	98 81       	ld	r25, Y
     7fc:	98 17       	cp	r25, r24
     7fe:	d8 f4       	brcc	.+54     	; 0x836 <Modbus::validateRequest()+0xde>
     800:	82 e0       	ldi	r24, 0x02	; 2
     802:	cb cf       	rjmp	.-106    	; 0x79a <Modbus::validateRequest()+0x42>
     804:	69 85       	ldd	r22, Y+9	; 0x09
     806:	88 85       	ldd	r24, Y+8	; 0x08
     808:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <makeWord(unsigned char, unsigned char)>
     80c:	24 e0       	ldi	r18, 0x04	; 4
     80e:	96 95       	lsr	r25
     810:	87 95       	ror	r24
     812:	2a 95       	dec	r18
     814:	e1 f7       	brne	.-8      	; 0x80e <Modbus::validateRequest()+0xb6>
     816:	ef cf       	rjmp	.-34     	; 0x7f6 <Modbus::validateRequest()+0x9e>
     818:	69 85       	ldd	r22, Y+9	; 0x09
     81a:	88 85       	ldd	r24, Y+8	; 0x08
     81c:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <makeWord(unsigned char, unsigned char)>
     820:	ea cf       	rjmp	.-44     	; 0x7f6 <Modbus::validateRequest()+0x9e>
     822:	69 85       	ldd	r22, Y+9	; 0x09
     824:	88 85       	ldd	r24, Y+8	; 0x08
     826:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <makeWord(unsigned char, unsigned char)>
     82a:	8c 01       	movw	r16, r24
     82c:	6b 85       	ldd	r22, Y+11	; 0x0b
     82e:	8a 85       	ldd	r24, Y+10	; 0x0a
     830:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <makeWord(unsigned char, unsigned char)>
     834:	de cf       	rjmp	.-68     	; 0x7f2 <Modbus::validateRequest()+0x9a>
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	b0 cf       	rjmp	.-160    	; 0x79a <Modbus::validateRequest()+0x42>
     83a:	e1 50       	subi	r30, 0x01	; 1
     83c:	e0 31       	cpi	r30, 0x10	; 16
     83e:	d8 f7       	brcc	.-10     	; 0x836 <Modbus::validateRequest()+0xde>
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	eb 5d       	subi	r30, 0xDB	; 219
     844:	fb 4f       	sbci	r31, 0xFB	; 251
     846:	0c 94 3c 0f 	jmp	0x1e78	; 0x1e78 <__tablejump2__>
     84a:	e6 03       	fmuls	r22, r22
     84c:	e6 03       	fmuls	r22, r22
     84e:	11 04       	cpc	r1, r1
     850:	11 04       	cpc	r1, r1
     852:	02 04       	cpc	r0, r2
     854:	0c 04       	cpc	r0, r12
     856:	1b 04       	cpc	r1, r11
     858:	1b 04       	cpc	r1, r11
     85a:	1b 04       	cpc	r1, r11
     85c:	1b 04       	cpc	r1, r11
     85e:	1b 04       	cpc	r1, r11
     860:	1b 04       	cpc	r1, r11
     862:	1b 04       	cpc	r1, r11
     864:	1b 04       	cpc	r1, r11
     866:	e6 03       	fmuls	r22, r22
     868:	11 04       	cpc	r1, r1

0000086a <Modbus::buildException(unsigned char)>:
_ZN6Modbus14buildExceptionEh():
     86a:	fc 01       	movw	r30, r24
     86c:	87 81       	ldd	r24, Z+7	; 0x07
     86e:	92 81       	ldd	r25, Z+2	; 0x02
     870:	96 83       	std	Z+6, r25	; 0x06
     872:	80 58       	subi	r24, 0x80	; 128
     874:	87 83       	std	Z+7, r24	; 0x07
     876:	60 87       	std	Z+8, r22	; 0x08
     878:	ea 5b       	subi	r30, 0xBA	; 186
     87a:	ff 4f       	sbci	r31, 0xFF	; 255
     87c:	83 e0       	ldi	r24, 0x03	; 3
     87e:	80 83       	st	Z, r24
     880:	08 95       	ret

00000882 <Modbus::process_FC1(unsigned int*, unsigned char)>:
_ZN6Modbus11process_FC1EPjh():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1100
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t Modbus::process_FC1( uint16_t *regs, uint8_t /*u8size*/ )
{
     882:	4f 92       	push	r4
     884:	5f 92       	push	r5
     886:	6f 92       	push	r6
     888:	7f 92       	push	r7
     88a:	8f 92       	push	r8
     88c:	9f 92       	push	r9
     88e:	af 92       	push	r10
     890:	bf 92       	push	r11
     892:	cf 92       	push	r12
     894:	df 92       	push	r13
     896:	ef 92       	push	r14
     898:	ff 92       	push	r15
     89a:	0f 93       	push	r16
     89c:	1f 93       	push	r17
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
     8a2:	00 d0       	rcall	.+0      	; 0x8a4 <Modbus::process_FC1(unsigned int*, unsigned char)+0x22>
     8a4:	00 d0       	rcall	.+0      	; 0x8a6 <Modbus::process_FC1(unsigned int*, unsigned char)+0x24>
     8a6:	00 d0       	rcall	.+0      	; 0x8a8 <Modbus::process_FC1(unsigned int*, unsigned char)+0x26>
     8a8:	cd b7       	in	r28, 0x3d	; 61
     8aa:	de b7       	in	r29, 0x3e	; 62
     8ac:	9e 83       	std	Y+6, r25	; 0x06
     8ae:	8d 83       	std	Y+5, r24	; 0x05
     8b0:	7b 01       	movw	r14, r22
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1106
    uint8_t u8currentRegister, u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( au8Buffer[ ADD_HI ], au8Buffer[ ADD_LO ] );
     8b2:	dc 01       	movw	r26, r24
     8b4:	19 96       	adiw	r26, 0x09	; 9
     8b6:	6c 91       	ld	r22, X
     8b8:	19 97       	sbiw	r26, 0x09	; 9
     8ba:	18 96       	adiw	r26, 0x08	; 8
     8bc:	8c 91       	ld	r24, X
     8be:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <makeWord(unsigned char, unsigned char)>
     8c2:	8c 01       	movw	r16, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1107
    uint16_t u16Coilno = word( au8Buffer[ NB_HI ], au8Buffer[ NB_LO ] );
     8c4:	ed 81       	ldd	r30, Y+5	; 0x05
     8c6:	fe 81       	ldd	r31, Y+6	; 0x06
     8c8:	63 85       	ldd	r22, Z+11	; 0x0b
     8ca:	82 85       	ldd	r24, Z+10	; 0x0a
     8cc:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <makeWord(unsigned char, unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1110

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
     8d0:	9c 01       	movw	r18, r24
     8d2:	43 e0       	ldi	r20, 0x03	; 3
     8d4:	36 95       	lsr	r19
     8d6:	27 95       	ror	r18
     8d8:	4a 95       	dec	r20
     8da:	e1 f7       	brne	.-8      	; 0x8d4 <Modbus::process_FC1(unsigned int*, unsigned char)+0x52>
     8dc:	a2 2f       	mov	r26, r18
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1111
    if (u16Coilno % 8 != 0) u8bytesno ++;
     8de:	bc 01       	movw	r22, r24
     8e0:	67 70       	andi	r22, 0x07	; 7
     8e2:	77 27       	eor	r23, r23
     8e4:	61 15       	cp	r22, r1
     8e6:	71 05       	cpc	r23, r1
     8e8:	11 f0       	breq	.+4      	; 0x8ee <Modbus::process_FC1(unsigned int*, unsigned char)+0x6c>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1111 (discriminator 1)
     8ea:	a1 e0       	ldi	r26, 0x01	; 1
     8ec:	a2 0f       	add	r26, r18
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1112
    au8Buffer[ ADD_HI ]  = u8bytesno;
     8ee:	ed 81       	ldd	r30, Y+5	; 0x05
     8f0:	fe 81       	ldd	r31, Y+6	; 0x06
     8f2:	a0 87       	std	Z+8, r26	; 0x08
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1113
    u8BufferSize         = ADD_LO;
     8f4:	ea 5b       	subi	r30, 0xBA	; 186
     8f6:	ff 4f       	sbci	r31, 0xFF	; 255
     8f8:	23 e0       	ldi	r18, 0x03	; 3
     8fa:	20 83       	st	Z, r18
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1114
    au8Buffer[ u8BufferSize + u8bytesno - 1 ] = 0;
     8fc:	2d 81       	ldd	r18, Y+5	; 0x05
     8fe:	3e 81       	ldd	r19, Y+6	; 0x06
     900:	2a 0f       	add	r18, r26
     902:	31 1d       	adc	r19, r1
     904:	d9 01       	movw	r26, r18
     906:	18 96       	adiw	r26, 0x08	; 8
     908:	1c 92       	st	X, r1
     90a:	38 01       	movw	r6, r16
     90c:	68 0e       	add	r6, r24
     90e:	79 1e       	adc	r7, r25
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1117

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
     910:	d1 2c       	mov	r13, r1
     912:	81 2c       	mov	r8, r1
     914:	91 2c       	mov	r9, r1
     916:	54 01       	movw	r10, r8
     918:	83 94       	inc	r8
     91a:	c0 80       	ld	r12, Z
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1119 (discriminator 1)

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
     91c:	60 16       	cp	r6, r16
     91e:	71 06       	cpc	r7, r17
     920:	09 f4       	brne	.+2      	; 0x924 <Modbus::process_FC1(unsigned int*, unsigned char)+0xa2>
     922:	40 c0       	rjmp	.+128    	; 0x9a4 <Modbus::process_FC1(unsigned int*, unsigned char)+0x122>
     924:	d5 01       	movw	r26, r10
     926:	c4 01       	movw	r24, r8
     928:	0d 2c       	mov	r0, r13
     92a:	04 c0       	rjmp	.+8      	; 0x934 <Modbus::process_FC1(unsigned int*, unsigned char)+0xb2>
     92c:	88 0f       	add	r24, r24
     92e:	99 1f       	adc	r25, r25
     930:	aa 1f       	adc	r26, r26
     932:	bb 1f       	adc	r27, r27
     934:	0a 94       	dec	r0
     936:	d2 f7       	brpl	.-12     	; 0x92c <Modbus::process_FC1(unsigned int*, unsigned char)+0xaa>
     938:	89 83       	std	Y+1, r24	; 0x01
     93a:	9a 83       	std	Y+2, r25	; 0x02
     93c:	ab 83       	std	Y+3, r26	; 0x03
     93e:	bc 83       	std	Y+4, r27	; 0x04
     940:	4d 81       	ldd	r20, Y+5	; 0x05
     942:	5e 81       	ldd	r21, Y+6	; 0x06
     944:	4c 0d       	add	r20, r12
     946:	51 1d       	adc	r21, r1
     948:	da 01       	movw	r26, r20
     94a:	16 96       	adiw	r26, 0x06	; 6
     94c:	5c 90       	ld	r5, X
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1125
    {
        u16coil = u16StartCoil + u16currentCoil;
        u8currentRegister = (uint8_t) (u16coil / 16);
        u8currentBit = (uint8_t) (u16coil % 16);

        bitWrite(
     94e:	98 01       	movw	r18, r16
     950:	83 e0       	ldi	r24, 0x03	; 3
     952:	36 95       	lsr	r19
     954:	27 95       	ror	r18
     956:	8a 95       	dec	r24
     958:	e1 f7       	brne	.-8      	; 0x952 <Modbus::process_FC1(unsigned int*, unsigned char)+0xd0>
     95a:	2e 7f       	andi	r18, 0xFE	; 254
     95c:	31 70       	andi	r19, 0x01	; 1
     95e:	2e 0d       	add	r18, r14
     960:	3f 1d       	adc	r19, r15
     962:	d9 01       	movw	r26, r18
     964:	2d 91       	ld	r18, X+
     966:	3c 91       	ld	r19, X
     968:	b0 2f       	mov	r27, r16
     96a:	bf 70       	andi	r27, 0x0F	; 15
     96c:	02 c0       	rjmp	.+4      	; 0x972 <Modbus::process_FC1(unsigned int*, unsigned char)+0xf0>
     96e:	36 95       	lsr	r19
     970:	27 95       	ror	r18
     972:	ba 95       	dec	r27
     974:	e2 f7       	brpl	.-8      	; 0x96e <Modbus::process_FC1(unsigned int*, unsigned char)+0xec>
     976:	89 81       	ldd	r24, Y+1	; 0x01
     978:	20 ff       	sbrs	r18, 0
     97a:	0e c0       	rjmp	.+28     	; 0x998 <Modbus::process_FC1(unsigned int*, unsigned char)+0x116>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1125 (discriminator 1)
     97c:	85 29       	or	r24, r5
     97e:	da 01       	movw	r26, r20
     980:	16 96       	adiw	r26, 0x06	; 6
     982:	8c 93       	st	X, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1129
            au8Buffer[ u8BufferSize ],
            u8bitsno,
            bitRead( regs[ u8currentRegister ], u8currentBit ) );
        u8bitsno ++;
     984:	d3 94       	inc	r13
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1131

        if (u8bitsno > 7)
     986:	b7 e0       	ldi	r27, 0x07	; 7
     988:	bd 15       	cp	r27, r13
     98a:	18 f4       	brcc	.+6      	; 0x992 <Modbus::process_FC1(unsigned int*, unsigned char)+0x110>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1134
        {
            u8bitsno = 0;
            u8BufferSize++;
     98c:	c3 94       	inc	r12
     98e:	c0 82       	st	Z, r12
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1133
            bitRead( regs[ u8currentRegister ], u8currentBit ) );
        u8bitsno ++;

        if (u8bitsno > 7)
        {
            u8bitsno = 0;
     990:	d1 2c       	mov	r13, r1
     992:	0f 5f       	subi	r16, 0xFF	; 255
     994:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1119 (discriminator 2)
    au8Buffer[ u8BufferSize + u8bytesno - 1 ] = 0;

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
     996:	c1 cf       	rjmp	.-126    	; 0x91a <Modbus::process_FC1(unsigned int*, unsigned char)+0x98>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1125 (discriminator 2)
    {
        u16coil = u16StartCoil + u16currentCoil;
        u8currentRegister = (uint8_t) (u16coil / 16);
        u8currentBit = (uint8_t) (u16coil % 16);

        bitWrite(
     998:	80 95       	com	r24
     99a:	58 22       	and	r5, r24
     99c:	da 01       	movw	r26, r20
     99e:	16 96       	adiw	r26, 0x06	; 6
     9a0:	5c 92       	st	X, r5
     9a2:	f0 cf       	rjmp	.-32     	; 0x984 <Modbus::process_FC1(unsigned int*, unsigned char)+0x102>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1139
            u8BufferSize++;
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) u8BufferSize ++;
     9a4:	67 2b       	or	r22, r23
     9a6:	11 f0       	breq	.+4      	; 0x9ac <Modbus::process_FC1(unsigned int*, unsigned char)+0x12a>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1139 (discriminator 1)
     9a8:	c3 94       	inc	r12
     9aa:	c0 82       	st	Z, r12
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1140
    u8CopyBufferSize = u8BufferSize +2;
     9ac:	10 81       	ld	r17, Z
     9ae:	1e 5f       	subi	r17, 0xFE	; 254
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1141
    sendTxBuffer();
     9b0:	8d 81       	ldd	r24, Y+5	; 0x05
     9b2:	9e 81       	ldd	r25, Y+6	; 0x06
     9b4:	0e 94 18 03 	call	0x630	; 0x630 <Modbus::sendTxBuffer()>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1143
    return u8CopyBufferSize;
}
     9b8:	81 2f       	mov	r24, r17
     9ba:	26 96       	adiw	r28, 0x06	; 6
     9bc:	0f b6       	in	r0, 0x3f	; 63
     9be:	f8 94       	cli
     9c0:	de bf       	out	0x3e, r29	; 62
     9c2:	0f be       	out	0x3f, r0	; 63
     9c4:	cd bf       	out	0x3d, r28	; 61
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	1f 91       	pop	r17
     9cc:	0f 91       	pop	r16
     9ce:	ff 90       	pop	r15
     9d0:	ef 90       	pop	r14
     9d2:	df 90       	pop	r13
     9d4:	cf 90       	pop	r12
     9d6:	bf 90       	pop	r11
     9d8:	af 90       	pop	r10
     9da:	9f 90       	pop	r9
     9dc:	8f 90       	pop	r8
     9de:	7f 90       	pop	r7
     9e0:	6f 90       	pop	r6
     9e2:	5f 90       	pop	r5
     9e4:	4f 90       	pop	r4
     9e6:	08 95       	ret

000009e8 <Modbus::process_FC3(unsigned int*, unsigned char)>:
_ZN6Modbus11process_FC3EPjh():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1154
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t Modbus::process_FC3( uint16_t *regs, uint8_t /*u8size*/ )
{
     9e8:	ef 92       	push	r14
     9ea:	ff 92       	push	r15
     9ec:	0f 93       	push	r16
     9ee:	1f 93       	push	r17
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	ec 01       	movw	r28, r24
     9f6:	8b 01       	movw	r16, r22
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1156

    uint8_t u8StartAdd = word( au8Buffer[ ADD_HI ], au8Buffer[ ADD_LO ] );
     9f8:	69 85       	ldd	r22, Y+9	; 0x09
     9fa:	88 85       	ldd	r24, Y+8	; 0x08
     9fc:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <makeWord(unsigned char, unsigned char)>
     a00:	e8 2e       	mov	r14, r24
     a02:	f8 2e       	mov	r15, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1157
    uint8_t u8regsno = word( au8Buffer[ NB_HI ], au8Buffer[ NB_LO ] );
     a04:	6b 85       	ldd	r22, Y+11	; 0x0b
     a06:	8a 85       	ldd	r24, Y+10	; 0x0a
     a08:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <makeWord(unsigned char, unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1161
    uint8_t u8CopyBufferSize;
    uint8_t i;

    au8Buffer[ 2 ]       = u8regsno * 2;
     a0c:	98 2f       	mov	r25, r24
     a0e:	99 0f       	add	r25, r25
     a10:	98 87       	std	Y+8, r25	; 0x08
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1162
    u8BufferSize         = 3;
     a12:	9e 01       	movw	r18, r28
     a14:	2a 5b       	subi	r18, 0xBA	; 186
     a16:	3f 4f       	sbci	r19, 0xFF	; 255
     a18:	93 e0       	ldi	r25, 0x03	; 3
     a1a:	d9 01       	movw	r26, r18
     a1c:	9c 93       	st	X, r25
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1164

    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
     a1e:	8e 0d       	add	r24, r14
     a20:	99 27       	eor	r25, r25
     a22:	99 1f       	adc	r25, r25
     a24:	f9 01       	movw	r30, r18
     a26:	70 81       	ld	r23, Z
     a28:	52 e0       	ldi	r21, 0x02	; 2
     a2a:	e5 2e       	mov	r14, r21
     a2c:	e7 0e       	add	r14, r23
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1164 (discriminator 3)
     a2e:	af 2d       	mov	r26, r15
     a30:	b0 e0       	ldi	r27, 0x00	; 0
     a32:	a8 17       	cp	r26, r24
     a34:	b9 07       	cpc	r27, r25
     a36:	cc f4       	brge	.+50     	; 0xa6a <Modbus::process_FC3(unsigned int*, unsigned char)+0x82>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1166 (discriminator 2)
    {
        au8Buffer[ u8BufferSize ] = highByte(regs[i]);
     a38:	aa 0f       	add	r26, r26
     a3a:	bb 1f       	adc	r27, r27
     a3c:	a0 0f       	add	r26, r16
     a3e:	b1 1f       	adc	r27, r17
     a40:	ae 01       	movw	r20, r28
     a42:	47 0f       	add	r20, r23
     a44:	51 1d       	adc	r21, r1
     a46:	11 96       	adiw	r26, 0x01	; 1
     a48:	6c 91       	ld	r22, X
     a4a:	11 97       	sbiw	r26, 0x01	; 1
     a4c:	fa 01       	movw	r30, r20
     a4e:	66 83       	std	Z+6, r22	; 0x06
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1167 (discriminator 2)
        u8BufferSize++;
     a50:	41 e0       	ldi	r20, 0x01	; 1
     a52:	47 0f       	add	r20, r23
     a54:	f9 01       	movw	r30, r18
     a56:	40 83       	st	Z, r20
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1168 (discriminator 2)
        au8Buffer[ u8BufferSize ] = lowByte(regs[i]);
     a58:	fe 01       	movw	r30, r28
     a5a:	e4 0f       	add	r30, r20
     a5c:	f1 1d       	adc	r31, r1
     a5e:	4c 91       	ld	r20, X
     a60:	46 83       	std	Z+6, r20	; 0x06
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1169 (discriminator 2)
        u8BufferSize++;
     a62:	d9 01       	movw	r26, r18
     a64:	ec 92       	st	X, r14
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1164 (discriminator 2)
    uint8_t i;

    au8Buffer[ 2 ]       = u8regsno * 2;
    u8BufferSize         = 3;

    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
     a66:	f3 94       	inc	r15
     a68:	dd cf       	rjmp	.-70     	; 0xa24 <Modbus::process_FC3(unsigned int*, unsigned char)+0x3c>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1172
        u8BufferSize++;
        au8Buffer[ u8BufferSize ] = lowByte(regs[i]);
        u8BufferSize++;
    }
    u8CopyBufferSize = u8BufferSize +2;
    sendTxBuffer();
     a6a:	ce 01       	movw	r24, r28
     a6c:	0e 94 18 03 	call	0x630	; 0x630 <Modbus::sendTxBuffer()>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1175

    return u8CopyBufferSize;
}
     a70:	8e 2d       	mov	r24, r14
     a72:	df 91       	pop	r29
     a74:	cf 91       	pop	r28
     a76:	1f 91       	pop	r17
     a78:	0f 91       	pop	r16
     a7a:	ff 90       	pop	r15
     a7c:	ef 90       	pop	r14
     a7e:	08 95       	ret

00000a80 <Modbus::process_FC5(unsigned int*, unsigned char)>:
_ZN6Modbus11process_FC5EPjh():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1186
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t Modbus::process_FC5( uint16_t *regs, uint8_t /*u8size*/ )
{
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	ec 01       	movw	r28, r24
     a8a:	8b 01       	movw	r16, r22
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1189
    uint8_t u8currentRegister, u8currentBit;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( au8Buffer[ ADD_HI ], au8Buffer[ ADD_LO ] );
     a8c:	69 85       	ldd	r22, Y+9	; 0x09
     a8e:	88 85       	ldd	r24, Y+8	; 0x08
     a90:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <makeWord(unsigned char, unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1193

    // point to the register and its bit
    u8currentRegister = (uint8_t) (u16coil / 16);
    u8currentBit = (uint8_t) (u16coil % 16);
     a94:	48 2f       	mov	r20, r24
     a96:	4f 70       	andi	r20, 0x0F	; 15
     a98:	23 e0       	ldi	r18, 0x03	; 3
     a9a:	96 95       	lsr	r25
     a9c:	87 95       	ror	r24
     a9e:	2a 95       	dec	r18
     aa0:	e1 f7       	brne	.-8      	; 0xa9a <Modbus::process_FC5(unsigned int*, unsigned char)+0x1a>
     aa2:	8e 7f       	andi	r24, 0xFE	; 254
     aa4:	91 70       	andi	r25, 0x01	; 1
     aa6:	f8 01       	movw	r30, r16
     aa8:	e8 0f       	add	r30, r24
     aaa:	f9 1f       	adc	r31, r25
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1196

    // write to coil
    bitWrite(
     aac:	8a 85       	ldd	r24, Y+10	; 0x0a
     aae:	20 81       	ld	r18, Z
     ab0:	31 81       	ldd	r19, Z+1	; 0x01
     ab2:	8f 3f       	cpi	r24, 0xFF	; 255
     ab4:	e9 f4       	brne	.+58     	; 0xaf0 <Modbus::process_FC5(unsigned int*, unsigned char)+0x70>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1196 (discriminator 1)
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	a0 e0       	ldi	r26, 0x00	; 0
     abc:	b0 e0       	ldi	r27, 0x00	; 0
     abe:	04 c0       	rjmp	.+8      	; 0xac8 <Modbus::process_FC5(unsigned int*, unsigned char)+0x48>
     ac0:	88 0f       	add	r24, r24
     ac2:	99 1f       	adc	r25, r25
     ac4:	aa 1f       	adc	r26, r26
     ac6:	bb 1f       	adc	r27, r27
     ac8:	4a 95       	dec	r20
     aca:	d2 f7       	brpl	.-12     	; 0xac0 <Modbus::process_FC5(unsigned int*, unsigned char)+0x40>
     acc:	82 2b       	or	r24, r18
     ace:	93 2b       	or	r25, r19
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1196 (discriminator 2)
     ad0:	91 83       	std	Z+1, r25	; 0x01
     ad2:	80 83       	st	Z, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1203 (discriminator 2)
        u8currentBit,
        au8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    u8BufferSize = 6;
     ad4:	fe 01       	movw	r30, r28
     ad6:	ea 5b       	subi	r30, 0xBA	; 186
     ad8:	ff 4f       	sbci	r31, 0xFF	; 255
     ada:	86 e0       	ldi	r24, 0x06	; 6
     adc:	80 83       	st	Z, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1205 (discriminator 2)
    u8CopyBufferSize = u8BufferSize +2;
    sendTxBuffer();
     ade:	ce 01       	movw	r24, r28
     ae0:	0e 94 18 03 	call	0x630	; 0x630 <Modbus::sendTxBuffer()>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1208 (discriminator 2)

    return u8CopyBufferSize;
}
     ae4:	88 e0       	ldi	r24, 0x08	; 8
     ae6:	df 91       	pop	r29
     ae8:	cf 91       	pop	r28
     aea:	1f 91       	pop	r17
     aec:	0f 91       	pop	r16
     aee:	08 95       	ret
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1196 (discriminator 2)
    // point to the register and its bit
    u8currentRegister = (uint8_t) (u16coil / 16);
    u8currentBit = (uint8_t) (u16coil % 16);

    // write to coil
    bitWrite(
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	a0 e0       	ldi	r26, 0x00	; 0
     af6:	b0 e0       	ldi	r27, 0x00	; 0
     af8:	04 c0       	rjmp	.+8      	; 0xb02 <Modbus::process_FC5(unsigned int*, unsigned char)+0x82>
     afa:	88 0f       	add	r24, r24
     afc:	99 1f       	adc	r25, r25
     afe:	aa 1f       	adc	r26, r26
     b00:	bb 1f       	adc	r27, r27
     b02:	4a 95       	dec	r20
     b04:	d2 f7       	brpl	.-12     	; 0xafa <Modbus::process_FC5(unsigned int*, unsigned char)+0x7a>
     b06:	80 95       	com	r24
     b08:	90 95       	com	r25
     b0a:	82 23       	and	r24, r18
     b0c:	93 23       	and	r25, r19
     b0e:	e0 cf       	rjmp	.-64     	; 0xad0 <Modbus::process_FC5(unsigned int*, unsigned char)+0x50>

00000b10 <Modbus::process_FC6(unsigned int*, unsigned char)>:
_ZN6Modbus11process_FC6EPjh():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1219
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t Modbus::process_FC6( uint16_t *regs, uint8_t /*u8size*/ )
{
     b10:	ef 92       	push	r14
     b12:	ff 92       	push	r15
     b14:	0f 93       	push	r16
     b16:	1f 93       	push	r17
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	ec 01       	movw	r28, r24
     b1e:	7b 01       	movw	r14, r22
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1221

    uint8_t u8add = word( au8Buffer[ ADD_HI ], au8Buffer[ ADD_LO ] );
     b20:	69 85       	ldd	r22, Y+9	; 0x09
     b22:	88 85       	ldd	r24, Y+8	; 0x08
     b24:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <makeWord(unsigned char, unsigned char)>
     b28:	8c 01       	movw	r16, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1223
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( au8Buffer[ NB_HI ], au8Buffer[ NB_LO ] );
     b2a:	6b 85       	ldd	r22, Y+11	; 0x0b
     b2c:	8a 85       	ldd	r24, Y+10	; 0x0a
     b2e:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <makeWord(unsigned char, unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1225

    regs[ u8add ] = u16val;
     b32:	11 27       	eor	r17, r17
     b34:	00 0f       	add	r16, r16
     b36:	11 1f       	adc	r17, r17
     b38:	0e 0d       	add	r16, r14
     b3a:	1f 1d       	adc	r17, r15
     b3c:	f8 01       	movw	r30, r16
     b3e:	91 83       	std	Z+1, r25	; 0x01
     b40:	80 83       	st	Z, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1228

    // keep the same header
    u8BufferSize         = RESPONSE_SIZE;
     b42:	fe 01       	movw	r30, r28
     b44:	ea 5b       	subi	r30, 0xBA	; 186
     b46:	ff 4f       	sbci	r31, 0xFF	; 255
     b48:	86 e0       	ldi	r24, 0x06	; 6
     b4a:	80 83       	st	Z, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1231

    u8CopyBufferSize = u8BufferSize +2;
    sendTxBuffer();
     b4c:	ce 01       	movw	r24, r28
     b4e:	0e 94 18 03 	call	0x630	; 0x630 <Modbus::sendTxBuffer()>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1234

    return u8CopyBufferSize;
}
     b52:	88 e0       	ldi	r24, 0x08	; 8
     b54:	df 91       	pop	r29
     b56:	cf 91       	pop	r28
     b58:	1f 91       	pop	r17
     b5a:	0f 91       	pop	r16
     b5c:	ff 90       	pop	r15
     b5e:	ef 90       	pop	r14
     b60:	08 95       	ret

00000b62 <Modbus::process_FC15(unsigned int*, unsigned char)>:
_ZN6Modbus12process_FC15EPjh():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1245
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t Modbus::process_FC15( uint16_t *regs, uint8_t /*u8size*/ )
{
     b62:	6f 92       	push	r6
     b64:	7f 92       	push	r7
     b66:	8f 92       	push	r8
     b68:	9f 92       	push	r9
     b6a:	af 92       	push	r10
     b6c:	bf 92       	push	r11
     b6e:	cf 92       	push	r12
     b70:	df 92       	push	r13
     b72:	ef 92       	push	r14
     b74:	ff 92       	push	r15
     b76:	0f 93       	push	r16
     b78:	1f 93       	push	r17
     b7a:	cf 93       	push	r28
     b7c:	df 93       	push	r29
     b7e:	ec 01       	movw	r28, r24
     b80:	7b 01       	movw	r14, r22
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1252
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    boolean bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( au8Buffer[ ADD_HI ], au8Buffer[ ADD_LO ] );
     b82:	69 85       	ldd	r22, Y+9	; 0x09
     b84:	88 85       	ldd	r24, Y+8	; 0x08
     b86:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <makeWord(unsigned char, unsigned char)>
     b8a:	8c 01       	movw	r16, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1253
    uint16_t u16Coilno = word( au8Buffer[ NB_HI ], au8Buffer[ NB_LO ] );
     b8c:	6b 85       	ldd	r22, Y+11	; 0x0b
     b8e:	8a 85       	ldd	r24, Y+10	; 0x0a
     b90:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <makeWord(unsigned char, unsigned char)>
     b94:	80 0f       	add	r24, r16
     b96:	91 1f       	adc	r25, r17
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1257


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
     b98:	d1 2c       	mov	r13, r1
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1258
    u8frameByte = 7;
     b9a:	37 e0       	ldi	r19, 0x07	; 7
     b9c:	c3 2e       	mov	r12, r19
     b9e:	81 2c       	mov	r8, r1
     ba0:	91 2c       	mov	r9, r1
     ba2:	54 01       	movw	r10, r8
     ba4:	83 94       	inc	r8
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1259 (discriminator 1)
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
     ba6:	80 17       	cp	r24, r16
     ba8:	91 07       	cpc	r25, r17
     baa:	c1 f1       	breq	.+112    	; 0xc1c <Modbus::process_FC15(unsigned int*, unsigned char)+0xba>
     bac:	f8 01       	movw	r30, r16
     bae:	23 e0       	ldi	r18, 0x03	; 3
     bb0:	f6 95       	lsr	r31
     bb2:	e7 95       	ror	r30
     bb4:	2a 95       	dec	r18
     bb6:	e1 f7       	brne	.-8      	; 0xbb0 <Modbus::process_FC15(unsigned int*, unsigned char)+0x4e>
     bb8:	ee 7f       	andi	r30, 0xFE	; 254
     bba:	f1 70       	andi	r31, 0x01	; 1
     bbc:	ee 0d       	add	r30, r14
     bbe:	ff 1d       	adc	r31, r15
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1264
    {

        u16coil = u16StartCoil + u16currentCoil;
        u8currentRegister = (uint8_t) (u16coil / 16);
        u8currentBit = (uint8_t) (u16coil % 16);
     bc0:	20 2f       	mov	r18, r16
     bc2:	2f 70       	andi	r18, 0x0F	; 15
     bc4:	b5 01       	movw	r22, r10
     bc6:	a4 01       	movw	r20, r8
     bc8:	04 c0       	rjmp	.+8      	; 0xbd2 <Modbus::process_FC15(unsigned int*, unsigned char)+0x70>
     bca:	44 0f       	add	r20, r20
     bcc:	55 1f       	adc	r21, r21
     bce:	66 1f       	adc	r22, r22
     bd0:	77 1f       	adc	r23, r23
     bd2:	2a 95       	dec	r18
     bd4:	d2 f7       	brpl	.-12     	; 0xbca <Modbus::process_FC15(unsigned int*, unsigned char)+0x68>
     bd6:	60 80       	ld	r6, Z
     bd8:	71 80       	ldd	r7, Z+1	; 0x01
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1266

        bTemp = bitRead(
     bda:	9e 01       	movw	r18, r28
     bdc:	2c 0d       	add	r18, r12
     bde:	31 1d       	adc	r19, r1
     be0:	d9 01       	movw	r26, r18
     be2:	16 96       	adiw	r26, 0x06	; 6
     be4:	2c 91       	ld	r18, X
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	0d 2c       	mov	r0, r13
     bea:	02 c0       	rjmp	.+4      	; 0xbf0 <Modbus::process_FC15(unsigned int*, unsigned char)+0x8e>
     bec:	35 95       	asr	r19
     bee:	27 95       	ror	r18
     bf0:	0a 94       	dec	r0
     bf2:	e2 f7       	brpl	.-8      	; 0xbec <Modbus::process_FC15(unsigned int*, unsigned char)+0x8a>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1270
                    au8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
     bf4:	20 ff       	sbrs	r18, 0
     bf6:	0d c0       	rjmp	.+26     	; 0xc12 <Modbus::process_FC15(unsigned int*, unsigned char)+0xb0>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1270 (discriminator 1)
     bf8:	46 29       	or	r20, r6
     bfa:	57 29       	or	r21, r7
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1270 (discriminator 2)
     bfc:	51 83       	std	Z+1, r21	; 0x01
     bfe:	40 83       	st	Z, r20
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1275 (discriminator 2)
            regs[ u8currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
     c00:	d3 94       	inc	r13
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1277 (discriminator 2)

        if (u8bitsno > 7)
     c02:	b7 e0       	ldi	r27, 0x07	; 7
     c04:	bd 15       	cp	r27, r13
     c06:	10 f4       	brcc	.+4      	; 0xc0c <Modbus::process_FC15(unsigned int*, unsigned char)+0xaa>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1280
        {
            u8bitsno = 0;
            u8frameByte++;
     c08:	c3 94       	inc	r12
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1279

        u8bitsno ++;

        if (u8bitsno > 7)
        {
            u8bitsno = 0;
     c0a:	d1 2c       	mov	r13, r1
     c0c:	0f 5f       	subi	r16, 0xFF	; 255
     c0e:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1259 (discriminator 2)


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
    u8frameByte = 7;
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
     c10:	ca cf       	rjmp	.-108    	; 0xba6 <Modbus::process_FC15(unsigned int*, unsigned char)+0x44>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1270 (discriminator 2)

        bTemp = bitRead(
                    au8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
     c12:	40 95       	com	r20
     c14:	50 95       	com	r21
     c16:	46 21       	and	r20, r6
     c18:	57 21       	and	r21, r7
     c1a:	f0 cf       	rjmp	.-32     	; 0xbfc <Modbus::process_FC15(unsigned int*, unsigned char)+0x9a>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1286
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    u8BufferSize         = 6;
     c1c:	fe 01       	movw	r30, r28
     c1e:	ea 5b       	subi	r30, 0xBA	; 186
     c20:	ff 4f       	sbci	r31, 0xFF	; 255
     c22:	86 e0       	ldi	r24, 0x06	; 6
     c24:	80 83       	st	Z, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1288
    u8CopyBufferSize = u8BufferSize +2;
    sendTxBuffer();
     c26:	ce 01       	movw	r24, r28
     c28:	0e 94 18 03 	call	0x630	; 0x630 <Modbus::sendTxBuffer()>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1290
    return u8CopyBufferSize;
}
     c2c:	88 e0       	ldi	r24, 0x08	; 8
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	1f 91       	pop	r17
     c34:	0f 91       	pop	r16
     c36:	ff 90       	pop	r15
     c38:	ef 90       	pop	r14
     c3a:	df 90       	pop	r13
     c3c:	cf 90       	pop	r12
     c3e:	bf 90       	pop	r11
     c40:	af 90       	pop	r10
     c42:	9f 90       	pop	r9
     c44:	8f 90       	pop	r8
     c46:	7f 90       	pop	r7
     c48:	6f 90       	pop	r6
     c4a:	08 95       	ret

00000c4c <Modbus::process_FC16(unsigned int*, unsigned char)>:
_ZN6Modbus12process_FC16EPjh():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1301
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t Modbus::process_FC16( uint16_t *regs, uint8_t /*u8size*/ )
{
     c4c:	af 92       	push	r10
     c4e:	bf 92       	push	r11
     c50:	cf 92       	push	r12
     c52:	df 92       	push	r13
     c54:	ef 92       	push	r14
     c56:	ff 92       	push	r15
     c58:	0f 93       	push	r16
     c5a:	1f 93       	push	r17
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	ec 01       	movw	r28, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1302
    uint8_t u8StartAdd = au8Buffer[ ADD_HI ] << 8 | au8Buffer[ ADD_LO ];
     c62:	89 85       	ldd	r24, Y+9	; 0x09
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1303
    uint8_t u8regsno = au8Buffer[ NB_HI ] << 8 | au8Buffer[ NB_LO ];
     c64:	ab 84       	ldd	r10, Y+11	; 0x0b
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1309
    uint8_t u8CopyBufferSize;
    uint8_t i;
    uint16_t temp;

    // build header
    au8Buffer[ NB_HI ]   = 0;
     c66:	1a 86       	std	Y+10, r1	; 0x0a
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1311
    au8Buffer[ NB_LO ]   = u8regsno;
    u8BufferSize         = RESPONSE_SIZE;
     c68:	7e 01       	movw	r14, r28
     c6a:	96 e4       	ldi	r25, 0x46	; 70
     c6c:	e9 0e       	add	r14, r25
     c6e:	f1 1c       	adc	r15, r1
     c70:	96 e0       	ldi	r25, 0x06	; 6
     c72:	f7 01       	movw	r30, r14
     c74:	90 83       	st	Z, r25
     c76:	8e 01       	movw	r16, r28
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	88 0f       	add	r24, r24
     c7c:	99 1f       	adc	r25, r25
     c7e:	6b 01       	movw	r12, r22
     c80:	c8 0e       	add	r12, r24
     c82:	d9 1e       	adc	r13, r25
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1314

    // write registers
    for (i = 0; i < u8regsno; i++)
     c84:	b1 2c       	mov	r11, r1
     c86:	0e 5f       	subi	r16, 0xFE	; 254
     c88:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1314 (discriminator 3)
     c8a:	ab 14       	cp	r10, r11
     c8c:	59 f0       	breq	.+22     	; 0xca4 <Modbus::process_FC16(unsigned int*, unsigned char)+0x58>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1316 (discriminator 2)
    {
        temp = word(
     c8e:	f8 01       	movw	r30, r16
     c90:	64 85       	ldd	r22, Z+12	; 0x0c
     c92:	83 85       	ldd	r24, Z+11	; 0x0b
     c94:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <makeWord(unsigned char, unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1320 (discriminator 2)
                   au8Buffer[ (BYTE_CNT + 1) + i * 2 ],
                   au8Buffer[ (BYTE_CNT + 2) + i * 2 ]);

        regs[ u8StartAdd + i ] = temp;
     c98:	f6 01       	movw	r30, r12
     c9a:	81 93       	st	Z+, r24
     c9c:	91 93       	st	Z+, r25
     c9e:	6f 01       	movw	r12, r30
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1314 (discriminator 2)
    au8Buffer[ NB_HI ]   = 0;
    au8Buffer[ NB_LO ]   = u8regsno;
    u8BufferSize         = RESPONSE_SIZE;

    // write registers
    for (i = 0; i < u8regsno; i++)
     ca0:	b3 94       	inc	r11
     ca2:	f1 cf       	rjmp	.-30     	; 0xc86 <Modbus::process_FC16(unsigned int*, unsigned char)+0x3a>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1322
                   au8Buffer[ (BYTE_CNT + 1) + i * 2 ],
                   au8Buffer[ (BYTE_CNT + 2) + i * 2 ]);

        regs[ u8StartAdd + i ] = temp;
    }
    u8CopyBufferSize = u8BufferSize +2;
     ca4:	f7 01       	movw	r30, r14
     ca6:	10 81       	ld	r17, Z
     ca8:	1e 5f       	subi	r17, 0xFE	; 254
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1323
    sendTxBuffer();
     caa:	ce 01       	movw	r24, r28
     cac:	0e 94 18 03 	call	0x630	; 0x630 <Modbus::sendTxBuffer()>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1326

    return u8CopyBufferSize;
}
     cb0:	81 2f       	mov	r24, r17
     cb2:	df 91       	pop	r29
     cb4:	cf 91       	pop	r28
     cb6:	1f 91       	pop	r17
     cb8:	0f 91       	pop	r16
     cba:	ff 90       	pop	r15
     cbc:	ef 90       	pop	r14
     cbe:	df 90       	pop	r13
     cc0:	cf 90       	pop	r12
     cc2:	bf 90       	pop	r11
     cc4:	af 90       	pop	r10
     cc6:	08 95       	ret

00000cc8 <Modbus::poll(unsigned int*, unsigned char)>:
_ZN6Modbus4pollEPjh():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:723
 * @param u8size  size of the register table
 * @return 0 if no query, 1..4 if communication error, >4 if correct query processed
 * @ingroup loop
 */
int8_t Modbus::poll( uint16_t *regs, uint8_t u8size )
{
     cc8:	8f 92       	push	r8
     cca:	9f 92       	push	r9
     ccc:	af 92       	push	r10
     cce:	bf 92       	push	r11
     cd0:	cf 92       	push	r12
     cd2:	df 92       	push	r13
     cd4:	ef 92       	push	r14
     cd6:	ff 92       	push	r15
     cd8:	0f 93       	push	r16
     cda:	1f 93       	push	r17
     cdc:	cf 93       	push	r28
     cde:	df 93       	push	r29
     ce0:	ec 01       	movw	r28, r24
     ce2:	8b 01       	movw	r16, r22
     ce4:	f4 2e       	mov	r15, r20
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:725

    au16regs = regs;
     ce6:	fc 01       	movw	r30, r24
     ce8:	e8 5b       	subi	r30, 0xB8	; 184
     cea:	ff 4f       	sbci	r31, 0xFF	; 255
     cec:	71 83       	std	Z+1, r23	; 0x01
     cee:	60 83       	st	Z, r22
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:726
    u8regsize = u8size;
     cf0:	76 96       	adiw	r30, 0x16	; 22
     cf2:	40 83       	st	Z, r20
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:731
	uint8_t u8current;


    // check if there is any incoming frame
    u8current = port->available();
     cf4:	88 81       	ld	r24, Y
     cf6:	99 81       	ldd	r25, Y+1	; 0x01
     cf8:	dc 01       	movw	r26, r24
     cfa:	ed 91       	ld	r30, X+
     cfc:	fc 91       	ld	r31, X
     cfe:	00 84       	ldd	r0, Z+8	; 0x08
     d00:	f1 85       	ldd	r31, Z+9	; 0x09
     d02:	e0 2d       	mov	r30, r0
     d04:	09 95       	icall
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:733

    if (u8current == 0) return 0;
     d06:	81 11       	cpse	r24, r1
     d08:	0f c0       	rjmp	.+30     	; 0xd28 <Modbus::poll(unsigned int*, unsigned char)+0x60>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:740
    // check T35 after frame end or still no frame end
    if (u8current != u8lastRec)
    {
        u8lastRec = u8current;
        u32time = millis();
        return 0;
     d0a:	e1 2c       	mov	r14, r1
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:795
        break;
    default:
        break;
    }
    return i8state;
}
     d0c:	8e 2d       	mov	r24, r14
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	1f 91       	pop	r17
     d14:	0f 91       	pop	r16
     d16:	ff 90       	pop	r15
     d18:	ef 90       	pop	r14
     d1a:	df 90       	pop	r13
     d1c:	cf 90       	pop	r12
     d1e:	bf 90       	pop	r11
     d20:	af 90       	pop	r10
     d22:	9f 90       	pop	r9
     d24:	8f 90       	pop	r8
     d26:	08 95       	ret
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:736
    u8current = port->available();

    if (u8current == 0) return 0;

    // check T35 after frame end or still no frame end
    if (u8current != u8lastRec)
     d28:	6e 01       	movw	r12, r28
     d2a:	b7 e4       	ldi	r27, 0x47	; 71
     d2c:	cb 0e       	add	r12, r27
     d2e:	d1 1c       	adc	r13, r1
     d30:	f6 01       	movw	r30, r12
     d32:	90 81       	ld	r25, Z
     d34:	9e 01       	movw	r18, r28
     d36:	2e 5a       	subi	r18, 0xAE	; 174
     d38:	3f 4f       	sbci	r19, 0xFF	; 255
     d3a:	59 01       	movw	r10, r18
     d3c:	98 17       	cp	r25, r24
     d3e:	51 f0       	breq	.+20     	; 0xd54 <Modbus::poll(unsigned int*, unsigned char)+0x8c>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:738
    {
        u8lastRec = u8current;
     d40:	80 83       	st	Z, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:739
        u32time = millis();
     d42:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <millis>
     d46:	d5 01       	movw	r26, r10
     d48:	6d 93       	st	X+, r22
     d4a:	7d 93       	st	X+, r23
     d4c:	8d 93       	st	X+, r24
     d4e:	9c 93       	st	X, r25
     d50:	13 97       	sbiw	r26, 0x03	; 3
     d52:	db cf       	rjmp	.-74     	; 0xd0a <Modbus::poll(unsigned int*, unsigned char)+0x42>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:742
        return 0;
    }
    if ((unsigned long)(millis() -u32time) < (unsigned long)T35) return 0;
     d54:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <millis>
     d58:	f5 01       	movw	r30, r10
     d5a:	80 80       	ld	r8, Z
     d5c:	91 80       	ldd	r9, Z+1	; 0x01
     d5e:	a2 80       	ldd	r10, Z+2	; 0x02
     d60:	b3 80       	ldd	r11, Z+3	; 0x03
     d62:	68 19       	sub	r22, r8
     d64:	79 09       	sbc	r23, r9
     d66:	8a 09       	sbc	r24, r10
     d68:	9b 09       	sbc	r25, r11
     d6a:	65 30       	cpi	r22, 0x05	; 5
     d6c:	71 05       	cpc	r23, r1
     d6e:	81 05       	cpc	r24, r1
     d70:	91 05       	cpc	r25, r1
     d72:	58 f2       	brcs	.-106    	; 0xd0a <Modbus::poll(unsigned int*, unsigned char)+0x42>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:744

    u8lastRec = 0;
     d74:	d6 01       	movw	r26, r12
     d76:	1c 92       	st	X, r1
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:745
    int8_t i8state = getRxBuffer();
     d78:	ce 01       	movw	r24, r28
     d7a:	0e 94 ac 02 	call	0x558	; 0x558 <Modbus::getRxBuffer()>
     d7e:	e8 2e       	mov	r14, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:746
    u8lastError = i8state;
     d80:	8d 83       	std	Y+5, r24	; 0x05
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:747
    if (i8state < 7) return i8state;
     d82:	b6 e0       	ldi	r27, 0x06	; 6
     d84:	b8 17       	cp	r27, r24
     d86:	14 f6       	brge	.-124    	; 0xd0c <Modbus::poll(unsigned int*, unsigned char)+0x44>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:750

    // check slave id
    if (au8Buffer[ ID ] != u8id) return 0;
     d88:	9e 81       	ldd	r25, Y+6	; 0x06
     d8a:	8a 81       	ldd	r24, Y+2	; 0x02
     d8c:	98 13       	cpse	r25, r24
     d8e:	bd cf       	rjmp	.-134    	; 0xd0a <Modbus::poll(unsigned int*, unsigned char)+0x42>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:753

    // validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest();
     d90:	ce 01       	movw	r24, r28
     d92:	0e 94 ac 03 	call	0x758	; 0x758 <Modbus::validateRequest()>
     d96:	d8 2e       	mov	r13, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:754
    if (u8exception > 0)
     d98:	88 23       	and	r24, r24
     d9a:	69 f0       	breq	.+26     	; 0xdb6 <Modbus::poll(unsigned int*, unsigned char)+0xee>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:756
    {
        if (u8exception != NO_REPLY)
     d9c:	ef ef       	ldi	r30, 0xFF	; 255
     d9e:	8e 17       	cp	r24, r30
     da0:	39 f0       	breq	.+14     	; 0xdb0 <Modbus::poll(unsigned int*, unsigned char)+0xe8>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:758
        {
            buildException( u8exception );
     da2:	68 2f       	mov	r22, r24
     da4:	ce 01       	movw	r24, r28
     da6:	0e 94 35 04 	call	0x86a	; 0x86a <Modbus::buildException(unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:759
            sendTxBuffer();
     daa:	ce 01       	movw	r24, r28
     dac:	0e 94 18 03 	call	0x630	; 0x630 <Modbus::sendTxBuffer()>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:761
        }
        u8lastError = u8exception;
     db0:	dd 82       	std	Y+5, r13	; 0x05
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:762
        return u8exception;
     db2:	ed 2c       	mov	r14, r13
     db4:	ab cf       	rjmp	.-170    	; 0xd0c <Modbus::poll(unsigned int*, unsigned char)+0x44>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:765
    }

    u32timeOut = millis();
     db6:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <millis>
     dba:	fe 01       	movw	r30, r28
     dbc:	ea 5a       	subi	r30, 0xAA	; 170
     dbe:	ff 4f       	sbci	r31, 0xFF	; 255
     dc0:	60 83       	st	Z, r22
     dc2:	71 83       	std	Z+1, r23	; 0x01
     dc4:	82 83       	std	Z+2, r24	; 0x02
     dc6:	93 83       	std	Z+3, r25	; 0x03
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:766
    u8lastError = 0;
     dc8:	1d 82       	std	Y+5, r1	; 0x05
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:769

    // process message
    switch( au8Buffer[ FUNC ] )
     dca:	ef 81       	ldd	r30, Y+7	; 0x07
     dcc:	e1 50       	subi	r30, 0x01	; 1
     dce:	e0 31       	cpi	r30, 0x10	; 16
     dd0:	08 f0       	brcs	.+2      	; 0xdd4 <Modbus::poll(unsigned int*, unsigned char)+0x10c>
     dd2:	9c cf       	rjmp	.-200    	; 0xd0c <Modbus::poll(unsigned int*, unsigned char)+0x44>
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	e1 51       	subi	r30, 0x11	; 17
     dd8:	f9 4f       	sbci	r31, 0xF9	; 249
     dda:	0c 94 3c 0f 	jmp	0x1e78	; 0x1e78 <__tablejump2__>
     dde:	ff 06       	cpc	r15, r31
     de0:	ff 06       	cpc	r15, r31
     de2:	10 07       	cpc	r17, r16
     de4:	10 07       	cpc	r17, r16
     de6:	21 07       	cpc	r18, r17
     de8:	32 07       	cpc	r19, r18
     dea:	86 06       	cpc	r8, r22
     dec:	86 06       	cpc	r8, r22
     dee:	86 06       	cpc	r8, r22
     df0:	86 06       	cpc	r8, r22
     df2:	86 06       	cpc	r8, r22
     df4:	86 06       	cpc	r8, r22
     df6:	86 06       	cpc	r8, r22
     df8:	86 06       	cpc	r8, r22
     dfa:	43 07       	cpc	r20, r19
     dfc:	54 07       	cpc	r21, r20
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:773
    {
    case MB_FC_READ_COILS:
    case MB_FC_READ_DISCRETE_INPUT:
        return process_FC1( regs, u8size );
     dfe:	4f 2d       	mov	r20, r15
     e00:	b8 01       	movw	r22, r16
     e02:	ce 01       	movw	r24, r28
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:795
        break;
    default:
        break;
    }
    return i8state;
}
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	1f 91       	pop	r17
     e0a:	0f 91       	pop	r16
     e0c:	ff 90       	pop	r15
     e0e:	ef 90       	pop	r14
     e10:	df 90       	pop	r13
     e12:	cf 90       	pop	r12
     e14:	bf 90       	pop	r11
     e16:	af 90       	pop	r10
     e18:	9f 90       	pop	r9
     e1a:	8f 90       	pop	r8
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:773
    // process message
    switch( au8Buffer[ FUNC ] )
    {
    case MB_FC_READ_COILS:
    case MB_FC_READ_DISCRETE_INPUT:
        return process_FC1( regs, u8size );
     e1c:	0c 94 41 04 	jmp	0x882	; 0x882 <Modbus::process_FC1(unsigned int*, unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:777
        break;
    case MB_FC_READ_INPUT_REGISTER:
    case MB_FC_READ_REGISTERS :
        return process_FC3( regs, u8size );
     e20:	4f 2d       	mov	r20, r15
     e22:	b8 01       	movw	r22, r16
     e24:	ce 01       	movw	r24, r28
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:795
        break;
    default:
        break;
    }
    return i8state;
}
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	1f 91       	pop	r17
     e2c:	0f 91       	pop	r16
     e2e:	ff 90       	pop	r15
     e30:	ef 90       	pop	r14
     e32:	df 90       	pop	r13
     e34:	cf 90       	pop	r12
     e36:	bf 90       	pop	r11
     e38:	af 90       	pop	r10
     e3a:	9f 90       	pop	r9
     e3c:	8f 90       	pop	r8
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:777
    case MB_FC_READ_DISCRETE_INPUT:
        return process_FC1( regs, u8size );
        break;
    case MB_FC_READ_INPUT_REGISTER:
    case MB_FC_READ_REGISTERS :
        return process_FC3( regs, u8size );
     e3e:	0c 94 f4 04 	jmp	0x9e8	; 0x9e8 <Modbus::process_FC3(unsigned int*, unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:780
        break;
    case MB_FC_WRITE_COIL:
        return process_FC5( regs, u8size );
     e42:	4f 2d       	mov	r20, r15
     e44:	b8 01       	movw	r22, r16
     e46:	ce 01       	movw	r24, r28
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:795
        break;
    default:
        break;
    }
    return i8state;
}
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	1f 91       	pop	r17
     e4e:	0f 91       	pop	r16
     e50:	ff 90       	pop	r15
     e52:	ef 90       	pop	r14
     e54:	df 90       	pop	r13
     e56:	cf 90       	pop	r12
     e58:	bf 90       	pop	r11
     e5a:	af 90       	pop	r10
     e5c:	9f 90       	pop	r9
     e5e:	8f 90       	pop	r8
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:780
    case MB_FC_READ_INPUT_REGISTER:
    case MB_FC_READ_REGISTERS :
        return process_FC3( regs, u8size );
        break;
    case MB_FC_WRITE_COIL:
        return process_FC5( regs, u8size );
     e60:	0c 94 40 05 	jmp	0xa80	; 0xa80 <Modbus::process_FC5(unsigned int*, unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:783
        break;
    case MB_FC_WRITE_REGISTER :
        return process_FC6( regs, u8size );
     e64:	4f 2d       	mov	r20, r15
     e66:	b8 01       	movw	r22, r16
     e68:	ce 01       	movw	r24, r28
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:795
        break;
    default:
        break;
    }
    return i8state;
}
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	1f 91       	pop	r17
     e70:	0f 91       	pop	r16
     e72:	ff 90       	pop	r15
     e74:	ef 90       	pop	r14
     e76:	df 90       	pop	r13
     e78:	cf 90       	pop	r12
     e7a:	bf 90       	pop	r11
     e7c:	af 90       	pop	r10
     e7e:	9f 90       	pop	r9
     e80:	8f 90       	pop	r8
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:783
        break;
    case MB_FC_WRITE_COIL:
        return process_FC5( regs, u8size );
        break;
    case MB_FC_WRITE_REGISTER :
        return process_FC6( regs, u8size );
     e82:	0c 94 88 05 	jmp	0xb10	; 0xb10 <Modbus::process_FC6(unsigned int*, unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:786
        break;
    case MB_FC_WRITE_MULTIPLE_COILS:
        return process_FC15( regs, u8size );
     e86:	4f 2d       	mov	r20, r15
     e88:	b8 01       	movw	r22, r16
     e8a:	ce 01       	movw	r24, r28
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:795
        break;
    default:
        break;
    }
    return i8state;
}
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	1f 91       	pop	r17
     e92:	0f 91       	pop	r16
     e94:	ff 90       	pop	r15
     e96:	ef 90       	pop	r14
     e98:	df 90       	pop	r13
     e9a:	cf 90       	pop	r12
     e9c:	bf 90       	pop	r11
     e9e:	af 90       	pop	r10
     ea0:	9f 90       	pop	r9
     ea2:	8f 90       	pop	r8
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:786
        break;
    case MB_FC_WRITE_REGISTER :
        return process_FC6( regs, u8size );
        break;
    case MB_FC_WRITE_MULTIPLE_COILS:
        return process_FC15( regs, u8size );
     ea4:	0c 94 b1 05 	jmp	0xb62	; 0xb62 <Modbus::process_FC15(unsigned int*, unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:789
        break;
    case MB_FC_WRITE_MULTIPLE_REGISTERS :
        return process_FC16( regs, u8size );
     ea8:	4f 2d       	mov	r20, r15
     eaa:	b8 01       	movw	r22, r16
     eac:	ce 01       	movw	r24, r28
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:795
        break;
    default:
        break;
    }
    return i8state;
}
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
     eb2:	1f 91       	pop	r17
     eb4:	0f 91       	pop	r16
     eb6:	ff 90       	pop	r15
     eb8:	ef 90       	pop	r14
     eba:	df 90       	pop	r13
     ebc:	cf 90       	pop	r12
     ebe:	bf 90       	pop	r11
     ec0:	af 90       	pop	r10
     ec2:	9f 90       	pop	r9
     ec4:	8f 90       	pop	r8
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:789
        break;
    case MB_FC_WRITE_MULTIPLE_COILS:
        return process_FC15( regs, u8size );
        break;
    case MB_FC_WRITE_MULTIPLE_REGISTERS :
        return process_FC16( regs, u8size );
     ec6:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <Modbus::process_FC16(unsigned int*, unsigned char)>

00000eca <setup>:
setup():
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:19
uint8_t state = 0;
uint8_t lastState = 0;

void setup()
{
    slave = Modbus(ID, Serial, 3);
     eca:	eb ed       	ldi	r30, 0xDB	; 219
     ecc:	f1 e0       	ldi	r31, 0x01	; 1
     ece:	87 e0       	ldi	r24, 0x07	; 7
     ed0:	93 e0       	ldi	r25, 0x03	; 3
     ed2:	91 83       	std	Z+1, r25	; 0x01
     ed4:	80 83       	st	Z, r24
     ed6:	12 82       	std	Z+2, r1	; 0x02
     ed8:	83 e0       	ldi	r24, 0x03	; 3
     eda:	83 83       	std	Z+3, r24	; 0x03
     edc:	88 ee       	ldi	r24, 0xE8	; 232
     ede:	93 e0       	ldi	r25, 0x03	; 3
     ee0:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <slave+0x51>
     ee4:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <slave+0x50>
     ee8:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <slave+0x5a>
     eec:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <slave+0x5b>
     ef0:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <slave+0x5c>
     ef4:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <slave+0x5d>
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:20
    slave.begin(9600);
     ef8:	40 e8       	ldi	r20, 0x80	; 128
     efa:	55 e2       	ldi	r21, 0x25	; 37
     efc:	60 e0       	ldi	r22, 0x00	; 0
     efe:	70 e0       	ldi	r23, 0x00	; 0
     f00:	cf 01       	movw	r24, r30
     f02:	0e 94 9f 02 	call	0x53e	; 0x53e <Modbus::begin(long)>
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:22

    out.begin(0x20);
     f06:	60 e2       	ldi	r22, 0x20	; 32
     f08:	88 eb       	ldi	r24, 0xB8	; 184
     f0a:	91 e0       	ldi	r25, 0x01	; 1
     f0c:	0e 94 01 02 	call	0x402	; 0x402 <PCF8574::begin(unsigned char)>
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:23
    in.begin(0x27);
     f10:	67 e2       	ldi	r22, 0x27	; 39
     f12:	89 e9       	ldi	r24, 0x99	; 153
     f14:	91 e0       	ldi	r25, 0x01	; 1
     f16:	0e 94 01 02 	call	0x402	; 0x402 <PCF8574::begin(unsigned char)>
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:25

    out.pinMode(0, OUTPUT);
     f1a:	41 e0       	ldi	r20, 0x01	; 1
     f1c:	60 e0       	ldi	r22, 0x00	; 0
     f1e:	88 eb       	ldi	r24, 0xB8	; 184
     f20:	91 e0       	ldi	r25, 0x01	; 1
     f22:	0e 94 32 02 	call	0x464	; 0x464 <PCF8574::pinMode(unsigned char, unsigned char)>
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:26
    out.pinMode(1, OUTPUT);
     f26:	41 e0       	ldi	r20, 0x01	; 1
     f28:	61 e0       	ldi	r22, 0x01	; 1
     f2a:	88 eb       	ldi	r24, 0xB8	; 184
     f2c:	91 e0       	ldi	r25, 0x01	; 1
     f2e:	0e 94 32 02 	call	0x464	; 0x464 <PCF8574::pinMode(unsigned char, unsigned char)>
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:27
    out.pinMode(2, OUTPUT);
     f32:	41 e0       	ldi	r20, 0x01	; 1
     f34:	62 e0       	ldi	r22, 0x02	; 2
     f36:	88 eb       	ldi	r24, 0xB8	; 184
     f38:	91 e0       	ldi	r25, 0x01	; 1
     f3a:	0e 94 32 02 	call	0x464	; 0x464 <PCF8574::pinMode(unsigned char, unsigned char)>
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:28
    out.pinMode(3, OUTPUT);
     f3e:	41 e0       	ldi	r20, 0x01	; 1
     f40:	63 e0       	ldi	r22, 0x03	; 3
     f42:	88 eb       	ldi	r24, 0xB8	; 184
     f44:	91 e0       	ldi	r25, 0x01	; 1
     f46:	0e 94 32 02 	call	0x464	; 0x464 <PCF8574::pinMode(unsigned char, unsigned char)>
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:29
    out.pinMode(4, OUTPUT);
     f4a:	41 e0       	ldi	r20, 0x01	; 1
     f4c:	64 e0       	ldi	r22, 0x04	; 4
     f4e:	88 eb       	ldi	r24, 0xB8	; 184
     f50:	91 e0       	ldi	r25, 0x01	; 1
     f52:	0e 94 32 02 	call	0x464	; 0x464 <PCF8574::pinMode(unsigned char, unsigned char)>
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:30
    out.pinMode(5, OUTPUT);
     f56:	41 e0       	ldi	r20, 0x01	; 1
     f58:	65 e0       	ldi	r22, 0x05	; 5
     f5a:	88 eb       	ldi	r24, 0xB8	; 184
     f5c:	91 e0       	ldi	r25, 0x01	; 1
     f5e:	0e 94 32 02 	call	0x464	; 0x464 <PCF8574::pinMode(unsigned char, unsigned char)>
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:31
    out.pinMode(6, OUTPUT);
     f62:	41 e0       	ldi	r20, 0x01	; 1
     f64:	66 e0       	ldi	r22, 0x06	; 6
     f66:	88 eb       	ldi	r24, 0xB8	; 184
     f68:	91 e0       	ldi	r25, 0x01	; 1
     f6a:	0e 94 32 02 	call	0x464	; 0x464 <PCF8574::pinMode(unsigned char, unsigned char)>
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:32
    out.pinMode(7, OUTPUT);
     f6e:	41 e0       	ldi	r20, 0x01	; 1
     f70:	67 e0       	ldi	r22, 0x07	; 7
     f72:	88 eb       	ldi	r24, 0xB8	; 184
     f74:	91 e0       	ldi	r25, 0x01	; 1
     f76:	0e 94 32 02 	call	0x464	; 0x464 <PCF8574::pinMode(unsigned char, unsigned char)>
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:33
    out.clear();
     f7a:	88 eb       	ldi	r24, 0xB8	; 184
     f7c:	91 e0       	ldi	r25, 0x01	; 1
     f7e:	0e 94 69 02 	call	0x4d2	; 0x4d2 <PCF8574::clear()>
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:35

    in.pinMode(0, INPUT);
     f82:	40 e0       	ldi	r20, 0x00	; 0
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	89 e9       	ldi	r24, 0x99	; 153
     f88:	91 e0       	ldi	r25, 0x01	; 1
     f8a:	0e 94 32 02 	call	0x464	; 0x464 <PCF8574::pinMode(unsigned char, unsigned char)>
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:36
    in.pinMode(1, INPUT);
     f8e:	40 e0       	ldi	r20, 0x00	; 0
     f90:	61 e0       	ldi	r22, 0x01	; 1
     f92:	89 e9       	ldi	r24, 0x99	; 153
     f94:	91 e0       	ldi	r25, 0x01	; 1
     f96:	0e 94 32 02 	call	0x464	; 0x464 <PCF8574::pinMode(unsigned char, unsigned char)>
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:37
    in.pinMode(2, INPUT);
     f9a:	40 e0       	ldi	r20, 0x00	; 0
     f9c:	62 e0       	ldi	r22, 0x02	; 2
     f9e:	89 e9       	ldi	r24, 0x99	; 153
     fa0:	91 e0       	ldi	r25, 0x01	; 1
     fa2:	0e 94 32 02 	call	0x464	; 0x464 <PCF8574::pinMode(unsigned char, unsigned char)>
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:38
    in.pinMode(3, INPUT);
     fa6:	40 e0       	ldi	r20, 0x00	; 0
     fa8:	63 e0       	ldi	r22, 0x03	; 3
     faa:	89 e9       	ldi	r24, 0x99	; 153
     fac:	91 e0       	ldi	r25, 0x01	; 1
     fae:	0e 94 32 02 	call	0x464	; 0x464 <PCF8574::pinMode(unsigned char, unsigned char)>
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:39
    in.pinMode(4, INPUT);
     fb2:	40 e0       	ldi	r20, 0x00	; 0
     fb4:	64 e0       	ldi	r22, 0x04	; 4
     fb6:	89 e9       	ldi	r24, 0x99	; 153
     fb8:	91 e0       	ldi	r25, 0x01	; 1
     fba:	0e 94 32 02 	call	0x464	; 0x464 <PCF8574::pinMode(unsigned char, unsigned char)>
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:40
    in.pinMode(5, INPUT);
     fbe:	40 e0       	ldi	r20, 0x00	; 0
     fc0:	65 e0       	ldi	r22, 0x05	; 5
     fc2:	89 e9       	ldi	r24, 0x99	; 153
     fc4:	91 e0       	ldi	r25, 0x01	; 1
     fc6:	0e 94 32 02 	call	0x464	; 0x464 <PCF8574::pinMode(unsigned char, unsigned char)>
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:41
    in.pinMode(6, INPUT);
     fca:	40 e0       	ldi	r20, 0x00	; 0
     fcc:	66 e0       	ldi	r22, 0x06	; 6
     fce:	89 e9       	ldi	r24, 0x99	; 153
     fd0:	91 e0       	ldi	r25, 0x01	; 1
     fd2:	0e 94 32 02 	call	0x464	; 0x464 <PCF8574::pinMode(unsigned char, unsigned char)>
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:42
    in.pinMode(7, INPUT);
     fd6:	40 e0       	ldi	r20, 0x00	; 0
     fd8:	67 e0       	ldi	r22, 0x07	; 7
     fda:	89 e9       	ldi	r24, 0x99	; 153
     fdc:	91 e0       	ldi	r25, 0x01	; 1
     fde:	0e 94 32 02 	call	0x464	; 0x464 <PCF8574::pinMode(unsigned char, unsigned char)>
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:44

    in.enableInterrupt(2, onInterrupt);
     fe2:	4d e6       	ldi	r20, 0x6D	; 109
     fe4:	52 e0       	ldi	r21, 0x02	; 2
     fe6:	62 e0       	ldi	r22, 0x02	; 2
     fe8:	89 e9       	ldi	r24, 0x99	; 153
     fea:	91 e0       	ldi	r25, 0x01	; 1
     fec:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <PCF8574::enableInterrupt(unsigned char, void (*)())>

00000ff0 <loop>:
loop():
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:53
{
    state = in.read();
}

void loop()
{
     ff0:	8f 92       	push	r8
     ff2:	9f 92       	push	r9
     ff4:	af 92       	push	r10
     ff6:	bf 92       	push	r11
     ff8:	cf 92       	push	r12
     ffa:	df 92       	push	r13
     ffc:	ef 92       	push	r14
     ffe:	ff 92       	push	r15
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:55

    if (state != lastState)
    1000:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <state>
    1004:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <lastState>
    1008:	28 17       	cp	r18, r24
    100a:	c9 f1       	breq	.+114    	; 0x107e <loop+0x8e>
    100c:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <outPins>
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:57
    {
        lastState = state;
    1010:	20 93 97 01 	sts	0x0197, r18	; 0x800197 <lastState>
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:58
        for (int i = 0; i < 8; i++)
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:60
        {
            if (bitRead(state, i) == LOW)
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 2c       	mov	r8, r1
    101c:	91 2c       	mov	r9, r1
    101e:	54 01       	movw	r10, r8
    1020:	83 94       	inc	r8
    1022:	a9 01       	movw	r20, r18
    1024:	08 2e       	mov	r0, r24
    1026:	02 c0       	rjmp	.+4      	; 0x102c <loop+0x3c>
    1028:	55 95       	asr	r21
    102a:	47 95       	ror	r20
    102c:	0a 94       	dec	r0
    102e:	e2 f7       	brpl	.-8      	; 0x1028 <loop+0x38>
    1030:	40 fd       	sbrc	r20, 0
    1032:	15 c0       	rjmp	.+42     	; 0x105e <loop+0x6e>
    1034:	75 01       	movw	r14, r10
    1036:	64 01       	movw	r12, r8
    1038:	08 2e       	mov	r0, r24
    103a:	04 c0       	rjmp	.+8      	; 0x1044 <loop+0x54>
    103c:	cc 0c       	add	r12, r12
    103e:	dd 1c       	adc	r13, r13
    1040:	ee 1c       	adc	r14, r14
    1042:	ff 1c       	adc	r15, r15
    1044:	0a 94       	dec	r0
    1046:	d2 f7       	brpl	.-12     	; 0x103c <loop+0x4c>
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:62
            {
                bitWrite(outPins, i, abs(bitRead(outPins, i) - 1));
    1048:	46 2f       	mov	r20, r22
    104a:	50 e0       	ldi	r21, 0x00	; 0
    104c:	08 2e       	mov	r0, r24
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <loop+0x64>
    1050:	55 95       	asr	r21
    1052:	47 95       	ror	r20
    1054:	0a 94       	dec	r0
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <loop+0x60>
    1058:	40 fd       	sbrc	r20, 0
    105a:	3a c0       	rjmp	.+116    	; 0x10d0 <loop+0xe0>
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:62 (discriminator 1)
    105c:	6c 29       	or	r22, r12
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:58 (discriminator 2)
{

    if (state != lastState)
    {
        lastState = state;
        for (int i = 0; i < 8; i++)
    105e:	01 96       	adiw	r24, 0x01	; 1
    1060:	88 30       	cpi	r24, 0x08	; 8
    1062:	91 05       	cpc	r25, r1
    1064:	f1 f6       	brne	.-68     	; 0x1022 <loop+0x32>
    1066:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <outPins>
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:66
            {
                bitWrite(outPins, i, abs(bitRead(outPins, i) - 1));
            }
        }

        modbusData[0] = outPins;
    106a:	86 2f       	mov	r24, r22
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <modbusData+0x1>
    1072:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <modbusData>
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:67
        out.write(outPins);
    1076:	88 eb       	ldi	r24, 0xB8	; 184
    1078:	91 e0       	ldi	r25, 0x01	; 1
    107a:	0e 94 65 02 	call	0x4ca	; 0x4ca <PCF8574::write(unsigned char)>
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:70
    }

    if (modbusData[0] != outPins)
    107e:	60 91 d7 01 	lds	r22, 0x01D7	; 0x8001d7 <modbusData>
    1082:	70 91 d8 01 	lds	r23, 0x01D8	; 0x8001d8 <modbusData+0x1>
    1086:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <outPins>
    108a:	86 17       	cp	r24, r22
    108c:	17 06       	cpc	r1, r23
    108e:	31 f0       	breq	.+12     	; 0x109c <loop+0xac>
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:72
    {
        outPins = modbusData[0];
    1090:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <outPins>
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:73
        out.write(outPins);
    1094:	88 eb       	ldi	r24, 0xB8	; 184
    1096:	91 e0       	ldi	r25, 0x01	; 1
    1098:	0e 94 65 02 	call	0x4ca	; 0x4ca <PCF8574::write(unsigned char)>
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:76
    }

    modbusData[1] = slave.getInCnt();
    109c:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <slave+0x4a>
    10a0:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <slave+0x4b>
    10a4:	90 93 da 01 	sts	0x01DA, r25	; 0x8001da <modbusData+0x3>
    10a8:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <modbusData+0x2>
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:77
    state = slave.poll(modbusData, 2);
    10ac:	42 e0       	ldi	r20, 0x02	; 2
    10ae:	67 ed       	ldi	r22, 0xD7	; 215
    10b0:	71 e0       	ldi	r23, 0x01	; 1
    10b2:	8b ed       	ldi	r24, 0xDB	; 219
    10b4:	91 e0       	ldi	r25, 0x01	; 1
    10b6:	0e 94 64 06 	call	0xcc8	; 0xcc8 <Modbus::poll(unsigned int*, unsigned char)>
    10ba:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <state>
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:78
}
    10be:	ff 90       	pop	r15
    10c0:	ef 90       	pop	r14
    10c2:	df 90       	pop	r13
    10c4:	cf 90       	pop	r12
    10c6:	bf 90       	pop	r11
    10c8:	af 90       	pop	r10
    10ca:	9f 90       	pop	r9
    10cc:	8f 90       	pop	r8
    10ce:	08 95       	ret
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:62 (discriminator 2)
        lastState = state;
        for (int i = 0; i < 8; i++)
        {
            if (bitRead(state, i) == LOW)
            {
                bitWrite(outPins, i, abs(bitRead(outPins, i) - 1));
    10d0:	c0 94       	com	r12
    10d2:	6c 21       	and	r22, r12
    10d4:	c4 cf       	rjmp	.-120    	; 0x105e <loop+0x6e>

000010d6 <_GLOBAL__sub_I__ZN6ModbusC2EhR6Streamh>:
_ZN6ModbusC4Ehhh():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:274
 * @ingroup setup
 * @overload Modbus::Modbus(uint8_t u8id, T_Stream& port, uint8_t u8txenpin)
 */
Modbus::Modbus(uint8_t u8id, uint8_t u8serno, uint8_t u8txenpin)
{
    this->u8id = u8id;
    10d6:	eb ed       	ldi	r30, 0xDB	; 219
    10d8:	f1 e0       	ldi	r31, 0x01	; 1
    10da:	12 82       	std	Z+2, r1	; 0x02
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:275
    this->u8txenpin = u8txenpin;
    10dc:	13 82       	std	Z+3, r1	; 0x03
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:276
    this->u16timeOut = 1000;
    10de:	88 ee       	ldi	r24, 0xE8	; 232
    10e0:	93 e0       	ldi	r25, 0x03	; 3
    10e2:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <slave+0x51>
    10e6:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <slave+0x50>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:277
    this->u32overTime = 0;
    10ea:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <slave+0x5a>
    10ee:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <slave+0x5b>
    10f2:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <slave+0x5c>
    10f6:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <slave+0x5d>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:300
        port = &Serial3;
        break;
#endif
    case 0:
    default:
        port = &Serial;
    10fa:	87 e0       	ldi	r24, 0x07	; 7
    10fc:	93 e0       	ldi	r25, 0x03	; 3
    10fe:	91 83       	std	Z+1, r25	; 0x01
    1100:	80 83       	st	Z, r24
_GLOBAL__sub_I__ZN6ModbusC2EhR6Streamh():
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:11

uint16_t modbusData[2];
int address = 50;
uint8_t outPins = 0b11111111;

PCF8574 out;
    1102:	88 eb       	ldi	r24, 0xB8	; 184
    1104:	91 e0       	ldi	r25, 0x01	; 1
    1106:	0e 94 b8 01 	call	0x370	; 0x370 <PCF8574::PCF8574()>
C:\Users\Jacek\Documents\Arduino\light-switch-rs485/light-switch-rs485.ino:12
PCF8574 in;
    110a:	89 e9       	ldi	r24, 0x99	; 153
    110c:	91 e0       	ldi	r25, 0x01	; 1
    110e:	0c 94 b8 01 	jmp	0x370	; 0x370 <PCF8574::PCF8574()>

00001112 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:329

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	08 95       	ret

00001118 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
    1118:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <TwoWire::rxBufferLength>
    111c:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <TwoWire::rxBufferIndex>
    1120:	89 1b       	sub	r24, r25
    1122:	99 0b       	sbc	r25, r25
    1124:	08 95       	ret

00001126 <TwoWire::read()>:
_ZN7TwoWire4readEv():
    1126:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <TwoWire::rxBufferIndex>
    112a:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <TwoWire::rxBufferLength>
    112e:	2f ef       	ldi	r18, 0xFF	; 255
    1130:	3f ef       	ldi	r19, 0xFF	; 255
    1132:	98 17       	cp	r25, r24
    1134:	48 f4       	brcc	.+18     	; 0x1148 <TwoWire::read()+0x22>
    1136:	e9 2f       	mov	r30, r25
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	e0 59       	subi	r30, 0x90	; 144
    113c:	fd 4f       	sbci	r31, 0xFD	; 253
    113e:	20 81       	ld	r18, Z
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	9f 5f       	subi	r25, 0xFF	; 255
    1144:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <TwoWire::rxBufferIndex>
    1148:	c9 01       	movw	r24, r18
    114a:	08 95       	ret

0000114c <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
    114c:	e0 91 6f 02 	lds	r30, 0x026F	; 0x80026f <TwoWire::rxBufferIndex>
    1150:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <TwoWire::rxBufferLength>
    1154:	e8 17       	cp	r30, r24
    1156:	30 f4       	brcc	.+12     	; 0x1164 <TwoWire::peek()+0x18>
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	e0 59       	subi	r30, 0x90	; 144
    115c:	fd 4f       	sbci	r31, 0xFD	; 253
    115e:	80 81       	ld	r24, Z
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	08 95       	ret
    1164:	8f ef       	ldi	r24, 0xFF	; 255
    1166:	9f ef       	ldi	r25, 0xFF	; 255
    1168:	08 95       	ret

0000116a <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
    116a:	08 95       	ret

0000116c <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	ec 01       	movw	r28, r24
    1172:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <TwoWire::user_onReceive>
    1176:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <TwoWire::user_onReceive+0x1>
    117a:	30 97       	sbiw	r30, 0x00	; 0
    117c:	f1 f0       	breq	.+60     	; 0x11ba <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
    117e:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <TwoWire::rxBufferIndex>
    1182:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <TwoWire::rxBufferLength>
    1186:	98 17       	cp	r25, r24
    1188:	c0 f0       	brcs	.+48     	; 0x11ba <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	29 2f       	mov	r18, r25
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	26 17       	cp	r18, r22
    1192:	37 07       	cpc	r19, r23
    1194:	54 f4       	brge	.+20     	; 0x11aa <TwoWire::onReceiveService(unsigned char*, int)+0x3e>
    1196:	de 01       	movw	r26, r28
    1198:	a2 0f       	add	r26, r18
    119a:	b3 1f       	adc	r27, r19
    119c:	4c 91       	ld	r20, X
    119e:	20 59       	subi	r18, 0x90	; 144
    11a0:	3d 4f       	sbci	r19, 0xFD	; 253
    11a2:	d9 01       	movw	r26, r18
    11a4:	4c 93       	st	X, r20
    11a6:	9f 5f       	subi	r25, 0xFF	; 255
    11a8:	f1 cf       	rjmp	.-30     	; 0x118c <TwoWire::onReceiveService(unsigned char*, int)+0x20>
    11aa:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <TwoWire::rxBufferIndex>
    11ae:	60 93 6e 02 	sts	0x026E, r22	; 0x80026e <TwoWire::rxBufferLength>
    11b2:	cb 01       	movw	r24, r22
    11b4:	df 91       	pop	r29
    11b6:	cf 91       	pop	r28
    11b8:	09 94       	ijmp
    11ba:	df 91       	pop	r29
    11bc:	cf 91       	pop	r28
    11be:	08 95       	ret

000011c0 <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
    11c0:	e0 91 48 02 	lds	r30, 0x0248	; 0x800248 <TwoWire::user_onRequest>
    11c4:	f0 91 49 02 	lds	r31, 0x0249	; 0x800249 <TwoWire::user_onRequest+0x1>
    11c8:	30 97       	sbiw	r30, 0x00	; 0
    11ca:	29 f0       	breq	.+10     	; 0x11d6 <TwoWire::onRequestService()+0x16>
    11cc:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <TwoWire::txBufferIndex>
    11d0:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <TwoWire::txBufferLength>
    11d4:	09 94       	ijmp
    11d6:	08 95       	ret

000011d8 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	1f 92       	push	r1
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	69 83       	std	Y+1, r22	; 0x01
    11e4:	20 91 4a 02 	lds	r18, 0x024A	; 0x80024a <TwoWire::transmitting>
    11e8:	22 23       	and	r18, r18
    11ea:	f9 f0       	breq	.+62     	; 0x122a <TwoWire::write(unsigned char)+0x52>
    11ec:	20 91 4b 02 	lds	r18, 0x024B	; 0x80024b <TwoWire::txBufferLength>
    11f0:	20 32       	cpi	r18, 0x20	; 32
    11f2:	58 f0       	brcs	.+22     	; 0x120a <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
    11f4:	21 e0       	ldi	r18, 0x01	; 1
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	fc 01       	movw	r30, r24
    11fa:	33 83       	std	Z+3, r19	; 0x03
    11fc:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	0f 90       	pop	r0
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	08 95       	ret
    120a:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <TwoWire::txBufferIndex>
    120e:	e8 2f       	mov	r30, r24
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	e3 5b       	subi	r30, 0xB3	; 179
    1214:	fd 4f       	sbci	r31, 0xFD	; 253
    1216:	99 81       	ldd	r25, Y+1	; 0x01
    1218:	90 83       	st	Z, r25
    121a:	8f 5f       	subi	r24, 0xFF	; 255
    121c:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <TwoWire::txBufferIndex>
    1220:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <TwoWire::txBufferLength>
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	ec cf       	rjmp	.-40     	; 0x1202 <TwoWire::write(unsigned char)+0x2a>
    122a:	61 e0       	ldi	r22, 0x01	; 1
    122c:	ce 01       	movw	r24, r28
    122e:	01 96       	adiw	r24, 0x01	; 1
    1230:	0e 94 ae 0a 	call	0x155c	; 0x155c <twi_transmit>
    1234:	f7 cf       	rjmp	.-18     	; 0x1224 <TwoWire::write(unsigned char)+0x4c>

00001236 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
    1236:	cf 92       	push	r12
    1238:	df 92       	push	r13
    123a:	ef 92       	push	r14
    123c:	ff 92       	push	r15
    123e:	0f 93       	push	r16
    1240:	1f 93       	push	r17
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	7c 01       	movw	r14, r24
    1248:	cb 01       	movw	r24, r22
    124a:	8a 01       	movw	r16, r20
    124c:	20 91 4a 02 	lds	r18, 0x024A	; 0x80024a <TwoWire::transmitting>
    1250:	22 23       	and	r18, r18
    1252:	89 f0       	breq	.+34     	; 0x1276 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
    1254:	eb 01       	movw	r28, r22
    1256:	6b 01       	movw	r12, r22
    1258:	c4 0e       	add	r12, r20
    125a:	d5 1e       	adc	r13, r21
    125c:	cc 15       	cp	r28, r12
    125e:	dd 05       	cpc	r29, r13
    1260:	69 f0       	breq	.+26     	; 0x127c <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    1262:	69 91       	ld	r22, Y+
    1264:	d7 01       	movw	r26, r14
    1266:	ed 91       	ld	r30, X+
    1268:	fc 91       	ld	r31, X
    126a:	01 90       	ld	r0, Z+
    126c:	f0 81       	ld	r31, Z
    126e:	e0 2d       	mov	r30, r0
    1270:	c7 01       	movw	r24, r14
    1272:	09 95       	icall
    1274:	f3 cf       	rjmp	.-26     	; 0x125c <TwoWire::write(unsigned char const*, unsigned int)+0x26>
    1276:	64 2f       	mov	r22, r20
    1278:	0e 94 ae 0a 	call	0x155c	; 0x155c <twi_transmit>
    127c:	c8 01       	movw	r24, r16
    127e:	df 91       	pop	r29
    1280:	cf 91       	pop	r28
    1282:	1f 91       	pop	r17
    1284:	0f 91       	pop	r16
    1286:	ff 90       	pop	r15
    1288:	ef 90       	pop	r14
    128a:	df 90       	pop	r13
    128c:	cf 90       	pop	r12
    128e:	08 95       	ret

00001290 <TwoWire::begin()>:
_ZN7TwoWire5beginEv():
    1290:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <TwoWire::rxBufferIndex>
    1294:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <TwoWire::rxBufferLength>
    1298:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <TwoWire::txBufferIndex>
    129c:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <TwoWire::txBufferLength>
    12a0:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <twi_init>
    12a4:	80 ee       	ldi	r24, 0xE0	; 224
    12a6:	98 e0       	ldi	r25, 0x08	; 8
    12a8:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <twi_attachSlaveTxEvent>
    12ac:	86 eb       	ldi	r24, 0xB6	; 182
    12ae:	98 e0       	ldi	r25, 0x08	; 8
    12b0:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <twi_attachSlaveRxEvent>

000012b4 <TwoWire::beginTransmission(unsigned char)>:
_ZN7TwoWire17beginTransmissionEh():
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <TwoWire::transmitting>
    12ba:	60 93 6d 02 	sts	0x026D, r22	; 0x80026d <TwoWire::txAddress>
    12be:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <TwoWire::txBufferIndex>
    12c2:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <TwoWire::txBufferLength>
    12c6:	08 95       	ret

000012c8 <TwoWire::endTransmission(unsigned char)>:
_ZN7TwoWire15endTransmissionEh():
    12c8:	0f 93       	push	r16
    12ca:	06 2f       	mov	r16, r22
    12cc:	21 e0       	ldi	r18, 0x01	; 1
    12ce:	40 91 4b 02 	lds	r20, 0x024B	; 0x80024b <TwoWire::txBufferLength>
    12d2:	6d e4       	ldi	r22, 0x4D	; 77
    12d4:	72 e0       	ldi	r23, 0x02	; 2
    12d6:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <TwoWire::txAddress>
    12da:	0e 94 57 0a 	call	0x14ae	; 0x14ae <twi_writeTo>
    12de:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <TwoWire::txBufferIndex>
    12e2:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <TwoWire::txBufferLength>
    12e6:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <TwoWire::transmitting>
    12ea:	0f 91       	pop	r16
    12ec:	08 95       	ret

000012ee <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhmhh():
    12ee:	4f 92       	push	r4
    12f0:	5f 92       	push	r5
    12f2:	6f 92       	push	r6
    12f4:	7f 92       	push	r7
    12f6:	af 92       	push	r10
    12f8:	bf 92       	push	r11
    12fa:	cf 92       	push	r12
    12fc:	ef 92       	push	r14
    12fe:	ff 92       	push	r15
    1300:	0f 93       	push	r16
    1302:	1f 93       	push	r17
    1304:	cf 93       	push	r28
    1306:	df 93       	push	r29
    1308:	5c 01       	movw	r10, r24
    130a:	f6 2e       	mov	r15, r22
    130c:	d4 2f       	mov	r29, r20
    130e:	28 01       	movw	r4, r16
    1310:	39 01       	movw	r6, r18
    1312:	ee 20       	and	r14, r14
    1314:	19 f1       	breq	.+70     	; 0x135c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x6e>
    1316:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <TwoWire::beginTransmission(unsigned char)>
    131a:	ce 2d       	mov	r28, r14
    131c:	c4 30       	cpi	r28, 0x04	; 4
    131e:	08 f0       	brcs	.+2      	; 0x1322 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
    1320:	c3 e0       	ldi	r28, 0x03	; 3
    1322:	c1 50       	subi	r28, 0x01	; 1
    1324:	b8 f0       	brcs	.+46     	; 0x1354 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x66>
    1326:	28 e0       	ldi	r18, 0x08	; 8
    1328:	c2 9f       	mul	r28, r18
    132a:	c0 01       	movw	r24, r0
    132c:	11 24       	eor	r1, r1
    132e:	a3 01       	movw	r20, r6
    1330:	92 01       	movw	r18, r4
    1332:	04 c0       	rjmp	.+8      	; 0x133c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x4e>
    1334:	56 95       	lsr	r21
    1336:	47 95       	ror	r20
    1338:	37 95       	ror	r19
    133a:	27 95       	ror	r18
    133c:	8a 95       	dec	r24
    133e:	d2 f7       	brpl	.-12     	; 0x1334 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x46>
    1340:	b9 01       	movw	r22, r18
    1342:	d5 01       	movw	r26, r10
    1344:	ed 91       	ld	r30, X+
    1346:	fc 91       	ld	r31, X
    1348:	01 90       	ld	r0, Z+
    134a:	f0 81       	ld	r31, Z
    134c:	e0 2d       	mov	r30, r0
    134e:	c5 01       	movw	r24, r10
    1350:	09 95       	icall
    1352:	e7 cf       	rjmp	.-50     	; 0x1322 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
    1354:	60 e0       	ldi	r22, 0x00	; 0
    1356:	c5 01       	movw	r24, r10
    1358:	0e 94 64 09 	call	0x12c8	; 0x12c8 <TwoWire::endTransmission(unsigned char)>
    135c:	4d 2f       	mov	r20, r29
    135e:	d1 32       	cpi	r29, 0x21	; 33
    1360:	08 f0       	brcs	.+2      	; 0x1364 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x76>
    1362:	40 e2       	ldi	r20, 0x20	; 32
    1364:	2c 2d       	mov	r18, r12
    1366:	60 e7       	ldi	r22, 0x70	; 112
    1368:	72 e0       	ldi	r23, 0x02	; 2
    136a:	8f 2d       	mov	r24, r15
    136c:	0e 94 0f 0a 	call	0x141e	; 0x141e <twi_readFrom>
    1370:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <TwoWire::rxBufferIndex>
    1374:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <TwoWire::rxBufferLength>
    1378:	df 91       	pop	r29
    137a:	cf 91       	pop	r28
    137c:	1f 91       	pop	r17
    137e:	0f 91       	pop	r16
    1380:	ff 90       	pop	r15
    1382:	ef 90       	pop	r14
    1384:	cf 90       	pop	r12
    1386:	bf 90       	pop	r11
    1388:	af 90       	pop	r10
    138a:	7f 90       	pop	r7
    138c:	6f 90       	pop	r6
    138e:	5f 90       	pop	r5
    1390:	4f 90       	pop	r4
    1392:	08 95       	ret

00001394 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhh():
    1394:	cf 92       	push	r12
    1396:	ef 92       	push	r14
    1398:	0f 93       	push	r16
    139a:	1f 93       	push	r17
    139c:	c2 2e       	mov	r12, r18
    139e:	e1 2c       	mov	r14, r1
    13a0:	00 e0       	ldi	r16, 0x00	; 0
    13a2:	10 e0       	ldi	r17, 0x00	; 0
    13a4:	98 01       	movw	r18, r16
    13a6:	0e 94 77 09 	call	0x12ee	; 0x12ee <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>
    13aa:	1f 91       	pop	r17
    13ac:	0f 91       	pop	r16
    13ae:	ef 90       	pop	r14
    13b0:	cf 90       	pop	r12
    13b2:	08 95       	ret

000013b4 <TwoWire::requestFrom(unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhh():
    13b4:	21 e0       	ldi	r18, 0x01	; 1
    13b6:	0c 94 ca 09 	jmp	0x1394	; 0x1394 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>

000013ba <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
    13ba:	61 e0       	ldi	r22, 0x01	; 1
    13bc:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <TwoWire::endTransmission(unsigned char)>

000013c0 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
_ZN5PrintC4Ev():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    13c0:	ea e3       	ldi	r30, 0x3A	; 58
    13c2:	f2 e0       	ldi	r31, 0x02	; 2
    13c4:	13 82       	std	Z+3, r1	; 0x03
    13c6:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    13c8:	88 ee       	ldi	r24, 0xE8	; 232
    13ca:	93 e0       	ldi	r25, 0x03	; 3
    13cc:	a0 e0       	ldi	r26, 0x00	; 0
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	84 83       	std	Z+4, r24	; 0x04
    13d2:	95 83       	std	Z+5, r25	; 0x05
    13d4:	a6 83       	std	Z+6, r26	; 0x06
    13d6:	b7 83       	std	Z+7, r27	; 0x07
_ZN7TwoWireC4Ev():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:52
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    13d8:	83 e1       	ldi	r24, 0x13	; 19
    13da:	91 e0       	ldi	r25, 0x01	; 1
    13dc:	91 83       	std	Z+1, r25	; 0x01
    13de:	80 83       	st	Z, r24
_GLOBAL__sub_I__ZN7TwoWire8rxBufferE():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:333
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    13e0:	08 95       	ret

000013e2 <twi_init>:
twi_init():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    13e2:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <twi_state>
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <twi_sendStop>
    13ec:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <twi_inRepStart>
    13f0:	61 e0       	ldi	r22, 0x01	; 1
    13f2:	82 e1       	ldi	r24, 0x12	; 18
    13f4:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <digitalWrite>
    13f8:	61 e0       	ldi	r22, 0x01	; 1
    13fa:	83 e1       	ldi	r24, 0x13	; 19
    13fc:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <digitalWrite>
    1400:	e9 eb       	ldi	r30, 0xB9	; 185
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	8e 7f       	andi	r24, 0xFE	; 254
    1408:	80 83       	st	Z, r24
    140a:	80 81       	ld	r24, Z
    140c:	8d 7f       	andi	r24, 0xFD	; 253
    140e:	80 83       	st	Z, r24
    1410:	88 e4       	ldi	r24, 0x48	; 72
    1412:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    1416:	85 e4       	ldi	r24, 0x45	; 69
    1418:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    141c:	08 95       	ret

0000141e <twi_readFrom>:
twi_readFrom():
    141e:	41 32       	cpi	r20, 0x21	; 33
    1420:	08 f0       	brcs	.+2      	; 0x1424 <twi_readFrom+0x6>
    1422:	43 c0       	rjmp	.+134    	; 0x14aa <twi_readFrom+0x8c>
    1424:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <twi_state>
    1428:	91 11       	cpse	r25, r1
    142a:	fc cf       	rjmp	.-8      	; 0x1424 <twi_readFrom+0x6>
    142c:	91 e0       	ldi	r25, 0x01	; 1
    142e:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <twi_state>
    1432:	20 93 fb 02 	sts	0x02FB, r18	; 0x8002fb <twi_sendStop>
    1436:	2f ef       	ldi	r18, 0xFF	; 255
    1438:	20 93 90 02 	sts	0x0290, r18	; 0x800290 <twi_error>
    143c:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <twi_masterBufferIndex>
    1440:	24 0f       	add	r18, r20
    1442:	20 93 d4 02 	sts	0x02D4, r18	; 0x8002d4 <twi_masterBufferLength>
    1446:	90 93 fc 02 	sts	0x02FC, r25	; 0x8002fc <twi_slarw>
    144a:	90 91 fc 02 	lds	r25, 0x02FC	; 0x8002fc <twi_slarw>
    144e:	88 0f       	add	r24, r24
    1450:	89 2b       	or	r24, r25
    1452:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <twi_slarw>
    1456:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <twi_inRepStart>
    145a:	81 30       	cpi	r24, 0x01	; 1
    145c:	09 f5       	brne	.+66     	; 0x14a0 <twi_readFrom+0x82>
    145e:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <twi_inRepStart>
    1462:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <twi_slarw>
    1466:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    146a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    146e:	83 fd       	sbrc	r24, 3
    1470:	f8 cf       	rjmp	.-16     	; 0x1462 <twi_readFrom+0x44>
    1472:	85 ec       	ldi	r24, 0xC5	; 197
    1474:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1478:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <twi_state>
    147c:	81 30       	cpi	r24, 0x01	; 1
    147e:	e1 f3       	breq	.-8      	; 0x1478 <twi_readFrom+0x5a>
    1480:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <twi_masterBufferIndex>
    1484:	84 17       	cp	r24, r20
    1486:	10 f4       	brcc	.+4      	; 0x148c <twi_readFrom+0x6e>
    1488:	40 91 d5 02 	lds	r20, 0x02D5	; 0x8002d5 <twi_masterBufferIndex>
    148c:	a6 ed       	ldi	r26, 0xD6	; 214
    148e:	b2 e0       	ldi	r27, 0x02	; 2
    1490:	96 2f       	mov	r25, r22
    1492:	fb 01       	movw	r30, r22
    1494:	8e 2f       	mov	r24, r30
    1496:	89 1b       	sub	r24, r25
    1498:	84 17       	cp	r24, r20
    149a:	20 f0       	brcs	.+8      	; 0x14a4 <twi_readFrom+0x86>
    149c:	84 2f       	mov	r24, r20
    149e:	08 95       	ret
    14a0:	85 ee       	ldi	r24, 0xE5	; 229
    14a2:	e8 cf       	rjmp	.-48     	; 0x1474 <twi_readFrom+0x56>
    14a4:	8d 91       	ld	r24, X+
    14a6:	81 93       	st	Z+, r24
    14a8:	f5 cf       	rjmp	.-22     	; 0x1494 <twi_readFrom+0x76>
    14aa:	40 e0       	ldi	r20, 0x00	; 0
    14ac:	f7 cf       	rjmp	.-18     	; 0x149c <twi_readFrom+0x7e>

000014ae <twi_writeTo>:
twi_writeTo():
    14ae:	0f 93       	push	r16
    14b0:	41 32       	cpi	r20, 0x21	; 33
    14b2:	08 f0       	brcs	.+2      	; 0x14b6 <twi_writeTo+0x8>
    14b4:	4b c0       	rjmp	.+150    	; 0x154c <twi_writeTo+0x9e>
    14b6:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <twi_state>
    14ba:	91 11       	cpse	r25, r1
    14bc:	fc cf       	rjmp	.-8      	; 0x14b6 <twi_writeTo+0x8>
    14be:	92 e0       	ldi	r25, 0x02	; 2
    14c0:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <twi_state>
    14c4:	00 93 fb 02 	sts	0x02FB, r16	; 0x8002fb <twi_sendStop>
    14c8:	9f ef       	ldi	r25, 0xFF	; 255
    14ca:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <twi_error>
    14ce:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <twi_masterBufferIndex>
    14d2:	40 93 d4 02 	sts	0x02D4, r20	; 0x8002d4 <twi_masterBufferLength>
    14d6:	36 2f       	mov	r19, r22
    14d8:	a6 ed       	ldi	r26, 0xD6	; 214
    14da:	b2 e0       	ldi	r27, 0x02	; 2
    14dc:	fb 01       	movw	r30, r22
    14de:	9e 2f       	mov	r25, r30
    14e0:	93 1b       	sub	r25, r19
    14e2:	94 17       	cp	r25, r20
    14e4:	70 f1       	brcs	.+92     	; 0x1542 <twi_writeTo+0x94>
    14e6:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <twi_slarw>
    14ea:	90 91 fc 02 	lds	r25, 0x02FC	; 0x8002fc <twi_slarw>
    14ee:	88 0f       	add	r24, r24
    14f0:	89 2b       	or	r24, r25
    14f2:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <twi_slarw>
    14f6:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <twi_inRepStart>
    14fa:	81 30       	cpi	r24, 0x01	; 1
    14fc:	29 f5       	brne	.+74     	; 0x1548 <twi_writeTo+0x9a>
    14fe:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <twi_inRepStart>
    1502:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <twi_slarw>
    1506:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    150a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    150e:	83 fd       	sbrc	r24, 3
    1510:	f8 cf       	rjmp	.-16     	; 0x1502 <twi_writeTo+0x54>
    1512:	85 ec       	ldi	r24, 0xC5	; 197
    1514:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1518:	22 23       	and	r18, r18
    151a:	21 f0       	breq	.+8      	; 0x1524 <twi_writeTo+0x76>
    151c:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <twi_state>
    1520:	82 30       	cpi	r24, 0x02	; 2
    1522:	d1 f3       	breq	.-12     	; 0x1518 <twi_writeTo+0x6a>
    1524:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <twi_error>
    1528:	8f 3f       	cpi	r24, 0xFF	; 255
    152a:	91 f0       	breq	.+36     	; 0x1550 <twi_writeTo+0xa2>
    152c:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <twi_error>
    1530:	80 32       	cpi	r24, 0x20	; 32
    1532:	81 f0       	breq	.+32     	; 0x1554 <twi_writeTo+0xa6>
    1534:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <twi_error>
    1538:	80 33       	cpi	r24, 0x30	; 48
    153a:	71 f0       	breq	.+28     	; 0x1558 <twi_writeTo+0xaa>
    153c:	84 e0       	ldi	r24, 0x04	; 4
    153e:	0f 91       	pop	r16
    1540:	08 95       	ret
    1542:	91 91       	ld	r25, Z+
    1544:	9d 93       	st	X+, r25
    1546:	cb cf       	rjmp	.-106    	; 0x14de <twi_writeTo+0x30>
    1548:	85 ee       	ldi	r24, 0xE5	; 229
    154a:	e4 cf       	rjmp	.-56     	; 0x1514 <twi_writeTo+0x66>
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	f7 cf       	rjmp	.-18     	; 0x153e <twi_writeTo+0x90>
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	f5 cf       	rjmp	.-22     	; 0x153e <twi_writeTo+0x90>
    1554:	82 e0       	ldi	r24, 0x02	; 2
    1556:	f3 cf       	rjmp	.-26     	; 0x153e <twi_writeTo+0x90>
    1558:	83 e0       	ldi	r24, 0x03	; 3
    155a:	f1 cf       	rjmp	.-30     	; 0x153e <twi_writeTo+0x90>

0000155c <twi_transmit>:
twi_transmit():
    155c:	20 91 b2 02 	lds	r18, 0x02B2	; 0x8002b2 <twi_txBufferLength>
    1560:	26 0f       	add	r18, r22
    1562:	33 27       	eor	r19, r19
    1564:	33 1f       	adc	r19, r19
    1566:	21 32       	cpi	r18, 0x21	; 33
    1568:	31 05       	cpc	r19, r1
    156a:	ec f4       	brge	.+58     	; 0x15a6 <twi_transmit+0x4a>
    156c:	20 91 fd 02 	lds	r18, 0x02FD	; 0x8002fd <twi_state>
    1570:	fc 01       	movw	r30, r24
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	24 30       	cpi	r18, 0x04	; 4
    1578:	69 f0       	breq	.+26     	; 0x1594 <twi_transmit+0x38>
    157a:	82 e0       	ldi	r24, 0x02	; 2
    157c:	08 95       	ret
    157e:	a0 91 b2 02 	lds	r26, 0x02B2	; 0x8002b2 <twi_txBufferLength>
    1582:	21 91       	ld	r18, Z+
    1584:	ac 01       	movw	r20, r24
    1586:	4c 54       	subi	r20, 0x4C	; 76
    1588:	5d 4f       	sbci	r21, 0xFD	; 253
    158a:	a4 0f       	add	r26, r20
    158c:	b5 2f       	mov	r27, r21
    158e:	b1 1d       	adc	r27, r1
    1590:	2c 93       	st	X, r18
    1592:	01 96       	adiw	r24, 0x01	; 1
    1594:	86 17       	cp	r24, r22
    1596:	98 f3       	brcs	.-26     	; 0x157e <twi_transmit+0x22>
    1598:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <twi_txBufferLength>
    159c:	68 0f       	add	r22, r24
    159e:	60 93 b2 02 	sts	0x02B2, r22	; 0x8002b2 <twi_txBufferLength>
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	08 95       	ret
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	08 95       	ret

000015aa <twi_attachSlaveRxEvent>:
twi_attachSlaveRxEvent():
    15aa:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <twi_onSlaveReceive+0x1>
    15ae:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <twi_onSlaveReceive>
    15b2:	08 95       	ret

000015b4 <twi_attachSlaveTxEvent>:
twi_attachSlaveTxEvent():
    15b4:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <twi_onSlaveTransmit+0x1>
    15b8:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <twi_onSlaveTransmit>
    15bc:	08 95       	ret

000015be <twi_stop>:
twi_stop():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    15be:	85 ed       	ldi	r24, 0xD5	; 213
    15c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:376

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    15c4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    15c8:	84 fd       	sbrc	r24, 4
    15ca:	fc cf       	rjmp	.-8      	; 0x15c4 <twi_stop+0x6>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    15cc:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <twi_state>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:382
}
    15d0:	08 95       	ret

000015d2 <twi_releaseBus>:
twi_releaseBus():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    15d2:	85 ec       	ldi	r24, 0xC5	; 197
    15d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
    15d8:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <twi_state>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:397
}
    15dc:	08 95       	ret

000015de <__vector_24>:
__vector_24():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:400

ISR(TWI_vect)
{
    15de:	1f 92       	push	r1
    15e0:	0f 92       	push	r0
    15e2:	0f b6       	in	r0, 0x3f	; 63
    15e4:	0f 92       	push	r0
    15e6:	11 24       	eor	r1, r1
    15e8:	2f 93       	push	r18
    15ea:	3f 93       	push	r19
    15ec:	4f 93       	push	r20
    15ee:	5f 93       	push	r21
    15f0:	6f 93       	push	r22
    15f2:	7f 93       	push	r23
    15f4:	8f 93       	push	r24
    15f6:	9f 93       	push	r25
    15f8:	af 93       	push	r26
    15fa:	bf 93       	push	r27
    15fc:	ef 93       	push	r30
    15fe:	ff 93       	push	r31
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  switch(TW_STATUS){
    1600:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    1604:	88 7f       	andi	r24, 0xF8	; 248
    1606:	80 36       	cpi	r24, 0x60	; 96
    1608:	09 f4       	brne	.+2      	; 0x160c <__vector_24+0x2e>
    160a:	4c c0       	rjmp	.+152    	; 0x16a4 <__vector_24+0xc6>
    160c:	08 f0       	brcs	.+2      	; 0x1610 <__vector_24+0x32>
    160e:	3f c0       	rjmp	.+126    	; 0x168e <__vector_24+0xb0>
    1610:	88 32       	cpi	r24, 0x28	; 40
    1612:	09 f4       	brne	.+2      	; 0x1616 <__vector_24+0x38>
    1614:	a8 c0       	rjmp	.+336    	; 0x1766 <__vector_24+0x188>
    1616:	18 f5       	brcc	.+70     	; 0x165e <__vector_24+0x80>
    1618:	80 31       	cpi	r24, 0x10	; 16
    161a:	09 f4       	brne	.+2      	; 0x161e <__vector_24+0x40>
    161c:	9c c0       	rjmp	.+312    	; 0x1756 <__vector_24+0x178>
    161e:	b8 f4       	brcc	.+46     	; 0x164e <__vector_24+0x70>
    1620:	88 23       	and	r24, r24
    1622:	09 f4       	brne	.+2      	; 0x1626 <__vector_24+0x48>
    1624:	f9 c0       	rjmp	.+498    	; 0x1818 <__vector_24+0x23a>
    1626:	88 30       	cpi	r24, 0x08	; 8
    1628:	09 f4       	brne	.+2      	; 0x162c <__vector_24+0x4e>
    162a:	95 c0       	rjmp	.+298    	; 0x1756 <__vector_24+0x178>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    162c:	ff 91       	pop	r31
    162e:	ef 91       	pop	r30
    1630:	bf 91       	pop	r27
    1632:	af 91       	pop	r26
    1634:	9f 91       	pop	r25
    1636:	8f 91       	pop	r24
    1638:	7f 91       	pop	r23
    163a:	6f 91       	pop	r22
    163c:	5f 91       	pop	r21
    163e:	4f 91       	pop	r20
    1640:	3f 91       	pop	r19
    1642:	2f 91       	pop	r18
    1644:	0f 90       	pop	r0
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	0f 90       	pop	r0
    164a:	1f 90       	pop	r1
    164c:	18 95       	reti
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    164e:	88 31       	cpi	r24, 0x18	; 24
    1650:	09 f4       	brne	.+2      	; 0x1654 <__vector_24+0x76>
    1652:	89 c0       	rjmp	.+274    	; 0x1766 <__vector_24+0x188>
    1654:	80 32       	cpi	r24, 0x20	; 32
    1656:	51 f7       	brne	.-44     	; 0x162c <__vector_24+0x4e>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1658:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <twi_error>
    165c:	15 c0       	rjmp	.+42     	; 0x1688 <__vector_24+0xaa>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    165e:	80 34       	cpi	r24, 0x40	; 64
    1660:	09 f4       	brne	.+2      	; 0x1664 <__vector_24+0x86>
    1662:	9e c0       	rjmp	.+316    	; 0x17a0 <__vector_24+0x1c2>
    1664:	48 f4       	brcc	.+18     	; 0x1678 <__vector_24+0x9a>
    1666:	80 33       	cpi	r24, 0x30	; 48
    1668:	b9 f3       	breq	.-18     	; 0x1658 <__vector_24+0x7a>
    166a:	88 33       	cpi	r24, 0x38	; 56
    166c:	f9 f6       	brne	.-66     	; 0x162c <__vector_24+0x4e>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    166e:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <twi_error>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:441
      twi_releaseBus();
    1672:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <twi_releaseBus>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:442
      break;
    1676:	da cf       	rjmp	.-76     	; 0x162c <__vector_24+0x4e>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1678:	80 35       	cpi	r24, 0x50	; 80
    167a:	09 f4       	brne	.+2      	; 0x167e <__vector_24+0xa0>
    167c:	85 c0       	rjmp	.+266    	; 0x1788 <__vector_24+0x1aa>
    167e:	88 35       	cpi	r24, 0x58	; 88
    1680:	09 f4       	brne	.+2      	; 0x1684 <__vector_24+0xa6>
    1682:	96 c0       	rjmp	.+300    	; 0x17b0 <__vector_24+0x1d2>
    1684:	88 34       	cpi	r24, 0x48	; 72
    1686:	91 f6       	brne	.-92     	; 0x162c <__vector_24+0x4e>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    1688:	0e 94 df 0a 	call	0x15be	; 0x15be <twi_stop>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:562
      break;
  }
}
    168c:	cf cf       	rjmp	.-98     	; 0x162c <__vector_24+0x4e>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    168e:	88 39       	cpi	r24, 0x98	; 152
    1690:	09 f4       	brne	.+2      	; 0x1694 <__vector_24+0xb6>
    1692:	8c c0       	rjmp	.+280    	; 0x17ac <__vector_24+0x1ce>
    1694:	38 f5       	brcc	.+78     	; 0x16e4 <__vector_24+0x106>
    1696:	88 37       	cpi	r24, 0x78	; 120
    1698:	29 f0       	breq	.+10     	; 0x16a4 <__vector_24+0xc6>
    169a:	50 f4       	brcc	.+20     	; 0x16b0 <__vector_24+0xd2>
    169c:	88 36       	cpi	r24, 0x68	; 104
    169e:	11 f0       	breq	.+4      	; 0x16a4 <__vector_24+0xc6>
    16a0:	80 37       	cpi	r24, 0x70	; 112
    16a2:	21 f6       	brne	.-120    	; 0x162c <__vector_24+0x4e>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    16a4:	83 e0       	ldi	r24, 0x03	; 3
    16a6:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <twi_state>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    16aa:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <twi_rxBufferIndex>
    16ae:	57 c0       	rjmp	.+174    	; 0x175e <__vector_24+0x180>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    16b0:	88 38       	cpi	r24, 0x88	; 136
    16b2:	09 f4       	brne	.+2      	; 0x16b6 <__vector_24+0xd8>
    16b4:	7b c0       	rjmp	.+246    	; 0x17ac <__vector_24+0x1ce>
    16b6:	80 39       	cpi	r24, 0x90	; 144
    16b8:	19 f0       	breq	.+6      	; 0x16c0 <__vector_24+0xe2>
    16ba:	80 38       	cpi	r24, 0x80	; 128
    16bc:	09 f0       	breq	.+2      	; 0x16c0 <__vector_24+0xe2>
    16be:	b6 cf       	rjmp	.-148    	; 0x162c <__vector_24+0x4e>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    16c0:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <twi_rxBufferIndex>
    16c4:	80 32       	cpi	r24, 0x20	; 32
    16c6:	08 f0       	brcs	.+2      	; 0x16ca <__vector_24+0xec>
    16c8:	71 c0       	rjmp	.+226    	; 0x17ac <__vector_24+0x1ce>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    16ca:	e0 91 91 02 	lds	r30, 0x0291	; 0x800291 <twi_rxBufferIndex>
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	8e 0f       	add	r24, r30
    16d2:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <twi_rxBufferIndex>
    16d6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	ee 56       	subi	r30, 0x6E	; 110
    16de:	fd 4f       	sbci	r31, 0xFD	; 253
    16e0:	80 83       	st	Z, r24
    16e2:	3d c0       	rjmp	.+122    	; 0x175e <__vector_24+0x180>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    16e4:	80 3b       	cpi	r24, 0xB0	; 176
    16e6:	39 f0       	breq	.+14     	; 0x16f6 <__vector_24+0x118>
    16e8:	e0 f4       	brcc	.+56     	; 0x1722 <__vector_24+0x144>
    16ea:	80 3a       	cpi	r24, 0xA0	; 160
    16ec:	09 f4       	brne	.+2      	; 0x16f0 <__vector_24+0x112>
    16ee:	79 c0       	rjmp	.+242    	; 0x17e2 <__vector_24+0x204>
    16f0:	88 3a       	cpi	r24, 0xA8	; 168
    16f2:	09 f0       	breq	.+2      	; 0x16f6 <__vector_24+0x118>
    16f4:	9b cf       	rjmp	.-202    	; 0x162c <__vector_24+0x4e>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:521
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    16f6:	84 e0       	ldi	r24, 0x04	; 4
    16f8:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <twi_state>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    16fc:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <twi_txBufferIndex>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1700:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <twi_txBufferLength>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1704:	e0 91 f8 02 	lds	r30, 0x02F8	; 0x8002f8 <twi_onSlaveTransmit>
    1708:	f0 91 f9 02 	lds	r31, 0x02F9	; 0x8002f9 <twi_onSlaveTransmit+0x1>
    170c:	09 95       	icall
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    170e:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <twi_txBufferLength>
    1712:	81 11       	cpse	r24, r1
    1714:	0f c0       	rjmp	.+30     	; 0x1734 <__vector_24+0x156>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:531
        twi_txBufferLength = 1;
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <twi_txBufferLength>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:532
        twi_txBuffer[0] = 0x00;
    171c:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <twi_txBuffer>
    1720:	09 c0       	rjmp	.+18     	; 0x1734 <__vector_24+0x156>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1722:	80 3c       	cpi	r24, 0xC0	; 192
    1724:	09 f4       	brne	.+2      	; 0x1728 <__vector_24+0x14a>
    1726:	76 c0       	rjmp	.+236    	; 0x1814 <__vector_24+0x236>
    1728:	88 3c       	cpi	r24, 0xC8	; 200
    172a:	09 f4       	brne	.+2      	; 0x172e <__vector_24+0x150>
    172c:	73 c0       	rjmp	.+230    	; 0x1814 <__vector_24+0x236>
    172e:	88 3b       	cpi	r24, 0xB8	; 184
    1730:	09 f0       	breq	.+2      	; 0x1734 <__vector_24+0x156>
    1732:	7c cf       	rjmp	.-264    	; 0x162c <__vector_24+0x4e>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1734:	e0 91 b3 02 	lds	r30, 0x02B3	; 0x8002b3 <twi_txBufferIndex>
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	8e 0f       	add	r24, r30
    173c:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <twi_txBufferIndex>
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	ec 54       	subi	r30, 0x4C	; 76
    1744:	fd 4f       	sbci	r31, 0xFD	; 253
    1746:	80 81       	ld	r24, Z
    1748:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    174c:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <twi_txBufferIndex>
    1750:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <twi_txBufferLength>
    1754:	29 c0       	rjmp	.+82     	; 0x17a8 <__vector_24+0x1ca>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1756:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <twi_slarw>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    175a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
twi_reply():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    175e:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1760:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1764:	63 cf       	rjmp	.-314    	; 0x162c <__vector_24+0x4e>
__vector_24():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1766:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <twi_masterBufferIndex>
    176a:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <twi_masterBufferLength>
    176e:	98 17       	cp	r25, r24
    1770:	58 f5       	brcc	.+86     	; 0x17c8 <__vector_24+0x1ea>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1772:	e0 91 d5 02 	lds	r30, 0x02D5	; 0x8002d5 <twi_masterBufferIndex>
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	8e 0f       	add	r24, r30
    177a:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <twi_masterBufferIndex>
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	ea 52       	subi	r30, 0x2A	; 42
    1782:	fd 4f       	sbci	r31, 0xFD	; 253
    1784:	80 81       	ld	r24, Z
    1786:	e9 cf       	rjmp	.-46     	; 0x175a <__vector_24+0x17c>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1788:	e0 91 d5 02 	lds	r30, 0x02D5	; 0x8002d5 <twi_masterBufferIndex>
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	8e 0f       	add	r24, r30
    1790:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <twi_masterBufferIndex>
    1794:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	ea 52       	subi	r30, 0x2A	; 42
    179c:	fd 4f       	sbci	r31, 0xFD	; 253
    179e:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    17a0:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <twi_masterBufferIndex>
    17a4:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <twi_masterBufferLength>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    17a8:	98 17       	cp	r25, r24
    17aa:	c8 f2       	brcs	.-78     	; 0x175e <__vector_24+0x180>
twi_reply():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    17ac:	85 e8       	ldi	r24, 0x85	; 133
    17ae:	d8 cf       	rjmp	.-80     	; 0x1760 <__vector_24+0x182>
__vector_24():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    17b0:	e0 91 d5 02 	lds	r30, 0x02D5	; 0x8002d5 <twi_masterBufferIndex>
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	8e 0f       	add	r24, r30
    17b8:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <twi_masterBufferIndex>
    17bc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	ea 52       	subi	r30, 0x2A	; 42
    17c4:	fd 4f       	sbci	r31, 0xFD	; 253
    17c6:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:460
  if (twi_sendStop)
    17c8:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <twi_sendStop>
    17cc:	81 11       	cpse	r24, r1
    17ce:	5c cf       	rjmp	.-328    	; 0x1688 <__vector_24+0xaa>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're gonna send the START
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <twi_inRepStart>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we 
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    17d6:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    17d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
__vector_24():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    17dc:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <twi_state>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:552
      break;
    17e0:	25 cf       	rjmp	.-438    	; 0x162c <__vector_24+0x4e>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:501
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    17e2:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <twi_releaseBus>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:503
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    17e6:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <twi_rxBufferIndex>
    17ea:	80 32       	cpi	r24, 0x20	; 32
    17ec:	30 f4       	brcc	.+12     	; 0x17fa <__vector_24+0x21c>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    17ee:	e0 91 91 02 	lds	r30, 0x0291	; 0x800291 <twi_rxBufferIndex>
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	ee 56       	subi	r30, 0x6E	; 110
    17f6:	fd 4f       	sbci	r31, 0xFD	; 253
    17f8:	10 82       	st	Z, r1
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    17fa:	60 91 91 02 	lds	r22, 0x0291	; 0x800291 <twi_rxBufferIndex>
    17fe:	70 e0       	ldi	r23, 0x00	; 0
    1800:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <twi_onSlaveReceive>
    1804:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <twi_onSlaveReceive+0x1>
    1808:	82 e9       	ldi	r24, 0x92	; 146
    180a:	92 e0       	ldi	r25, 0x02	; 2
    180c:	09 95       	icall
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    180e:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <twi_rxBufferIndex>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:510
      break;
    1812:	0c cf       	rjmp	.-488    	; 0x162c <__vector_24+0x4e>
twi_reply():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1814:	85 ec       	ldi	r24, 0xC5	; 197
    1816:	e0 cf       	rjmp	.-64     	; 0x17d8 <__vector_24+0x1fa>
__vector_24():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1818:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <twi_error>
    181c:	35 cf       	rjmp	.-406    	; 0x1688 <__vector_24+0xaa>

0000181e <__vector_16>:
__vector_16():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    181e:	1f 92       	push	r1
    1820:	0f 92       	push	r0
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	0f 92       	push	r0
    1826:	11 24       	eor	r1, r1
    1828:	2f 93       	push	r18
    182a:	3f 93       	push	r19
    182c:	8f 93       	push	r24
    182e:	9f 93       	push	r25
    1830:	af 93       	push	r26
    1832:	bf 93       	push	r27
    1834:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <timer0_millis>
    1838:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <timer0_millis+0x1>
    183c:	a0 91 05 03 	lds	r26, 0x0305	; 0x800305 <timer0_millis+0x2>
    1840:	b0 91 06 03 	lds	r27, 0x0306	; 0x800306 <timer0_millis+0x3>
    1844:	30 91 02 03 	lds	r19, 0x0302	; 0x800302 <timer0_fract>
    1848:	23 e0       	ldi	r18, 0x03	; 3
    184a:	23 0f       	add	r18, r19
    184c:	2d 37       	cpi	r18, 0x7D	; 125
    184e:	68 f1       	brcs	.+90     	; 0x18aa <__vector_16+0x8c>
    1850:	26 e8       	ldi	r18, 0x86	; 134
    1852:	23 0f       	add	r18, r19
    1854:	02 96       	adiw	r24, 0x02	; 2
    1856:	a1 1d       	adc	r26, r1
    1858:	b1 1d       	adc	r27, r1
    185a:	20 93 02 03 	sts	0x0302, r18	; 0x800302 <timer0_fract>
    185e:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <timer0_millis>
    1862:	90 93 04 03 	sts	0x0304, r25	; 0x800304 <timer0_millis+0x1>
    1866:	a0 93 05 03 	sts	0x0305, r26	; 0x800305 <timer0_millis+0x2>
    186a:	b0 93 06 03 	sts	0x0306, r27	; 0x800306 <timer0_millis+0x3>
    186e:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <timer0_overflow_count>
    1872:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <timer0_overflow_count+0x1>
    1876:	a0 91 00 03 	lds	r26, 0x0300	; 0x800300 <timer0_overflow_count+0x2>
    187a:	b0 91 01 03 	lds	r27, 0x0301	; 0x800301 <timer0_overflow_count+0x3>
    187e:	01 96       	adiw	r24, 0x01	; 1
    1880:	a1 1d       	adc	r26, r1
    1882:	b1 1d       	adc	r27, r1
    1884:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <timer0_overflow_count>
    1888:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <timer0_overflow_count+0x1>
    188c:	a0 93 00 03 	sts	0x0300, r26	; 0x800300 <timer0_overflow_count+0x2>
    1890:	b0 93 01 03 	sts	0x0301, r27	; 0x800301 <timer0_overflow_count+0x3>
    1894:	bf 91       	pop	r27
    1896:	af 91       	pop	r26
    1898:	9f 91       	pop	r25
    189a:	8f 91       	pop	r24
    189c:	3f 91       	pop	r19
    189e:	2f 91       	pop	r18
    18a0:	0f 90       	pop	r0
    18a2:	0f be       	out	0x3f, r0	; 63
    18a4:	0f 90       	pop	r0
    18a6:	1f 90       	pop	r1
    18a8:	18 95       	reti
    18aa:	01 96       	adiw	r24, 0x01	; 1
    18ac:	a1 1d       	adc	r26, r1
    18ae:	b1 1d       	adc	r27, r1
    18b0:	d4 cf       	rjmp	.-88     	; 0x185a <__vector_16+0x3c>

000018b2 <millis>:
millis():
    18b2:	2f b7       	in	r18, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	60 91 03 03 	lds	r22, 0x0303	; 0x800303 <timer0_millis>
    18ba:	70 91 04 03 	lds	r23, 0x0304	; 0x800304 <timer0_millis+0x1>
    18be:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <timer0_millis+0x2>
    18c2:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <timer0_millis+0x3>
    18c6:	2f bf       	out	0x3f, r18	; 63
    18c8:	08 95       	ret

000018ca <init>:
init():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    18ca:	78 94       	sei
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    18cc:	84 b5       	in	r24, 0x24	; 36
    18ce:	83 60       	ori	r24, 0x03	; 3
    18d0:	84 bd       	out	0x24, r24	; 36
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    18d2:	85 b5       	in	r24, 0x25	; 37
    18d4:	83 60       	ori	r24, 0x03	; 3
    18d6:	85 bd       	out	0x25, r24	; 37
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    18d8:	ee e6       	ldi	r30, 0x6E	; 110
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	81 60       	ori	r24, 0x01	; 1
    18e0:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    18e2:	e1 e8       	ldi	r30, 0x81	; 129
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	82 e0       	ldi	r24, 0x02	; 2
    18e8:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    18ea:	80 81       	ld	r24, Z
    18ec:	81 60       	ori	r24, 0x01	; 1
    18ee:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    18f0:	e0 e8       	ldi	r30, 0x80	; 128
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	81 60       	ori	r24, 0x01	; 1
    18f8:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    18fa:	e1 eb       	ldi	r30, 0xB1	; 177
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	84 60       	ori	r24, 0x04	; 4
    1902:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    1904:	e0 eb       	ldi	r30, 0xB0	; 176
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	81 60       	ori	r24, 0x01	; 1
    190c:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    190e:	87 e8       	ldi	r24, 0x87	; 135
    1910:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    1914:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    1918:	08 95       	ret

0000191a <turnOffPWM>:
turnOffPWM():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    191a:	84 30       	cpi	r24, 0x04	; 4
    191c:	81 f0       	breq	.+32     	; 0x193e <turnOffPWM+0x24>
    191e:	28 f4       	brcc	.+10     	; 0x192a <turnOffPWM+0x10>
    1920:	82 30       	cpi	r24, 0x02	; 2
    1922:	e9 f0       	breq	.+58     	; 0x195e <turnOffPWM+0x44>
    1924:	83 30       	cpi	r24, 0x03	; 3
    1926:	f9 f0       	breq	.+62     	; 0x1966 <turnOffPWM+0x4c>
    1928:	08 95       	ret
    192a:	88 30       	cpi	r24, 0x08	; 8
    192c:	71 f0       	breq	.+28     	; 0x194a <turnOffPWM+0x30>
    192e:	89 30       	cpi	r24, 0x09	; 9
    1930:	91 f0       	breq	.+36     	; 0x1956 <turnOffPWM+0x3c>
    1932:	85 30       	cpi	r24, 0x05	; 5
    1934:	b9 f4       	brne	.+46     	; 0x1964 <turnOffPWM+0x4a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    1936:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    193a:	8f 7d       	andi	r24, 0xDF	; 223
    193c:	03 c0       	rjmp	.+6      	; 0x1944 <turnOffPWM+0x2a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    193e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1942:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    1944:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    1948:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    194a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    194e:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    1950:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
    1954:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    1956:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    195a:	8f 7d       	andi	r24, 0xDF	; 223
    195c:	f9 cf       	rjmp	.-14     	; 0x1950 <turnOffPWM+0x36>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    195e:	84 b5       	in	r24, 0x24	; 36
    1960:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    1962:	84 bd       	out	0x24, r24	; 36
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    1964:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    1966:	84 b5       	in	r24, 0x24	; 36
    1968:	8f 7d       	andi	r24, 0xDF	; 223
    196a:	fb cf       	rjmp	.-10     	; 0x1962 <turnOffPWM+0x48>

0000196c <pinMode>:
pinMode():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    196c:	cf 93       	push	r28
    196e:	df 93       	push	r29
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	fc 01       	movw	r30, r24
    1974:	e1 58       	subi	r30, 0x81	; 129
    1976:	ff 4f       	sbci	r31, 0xFF	; 255
    1978:	24 91       	lpm	r18, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    197a:	8a 56       	subi	r24, 0x6A	; 106
    197c:	9f 4f       	sbci	r25, 0xFF	; 255
    197e:	fc 01       	movw	r30, r24
    1980:	84 91       	lpm	r24, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    1982:	88 23       	and	r24, r24
    1984:	c9 f0       	breq	.+50     	; 0x19b8 <pinMode+0x4c>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	88 0f       	add	r24, r24
    198a:	99 1f       	adc	r25, r25
    198c:	fc 01       	movw	r30, r24
    198e:	ef 53       	subi	r30, 0x3F	; 63
    1990:	ff 4f       	sbci	r31, 0xFF	; 255
    1992:	a5 91       	lpm	r26, Z+
    1994:	b4 91       	lpm	r27, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    1996:	fc 01       	movw	r30, r24
    1998:	e9 54       	subi	r30, 0x49	; 73
    199a:	ff 4f       	sbci	r31, 0xFF	; 255
    199c:	c5 91       	lpm	r28, Z+
    199e:	d4 91       	lpm	r29, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    19a0:	61 11       	cpse	r22, r1
    19a2:	0d c0       	rjmp	.+26     	; 0x19be <pinMode+0x52>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    19a4:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    19a6:	f8 94       	cli
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    19a8:	8c 91       	ld	r24, X
    19aa:	20 95       	com	r18
    19ac:	82 23       	and	r24, r18
    19ae:	8c 93       	st	X, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    19b0:	88 81       	ld	r24, Y
    19b2:	28 23       	and	r18, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    19b4:	28 83       	st	Y, r18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    19b6:	9f bf       	out	0x3f, r25	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    19b8:	df 91       	pop	r29
    19ba:	cf 91       	pop	r28
    19bc:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    19be:	62 30       	cpi	r22, 0x02	; 2
    19c0:	51 f4       	brne	.+20     	; 0x19d6 <pinMode+0x6a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    19c2:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    19c4:	f8 94       	cli
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    19c6:	3c 91       	ld	r19, X
    19c8:	82 2f       	mov	r24, r18
    19ca:	80 95       	com	r24
    19cc:	83 23       	and	r24, r19
    19ce:	8c 93       	st	X, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    19d0:	e8 81       	ld	r30, Y
    19d2:	2e 2b       	or	r18, r30
    19d4:	ef cf       	rjmp	.-34     	; 0x19b4 <pinMode+0x48>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    19d6:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    19d8:	f8 94       	cli
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    19da:	ec 91       	ld	r30, X
    19dc:	2e 2b       	or	r18, r30
    19de:	2c 93       	st	X, r18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    19e0:	8f bf       	out	0x3f, r24	; 63
    19e2:	ea cf       	rjmp	.-44     	; 0x19b8 <pinMode+0x4c>

000019e4 <digitalWrite>:
digitalWrite():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    19e4:	1f 93       	push	r17
    19e6:	cf 93       	push	r28
    19e8:	df 93       	push	r29
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    19ea:	28 2f       	mov	r18, r24
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	f9 01       	movw	r30, r18
    19f0:	e8 59       	subi	r30, 0x98	; 152
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	84 91       	lpm	r24, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    19f6:	f9 01       	movw	r30, r18
    19f8:	e1 58       	subi	r30, 0x81	; 129
    19fa:	ff 4f       	sbci	r31, 0xFF	; 255
    19fc:	d4 91       	lpm	r29, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    19fe:	f9 01       	movw	r30, r18
    1a00:	ea 56       	subi	r30, 0x6A	; 106
    1a02:	ff 4f       	sbci	r31, 0xFF	; 255
    1a04:	c4 91       	lpm	r28, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    1a06:	cc 23       	and	r28, r28
    1a08:	a9 f0       	breq	.+42     	; 0x1a34 <digitalWrite+0x50>
    1a0a:	16 2f       	mov	r17, r22
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1a0c:	81 11       	cpse	r24, r1
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    1a0e:	0e 94 8d 0c 	call	0x191a	; 0x191a <turnOffPWM>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    1a12:	ec 2f       	mov	r30, r28
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	ee 0f       	add	r30, r30
    1a18:	ff 1f       	adc	r31, r31
    1a1a:	e9 54       	subi	r30, 0x49	; 73
    1a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1e:	a5 91       	lpm	r26, Z+
    1a20:	b4 91       	lpm	r27, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    1a22:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    1a24:	f8 94       	cli
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    1a26:	ec 91       	ld	r30, X
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    1a28:	11 11       	cpse	r17, r1
    1a2a:	08 c0       	rjmp	.+16     	; 0x1a3c <digitalWrite+0x58>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    1a2c:	d0 95       	com	r29
    1a2e:	de 23       	and	r29, r30
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    1a30:	dc 93       	st	X, r29
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    1a32:	8f bf       	out	0x3f, r24	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
    1a34:	df 91       	pop	r29
    1a36:	cf 91       	pop	r28
    1a38:	1f 91       	pop	r17
    1a3a:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    1a3c:	de 2b       	or	r29, r30
    1a3e:	f8 cf       	rjmp	.-16     	; 0x1a30 <digitalWrite+0x4c>

00001a40 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1a40:	fc 01       	movw	r30, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1a42:	91 8d       	ldd	r25, Z+25	; 0x19
    1a44:	22 8d       	ldd	r18, Z+26	; 0x1a
    1a46:	89 2f       	mov	r24, r25
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	80 5c       	subi	r24, 0xC0	; 192
    1a4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a4e:	82 1b       	sub	r24, r18
    1a50:	91 09       	sbc	r25, r1
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:152
}
    1a52:	8f 73       	andi	r24, 0x3F	; 63
    1a54:	99 27       	eor	r25, r25
    1a56:	08 95       	ret

00001a58 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
    1a58:	fc 01       	movw	r30, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
    1a5a:	91 8d       	ldd	r25, Z+25	; 0x19
    1a5c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a5e:	98 17       	cp	r25, r24
    1a60:	31 f0       	breq	.+12     	; 0x1a6e <HardwareSerial::peek()+0x16>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1a62:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a64:	e8 0f       	add	r30, r24
    1a66:	f1 1d       	adc	r31, r1
    1a68:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1a6e:	8f ef       	ldi	r24, 0xFF	; 255
    1a70:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1a72:	08 95       	ret

00001a74 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
    1a74:	fc 01       	movw	r30, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1a76:	91 8d       	ldd	r25, Z+25	; 0x19
    1a78:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a7a:	98 17       	cp	r25, r24
    1a7c:	61 f0       	breq	.+24     	; 0x1a96 <HardwareSerial::read()+0x22>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1a7e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1a80:	ae 0f       	add	r26, r30
    1a82:	bf 2f       	mov	r27, r31
    1a84:	b1 1d       	adc	r27, r1
    1a86:	5d 96       	adiw	r26, 0x1d	; 29
    1a88:	8c 91       	ld	r24, X
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1a8a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1a8c:	9f 5f       	subi	r25, 0xFF	; 255
    1a8e:	9f 73       	andi	r25, 0x3F	; 63
    1a90:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1a96:	8f ef       	ldi	r24, 0xFF	; 255
    1a98:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1a9a:	08 95       	ret

00001a9c <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    1a9c:	fc 01       	movw	r30, r24
    1a9e:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
    1aa0:	44 8d       	ldd	r20, Z+28	; 0x1c
    1aa2:	25 2f       	mov	r18, r21
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	84 2f       	mov	r24, r20
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1aaa:	82 1b       	sub	r24, r18
    1aac:	93 0b       	sbc	r25, r19
    1aae:	54 17       	cp	r21, r20
    1ab0:	10 f0       	brcs	.+4      	; 0x1ab6 <HardwareSerial::availableForWrite()+0x1a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
    1ab2:	cf 96       	adiw	r24, 0x3f	; 63
    1ab4:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:188
}
    1ab8:	08 95       	ret

00001aba <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1aba:	83 ea       	ldi	r24, 0xA3	; 163
    1abc:	9e e0       	ldi	r25, 0x0E	; 14
    1abe:	89 2b       	or	r24, r25
    1ac0:	49 f0       	breq	.+18     	; 0x1ad4 <serialEventRun()+0x1a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	89 2b       	or	r24, r25
    1ac8:	29 f0       	breq	.+10     	; 0x1ad4 <serialEventRun()+0x1a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
    1aca:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <Serial0_available()>
    1ace:	81 11       	cpse	r24, r1
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
    1ad0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    1ad4:	08 95       	ret

00001ad6 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1ad6:	fc 01       	movw	r30, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1ad8:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1ada:	a8 0f       	add	r26, r24
    1adc:	b9 2f       	mov	r27, r25
    1ade:	b1 1d       	adc	r27, r1
    1ae0:	a3 5a       	subi	r26, 0xA3	; 163
    1ae2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ae4:	2c 91       	ld	r18, X
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1ae6:	84 8d       	ldd	r24, Z+28	; 0x1c
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	01 96       	adiw	r24, 0x01	; 1
    1aec:	8f 73       	andi	r24, 0x3F	; 63
    1aee:	99 27       	eor	r25, r25
    1af0:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
    1af2:	a6 89       	ldd	r26, Z+22	; 0x16
    1af4:	b7 89       	ldd	r27, Z+23	; 0x17
    1af6:	2c 93       	st	X, r18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
    1af8:	a0 89       	ldd	r26, Z+16	; 0x10
    1afa:	b1 89       	ldd	r27, Z+17	; 0x11
    1afc:	8c 91       	ld	r24, X
    1afe:	80 64       	ori	r24, 0x40	; 64
    1b00:	8c 93       	st	X, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
    1b02:	93 8d       	ldd	r25, Z+27	; 0x1b
    1b04:	84 8d       	ldd	r24, Z+28	; 0x1c
    1b06:	98 13       	cpse	r25, r24
    1b08:	06 c0       	rjmp	.+12     	; 0x1b16 <HardwareSerial::_tx_udr_empty_irq()+0x40>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    1b0a:	02 88       	ldd	r0, Z+18	; 0x12
    1b0c:	f3 89       	ldd	r31, Z+19	; 0x13
    1b0e:	e0 2d       	mov	r30, r0
    1b10:	80 81       	ld	r24, Z
    1b12:	8f 7d       	andi	r24, 0xDF	; 223
    1b14:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
    1b16:	08 95       	ret

00001b18 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1b18:	cf 93       	push	r28
    1b1a:	df 93       	push	r29
    1b1c:	ec 01       	movw	r28, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1b1e:	88 8d       	ldd	r24, Y+24	; 0x18
    1b20:	88 23       	and	r24, r24
    1b22:	b9 f0       	breq	.+46     	; 0x1b52 <HardwareSerial::flush()+0x3a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1b24:	aa 89       	ldd	r26, Y+18	; 0x12
    1b26:	bb 89       	ldd	r27, Y+19	; 0x13
    1b28:	e8 89       	ldd	r30, Y+16	; 0x10
    1b2a:	f9 89       	ldd	r31, Y+17	; 0x11
    1b2c:	8c 91       	ld	r24, X
    1b2e:	85 fd       	sbrc	r24, 5
    1b30:	03 c0       	rjmp	.+6      	; 0x1b38 <HardwareSerial::flush()+0x20>
    1b32:	80 81       	ld	r24, Z
    1b34:	86 fd       	sbrc	r24, 6
    1b36:	0d c0       	rjmp	.+26     	; 0x1b52 <HardwareSerial::flush()+0x3a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	07 fc       	sbrc	r0, 7
    1b3c:	f7 cf       	rjmp	.-18     	; 0x1b2c <HardwareSerial::flush()+0x14>
    1b3e:	8c 91       	ld	r24, X
    1b40:	85 ff       	sbrs	r24, 5
    1b42:	f2 cf       	rjmp	.-28     	; 0x1b28 <HardwareSerial::flush()+0x10>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    1b44:	80 81       	ld	r24, Z
    1b46:	85 ff       	sbrs	r24, 5
    1b48:	ed cf       	rjmp	.-38     	; 0x1b24 <HardwareSerial::flush()+0xc>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
    1b4a:	ce 01       	movw	r24, r28
    1b4c:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <HardwareSerial::_tx_udr_empty_irq()>
    1b50:	e9 cf       	rjmp	.-46     	; 0x1b24 <HardwareSerial::flush()+0xc>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1b52:	df 91       	pop	r29
    1b54:	cf 91       	pop	r28
    1b56:	08 95       	ret

00001b58 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
    1b58:	ef 92       	push	r14
    1b5a:	ff 92       	push	r15
    1b5c:	0f 93       	push	r16
    1b5e:	1f 93       	push	r17
    1b60:	cf 93       	push	r28
    1b62:	df 93       	push	r29
    1b64:	ec 01       	movw	r28, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1b6a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1b6c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b6e:	98 13       	cpse	r25, r24
    1b70:	16 c0       	rjmp	.+44     	; 0x1b9e <HardwareSerial::write(unsigned char)+0x46>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
    1b72:	e8 89       	ldd	r30, Y+16	; 0x10
    1b74:	f9 89       	ldd	r31, Y+17	; 0x11
    1b76:	80 81       	ld	r24, Z
    1b78:	85 ff       	sbrs	r24, 5
    1b7a:	11 c0       	rjmp	.+34     	; 0x1b9e <HardwareSerial::write(unsigned char)+0x46>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
    1b7c:	ee 89       	ldd	r30, Y+22	; 0x16
    1b7e:	ff 89       	ldd	r31, Y+23	; 0x17
    1b80:	60 83       	st	Z, r22
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
    1b82:	e8 89       	ldd	r30, Y+16	; 0x10
    1b84:	f9 89       	ldd	r31, Y+17	; 0x11
    1b86:	80 81       	ld	r24, Z
    1b88:	80 64       	ori	r24, 0x40	; 64
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
    1b8a:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	df 91       	pop	r29
    1b92:	cf 91       	pop	r28
    1b94:	1f 91       	pop	r17
    1b96:	0f 91       	pop	r16
    1b98:	ff 90       	pop	r15
    1b9a:	ef 90       	pop	r14
    1b9c:	08 95       	ret
    1b9e:	f6 2e       	mov	r15, r22
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1ba0:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1ba2:	10 e0       	ldi	r17, 0x00	; 0
    1ba4:	0f 5f       	subi	r16, 0xFF	; 255
    1ba6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba8:	0f 73       	andi	r16, 0x3F	; 63
    1baa:	11 27       	eor	r17, r17
    1bac:	e0 2e       	mov	r14, r16
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1bae:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1bb0:	8e 11       	cpse	r24, r14
    1bb2:	0c c0       	rjmp	.+24     	; 0x1bcc <HardwareSerial::write(unsigned char)+0x74>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	07 fc       	sbrc	r0, 7
    1bb8:	fa cf       	rjmp	.-12     	; 0x1bae <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1bba:	e8 89       	ldd	r30, Y+16	; 0x10
    1bbc:	f9 89       	ldd	r31, Y+17	; 0x11
    1bbe:	80 81       	ld	r24, Z
    1bc0:	85 ff       	sbrs	r24, 5
    1bc2:	f5 cf       	rjmp	.-22     	; 0x1bae <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
    1bc4:	ce 01       	movw	r24, r28
    1bc6:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <HardwareSerial::_tx_udr_empty_irq()>
    1bca:	f1 cf       	rjmp	.-30     	; 0x1bae <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1bcc:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1bce:	ec 0f       	add	r30, r28
    1bd0:	fd 2f       	mov	r31, r29
    1bd2:	f1 1d       	adc	r31, r1
    1bd4:	e3 5a       	subi	r30, 0xA3	; 163
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	f0 82       	st	Z, r15
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
    1bda:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
    1bdc:	ea 89       	ldd	r30, Y+18	; 0x12
    1bde:	fb 89       	ldd	r31, Y+19	; 0x13
    1be0:	80 81       	ld	r24, Z
    1be2:	80 62       	ori	r24, 0x20	; 32
    1be4:	d2 cf       	rjmp	.-92     	; 0x1b8a <HardwareSerial::write(unsigned char)+0x32>

00001be6 <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:104
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1be6:	cf 92       	push	r12
    1be8:	df 92       	push	r13
    1bea:	ef 92       	push	r14
    1bec:	ff 92       	push	r15
    1bee:	1f 93       	push	r17
    1bf0:	cf 93       	push	r28
    1bf2:	df 93       	push	r29
    1bf4:	ec 01       	movw	r28, r24
    1bf6:	6a 01       	movw	r12, r20
    1bf8:	7b 01       	movw	r14, r22
    1bfa:	12 2f       	mov	r17, r18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:107
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1bfc:	e8 89       	ldd	r30, Y+16	; 0x10
    1bfe:	f9 89       	ldd	r31, Y+17	; 0x11
    1c00:	82 e0       	ldi	r24, 0x02	; 2
    1c02:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1c04:	c1 14       	cp	r12, r1
    1c06:	81 ee       	ldi	r24, 0xE1	; 225
    1c08:	d8 06       	cpc	r13, r24
    1c0a:	e1 04       	cpc	r14, r1
    1c0c:	f1 04       	cpc	r15, r1
    1c0e:	a1 f0       	breq	.+40     	; 0x1c38 <HardwareSerial::begin(unsigned long, unsigned char)+0x52>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:106 (discriminator 1)
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1c10:	60 e0       	ldi	r22, 0x00	; 0
    1c12:	79 e0       	ldi	r23, 0x09	; 9
    1c14:	8d e3       	ldi	r24, 0x3D	; 61
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	a7 01       	movw	r20, r14
    1c1a:	96 01       	movw	r18, r12
    1c1c:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__udivmodsi4>
    1c20:	21 50       	subi	r18, 0x01	; 1
    1c22:	31 09       	sbc	r19, r1
    1c24:	41 09       	sbc	r20, r1
    1c26:	51 09       	sbc	r21, r1
    1c28:	56 95       	lsr	r21
    1c2a:	47 95       	ror	r20
    1c2c:	37 95       	ror	r19
    1c2e:	27 95       	ror	r18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114 (discriminator 1)
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1c30:	21 15       	cp	r18, r1
    1c32:	80 e1       	ldi	r24, 0x10	; 16
    1c34:	38 07       	cpc	r19, r24
    1c36:	98 f0       	brcs	.+38     	; 0x1c5e <HardwareSerial::begin(unsigned long, unsigned char)+0x78>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:116
  {
    *_ucsra = 0;
    1c38:	e8 89       	ldd	r30, Y+16	; 0x10
    1c3a:	f9 89       	ldd	r31, Y+17	; 0x11
    1c3c:	10 82       	st	Z, r1
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:117
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1c3e:	60 e8       	ldi	r22, 0x80	; 128
    1c40:	74 e8       	ldi	r23, 0x84	; 132
    1c42:	8e e1       	ldi	r24, 0x1E	; 30
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	a7 01       	movw	r20, r14
    1c48:	96 01       	movw	r18, r12
    1c4a:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__udivmodsi4>
    1c4e:	21 50       	subi	r18, 0x01	; 1
    1c50:	31 09       	sbc	r19, r1
    1c52:	41 09       	sbc	r20, r1
    1c54:	51 09       	sbc	r21, r1
    1c56:	56 95       	lsr	r21
    1c58:	47 95       	ror	r20
    1c5a:	37 95       	ror	r19
    1c5c:	27 95       	ror	r18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1c5e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1c60:	fd 85       	ldd	r31, Y+13	; 0x0d
    1c62:	30 83       	st	Z, r19
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
    1c64:	ee 85       	ldd	r30, Y+14	; 0x0e
    1c66:	ff 85       	ldd	r31, Y+15	; 0x0f
    1c68:	20 83       	st	Z, r18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:124

  _written = false;
    1c6a:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:132
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1c6c:	ec 89       	ldd	r30, Y+20	; 0x14
    1c6e:	fd 89       	ldd	r31, Y+21	; 0x15
    1c70:	10 83       	st	Z, r17
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:134
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    1c72:	ea 89       	ldd	r30, Y+18	; 0x12
    1c74:	fb 89       	ldd	r31, Y+19	; 0x13
    1c76:	80 81       	ld	r24, Z
    1c78:	88 69       	ori	r24, 0x98	; 152
    1c7a:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  *_ucsrb &= ~_BV(UDRIE0);
    1c7c:	ea 89       	ldd	r30, Y+18	; 0x12
    1c7e:	fb 89       	ldd	r31, Y+19	; 0x13
    1c80:	80 81       	ld	r24, Z
    1c82:	8f 7d       	andi	r24, 0xDF	; 223
    1c84:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:136
}
    1c86:	df 91       	pop	r29
    1c88:	cf 91       	pop	r28
    1c8a:	1f 91       	pop	r17
    1c8c:	ff 90       	pop	r15
    1c8e:	ef 90       	pop	r14
    1c90:	df 90       	pop	r13
    1c92:	cf 90       	pop	r12
    1c94:	08 95       	ret

00001c96 <__vector_18>:
__vector_18():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1c96:	1f 92       	push	r1
    1c98:	0f 92       	push	r0
    1c9a:	0f b6       	in	r0, 0x3f	; 63
    1c9c:	0f 92       	push	r0
    1c9e:	11 24       	eor	r1, r1
    1ca0:	2f 93       	push	r18
    1ca2:	8f 93       	push	r24
    1ca4:	9f 93       	push	r25
    1ca6:	ef 93       	push	r30
    1ca8:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1caa:	e0 91 17 03 	lds	r30, 0x0317	; 0x800317 <Serial+0x10>
    1cae:	f0 91 18 03 	lds	r31, 0x0318	; 0x800318 <Serial+0x11>
    1cb2:	80 81       	ld	r24, Z
    1cb4:	e0 91 1d 03 	lds	r30, 0x031D	; 0x80031d <Serial+0x16>
    1cb8:	f0 91 1e 03 	lds	r31, 0x031E	; 0x80031e <Serial+0x17>
    1cbc:	82 fd       	sbrc	r24, 2
    1cbe:	1b c0       	rjmp	.+54     	; 0x1cf6 <__vector_18+0x60>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1cc0:	90 81       	ld	r25, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1cc2:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <Serial+0x19>
    1cc6:	8f 5f       	subi	r24, 0xFF	; 255
    1cc8:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1cca:	20 91 21 03 	lds	r18, 0x0321	; 0x800321 <Serial+0x1a>
    1cce:	82 17       	cp	r24, r18
    1cd0:	41 f0       	breq	.+16     	; 0x1ce2 <__vector_18+0x4c>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
    1cd2:	e0 91 20 03 	lds	r30, 0x0320	; 0x800320 <Serial+0x19>
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	e9 5f       	subi	r30, 0xF9	; 249
    1cda:	fc 4f       	sbci	r31, 0xFC	; 252
    1cdc:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
    1cde:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <Serial+0x19>
__vector_18():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    1ce2:	ff 91       	pop	r31
    1ce4:	ef 91       	pop	r30
    1ce6:	9f 91       	pop	r25
    1ce8:	8f 91       	pop	r24
    1cea:	2f 91       	pop	r18
    1cec:	0f 90       	pop	r0
    1cee:	0f be       	out	0x3f, r0	; 63
    1cf0:	0f 90       	pop	r0
    1cf2:	1f 90       	pop	r1
    1cf4:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1cf6:	80 81       	ld	r24, Z
__vector_18():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    1cf8:	f4 cf       	rjmp	.-24     	; 0x1ce2 <__vector_18+0x4c>

00001cfa <__vector_19>:
__vector_19():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1cfa:	1f 92       	push	r1
    1cfc:	0f 92       	push	r0
    1cfe:	0f b6       	in	r0, 0x3f	; 63
    1d00:	0f 92       	push	r0
    1d02:	11 24       	eor	r1, r1
    1d04:	2f 93       	push	r18
    1d06:	3f 93       	push	r19
    1d08:	4f 93       	push	r20
    1d0a:	5f 93       	push	r21
    1d0c:	6f 93       	push	r22
    1d0e:	7f 93       	push	r23
    1d10:	8f 93       	push	r24
    1d12:	9f 93       	push	r25
    1d14:	af 93       	push	r26
    1d16:	bf 93       	push	r27
    1d18:	ef 93       	push	r30
    1d1a:	ff 93       	push	r31
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    1d1c:	87 e0       	ldi	r24, 0x07	; 7
    1d1e:	93 e0       	ldi	r25, 0x03	; 3
    1d20:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    1d24:	ff 91       	pop	r31
    1d26:	ef 91       	pop	r30
    1d28:	bf 91       	pop	r27
    1d2a:	af 91       	pop	r26
    1d2c:	9f 91       	pop	r25
    1d2e:	8f 91       	pop	r24
    1d30:	7f 91       	pop	r23
    1d32:	6f 91       	pop	r22
    1d34:	5f 91       	pop	r21
    1d36:	4f 91       	pop	r20
    1d38:	3f 91       	pop	r19
    1d3a:	2f 91       	pop	r18
    1d3c:	0f 90       	pop	r0
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	0f 90       	pop	r0
    1d42:	1f 90       	pop	r1
    1d44:	18 95       	reti

00001d46 <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1d46:	87 e0       	ldi	r24, 0x07	; 7
    1d48:	93 e0       	ldi	r25, 0x03	; 3
    1d4a:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <HardwareSerial::available()>
    1d4e:	21 e0       	ldi	r18, 0x01	; 1
    1d50:	89 2b       	or	r24, r25
    1d52:	09 f4       	brne	.+2      	; 0x1d56 <Serial0_available()+0x10>
    1d54:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
    1d56:	82 2f       	mov	r24, r18
    1d58:	08 95       	ret

00001d5a <_GLOBAL__sub_I___vector_18>:
_ZN5PrintC4Ev():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    1d5a:	e7 e0       	ldi	r30, 0x07	; 7
    1d5c:	f3 e0       	ldi	r31, 0x03	; 3
    1d5e:	13 82       	std	Z+3, r1	; 0x03
    1d60:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
    1d62:	88 ee       	ldi	r24, 0xE8	; 232
    1d64:	93 e0       	ldi	r25, 0x03	; 3
    1d66:	a0 e0       	ldi	r26, 0x00	; 0
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	84 83       	std	Z+4, r24	; 0x04
    1d6c:	95 83       	std	Z+5, r25	; 0x05
    1d6e:	a6 83       	std	Z+6, r26	; 0x06
    1d70:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1d72:	85 e2       	ldi	r24, 0x25	; 37
    1d74:	91 e0       	ldi	r25, 0x01	; 1
    1d76:	91 83       	std	Z+1, r25	; 0x01
    1d78:	80 83       	st	Z, r24
    1d7a:	85 ec       	ldi	r24, 0xC5	; 197
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	95 87       	std	Z+13, r25	; 0x0d
    1d80:	84 87       	std	Z+12, r24	; 0x0c
    1d82:	84 ec       	ldi	r24, 0xC4	; 196
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	97 87       	std	Z+15, r25	; 0x0f
    1d88:	86 87       	std	Z+14, r24	; 0x0e
    1d8a:	80 ec       	ldi	r24, 0xC0	; 192
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	91 8b       	std	Z+17, r25	; 0x11
    1d90:	80 8b       	std	Z+16, r24	; 0x10
    1d92:	81 ec       	ldi	r24, 0xC1	; 193
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	93 8b       	std	Z+19, r25	; 0x13
    1d98:	82 8b       	std	Z+18, r24	; 0x12
    1d9a:	82 ec       	ldi	r24, 0xC2	; 194
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	95 8b       	std	Z+21, r25	; 0x15
    1da0:	84 8b       	std	Z+20, r24	; 0x14
    1da2:	86 ec       	ldi	r24, 0xC6	; 198
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	97 8b       	std	Z+23, r25	; 0x17
    1da8:	86 8b       	std	Z+22, r24	; 0x16
    1daa:	11 8e       	std	Z+25, r1	; 0x19
    1dac:	12 8e       	std	Z+26, r1	; 0x1a
    1dae:	13 8e       	std	Z+27, r1	; 0x1b
    1db0:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_18():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
    1db2:	08 95       	ret

00001db4 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    1db4:	af 92       	push	r10
    1db6:	bf 92       	push	r11
    1db8:	cf 92       	push	r12
    1dba:	df 92       	push	r13
    1dbc:	ef 92       	push	r14
    1dbe:	ff 92       	push	r15
    1dc0:	0f 93       	push	r16
    1dc2:	1f 93       	push	r17
    1dc4:	cf 93       	push	r28
    1dc6:	df 93       	push	r29
    1dc8:	6c 01       	movw	r12, r24
    1dca:	7b 01       	movw	r14, r22
    1dcc:	8b 01       	movw	r16, r22
    1dce:	04 0f       	add	r16, r20
    1dd0:	15 1f       	adc	r17, r21
    1dd2:	eb 01       	movw	r28, r22
    1dd4:	5e 01       	movw	r10, r28
    1dd6:	ae 18       	sub	r10, r14
    1dd8:	bf 08       	sbc	r11, r15
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
    1dda:	c0 17       	cp	r28, r16
    1ddc:	d1 07       	cpc	r29, r17
    1dde:	59 f0       	breq	.+22     	; 0x1df6 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
    1de0:	69 91       	ld	r22, Y+
    1de2:	d6 01       	movw	r26, r12
    1de4:	ed 91       	ld	r30, X+
    1de6:	fc 91       	ld	r31, X
    1de8:	01 90       	ld	r0, Z+
    1dea:	f0 81       	ld	r31, Z
    1dec:	e0 2d       	mov	r30, r0
    1dee:	c6 01       	movw	r24, r12
    1df0:	09 95       	icall
    1df2:	89 2b       	or	r24, r25
    1df4:	79 f7       	brne	.-34     	; 0x1dd4 <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
    1df6:	c5 01       	movw	r24, r10
    1df8:	df 91       	pop	r29
    1dfa:	cf 91       	pop	r28
    1dfc:	1f 91       	pop	r17
    1dfe:	0f 91       	pop	r16
    1e00:	ff 90       	pop	r15
    1e02:	ef 90       	pop	r14
    1e04:	df 90       	pop	r13
    1e06:	cf 90       	pop	r12
    1e08:	bf 90       	pop	r11
    1e0a:	af 90       	pop	r10
    1e0c:	08 95       	ret

00001e0e <makeWord(unsigned char, unsigned char)>:
_Z8makeWordhh():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:58
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

unsigned int makeWord(unsigned int w) { return w; }
unsigned int makeWord(unsigned char h, unsigned char l) { return (h << 8) | l; }
    1e0e:	98 2f       	mov	r25, r24
    1e10:	86 2f       	mov	r24, r22
    1e12:	08 95       	ret

00001e14 <initVariant>:
initVariant():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1e14:	08 95       	ret

00001e16 <main>:
main():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    1e16:	0e 94 65 0c 	call	0x18ca	; 0x18ca <init>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    1e1a:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <initVariant>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    1e1e:	0e 94 65 07 	call	0xeca	; 0xeca <setup>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    1e22:	cd e5       	ldi	r28, 0x5D	; 93
    1e24:	dd e0       	ldi	r29, 0x0D	; 13
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    1e26:	0e 94 f8 07 	call	0xff0	; 0xff0 <loop>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    1e2a:	20 97       	sbiw	r28, 0x00	; 0
    1e2c:	e1 f3       	breq	.-8      	; 0x1e26 <main+0x10>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    1e2e:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <serialEventRun()>
    1e32:	f9 cf       	rjmp	.-14     	; 0x1e26 <main+0x10>

00001e34 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1e34:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1e36:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    1e38:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    1e3a:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    1e3c:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    1e3e:	0d c0       	rjmp	.+26     	; 0x1e5a <__udivmodsi4_ep>

00001e40 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    1e40:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1e42:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1e44:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1e46:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1e48:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    1e4a:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    1e4c:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    1e4e:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    1e50:	20 f0       	brcs	.+8      	; 0x1e5a <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1e52:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1e54:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1e56:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1e58:	f5 0b       	sbc	r31, r21

00001e5a <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1e5a:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    1e5c:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    1e5e:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    1e60:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1e62:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1e64:	69 f7       	brne	.-38     	; 0x1e40 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1e66:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1e68:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1e6a:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    1e6c:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    1e6e:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    1e70:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1e72:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1e74:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1e76:	08 95       	ret

00001e78 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1e78:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1e7a:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    1e7c:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    1e7e:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1e80:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1e82:	09 94       	ijmp

00001e84 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1e84:	f8 94       	cli

00001e86 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1e86:	ff cf       	rjmp	.-2      	; 0x1e86 <__stop_program>
