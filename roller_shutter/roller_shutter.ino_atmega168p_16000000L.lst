
C:\Users\Jacek\AppData\Local\Temp\arduino_build_18901/roller_shutter.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__ctors_end>
       4:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       8:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      10:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      14:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      18:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      1c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      20:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      24:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      28:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      2c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      30:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      34:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      38:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      3c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      40:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__vector_16>
      44:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      48:	0c 94 a6 0a 	jmp	0x154c	; 0x154c <__vector_18>
      4c:	0c 94 d8 0a 	jmp	0x15b0	; 0x15b0 <__vector_19>
      50:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      54:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      58:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      5c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      60:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      64:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	00 00       	nop
      6a:	00 09       	sbc	r16, r0
      6c:	00 03       	mulsu	r16, r16
      6e:	02 00       	.word	0x0002	; ????
      70:	00 04       	cpc	r0, r0
      72:	05 08       	sbc	r0, r5
	...

0000007f <digital_pin_to_bit_mask_PGM>:
      7f:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8f:	04 08 10 20 40 80 40                                ... @.@

00000096 <digital_pin_to_port_PGM>:
      96:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a6:	03 03 03 03 02 02 03                                .......

000000ad <port_to_input_PGM>:
      ad:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000b7 <port_to_output_PGM>:
      b7:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000c1 <port_to_mode_PGM>:
      c1:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000cc <__ctors_start>:
__ctors_start():
      cc:	00 07       	cpc	r16, r16
      ce:	08 0b       	sbc	r16, r24

000000d0 <__ctors_end>:
__dtors_end():
      d0:	11 24       	eor	r1, r1
      d2:	1f be       	out	0x3f, r1	; 63
      d4:	cf ef       	ldi	r28, 0xFF	; 255
      d6:	d4 e0       	ldi	r29, 0x04	; 4
      d8:	de bf       	out	0x3e, r29	; 62
      da:	cd bf       	out	0x3d, r28	; 61

000000dc <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      dc:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      de:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      e0:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      e2:	ee e4       	ldi	r30, 0x4E	; 78
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      e4:	f7 e1       	ldi	r31, 0x17	; 23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      e8:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      ea:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      ec:	ac 32       	cpi	r26, 0x2C	; 44
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      ee:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0xc>

000000f2 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      f2:	22 e0       	ldi	r18, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      f4:	ac e2       	ldi	r26, 0x2C	; 44
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      f6:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      fc:	ae 35       	cpi	r26, 0x5E	; 94
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      fe:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>

00000102 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     102:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     104:	c8 e6       	ldi	r28, 0x68	; 104
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     106:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     108:	04 c0       	rjmp	.+8      	; 0x112 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     10a:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     10c:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     10e:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     112:	c6 36       	cpi	r28, 0x66	; 102
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     114:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     116:	c9 f7       	brne	.-14     	; 0x10a <__do_global_ctors+0x8>
     118:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <main>
     11c:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <_exit>

00000120 <__bad_interrupt>:
__vector_22():
     120:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000124 <Modbus::start()>:
_ZN6Modbus5startEv():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:695
        break;
    case MB_FC_READ_INPUT_REGISTER:
    case MB_FC_READ_REGISTERS :
        // call get_FC3 to transfer the incoming message to au16regs buffer
        get_FC3( );
        break;
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	ec 01       	movw	r28, r24
     12a:	8b 81       	ldd	r24, Y+3	; 0x03
     12c:	82 30       	cpi	r24, 0x02	; 2
     12e:	38 f0       	brcs	.+14     	; 0x13e <Modbus::start()+0x1a>
     130:	61 e0       	ldi	r22, 0x01	; 1
     132:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <pinMode>
     136:	60 e0       	ldi	r22, 0x00	; 0
     138:	8b 81       	ldd	r24, Y+3	; 0x03
     13a:	0e 94 24 09 	call	0x1248	; 0x1248 <digitalWrite>
     13e:	88 81       	ld	r24, Y
     140:	99 81       	ldd	r25, Y+1	; 0x01
     142:	dc 01       	movw	r26, r24
     144:	ed 91       	ld	r30, X+
     146:	fc 91       	ld	r31, X
     148:	02 84       	ldd	r0, Z+10	; 0x0a
     14a:	f3 85       	ldd	r31, Z+11	; 0x0b
     14c:	e0 2d       	mov	r30, r0
     14e:	09 95       	icall
     150:	97 ff       	sbrs	r25, 7
     152:	f5 cf       	rjmp	.-22     	; 0x13e <Modbus::start()+0x1a>
     154:	fe 01       	movw	r30, r28
     156:	ea 5b       	subi	r30, 0xBA	; 186
     158:	ff 4f       	sbci	r31, 0xFF	; 255
     15a:	10 82       	st	Z, r1
     15c:	31 96       	adiw	r30, 0x01	; 1
     15e:	10 82       	st	Z, r1
     160:	37 96       	adiw	r30, 0x07	; 7
     162:	11 82       	std	Z+1, r1	; 0x01
     164:	10 82       	st	Z, r1
     166:	32 97       	sbiw	r30, 0x02	; 2
     168:	11 82       	std	Z+1, r1	; 0x01
     16a:	10 82       	st	Z, r1
     16c:	c6 5b       	subi	r28, 0xB6	; 182
     16e:	df 4f       	sbci	r29, 0xFF	; 255
     170:	19 82       	std	Y+1, r1	; 0x01
     172:	18 82       	st	Y, r1
     174:	df 91       	pop	r29
     176:	cf 91       	pop	r28
     178:	08 95       	ret

0000017a <Modbus::begin(long)>:
_ZN6Modbus5beginEl():
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	ec 01       	movw	r28, r24
_ZN14HardwareSerial5beginEm():
     180:	26 e0       	ldi	r18, 0x06	; 6
     182:	88 81       	ld	r24, Y
     184:	99 81       	ldd	r25, Y+1	; 0x01
     186:	0e 94 4e 0a 	call	0x149c	; 0x149c <HardwareSerial::begin(unsigned long, unsigned char)>
_ZN6Modbus5beginEl():
     18a:	ce 01       	movw	r24, r28
     18c:	df 91       	pop	r29
     18e:	cf 91       	pop	r28
     190:	0c 94 92 00 	jmp	0x124	; 0x124 <Modbus::start()>

00000194 <Modbus::getRxBuffer()>:
_ZN6Modbus11getRxBufferEv():
     194:	ff 92       	push	r15
     196:	0f 93       	push	r16
     198:	1f 93       	push	r17
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	ec 01       	movw	r28, r24
     1a0:	8b 81       	ldd	r24, Y+3	; 0x03
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	18 f0       	brcs	.+6      	; 0x1ac <Modbus::getRxBuffer()+0x18>
     1a6:	60 e0       	ldi	r22, 0x00	; 0
     1a8:	0e 94 24 09 	call	0x1248	; 0x1248 <digitalWrite>
     1ac:	8e 01       	movw	r16, r28
     1ae:	0a 5b       	subi	r16, 0xBA	; 186
     1b0:	1f 4f       	sbci	r17, 0xFF	; 255
     1b2:	d8 01       	movw	r26, r16
     1b4:	1c 92       	st	X, r1
     1b6:	f1 2c       	mov	r15, r1
     1b8:	88 81       	ld	r24, Y
     1ba:	99 81       	ldd	r25, Y+1	; 0x01
     1bc:	dc 01       	movw	r26, r24
     1be:	ed 91       	ld	r30, X+
     1c0:	fc 91       	ld	r31, X
     1c2:	00 84       	ldd	r0, Z+8	; 0x08
     1c4:	f1 85       	ldd	r31, Z+9	; 0x09
     1c6:	e0 2d       	mov	r30, r0
     1c8:	09 95       	icall
     1ca:	89 2b       	or	r24, r25
     1cc:	b9 f0       	breq	.+46     	; 0x1fc <Modbus::getRxBuffer()+0x68>
     1ce:	88 81       	ld	r24, Y
     1d0:	99 81       	ldd	r25, Y+1	; 0x01
     1d2:	dc 01       	movw	r26, r24
     1d4:	ed 91       	ld	r30, X+
     1d6:	fc 91       	ld	r31, X
     1d8:	02 84       	ldd	r0, Z+10	; 0x0a
     1da:	f3 85       	ldd	r31, Z+11	; 0x0b
     1dc:	e0 2d       	mov	r30, r0
     1de:	09 95       	icall
     1e0:	f8 01       	movw	r30, r16
     1e2:	90 81       	ld	r25, Z
     1e4:	fe 01       	movw	r30, r28
     1e6:	e9 0f       	add	r30, r25
     1e8:	f1 1d       	adc	r31, r1
     1ea:	86 83       	std	Z+6, r24	; 0x06
     1ec:	9f 5f       	subi	r25, 0xFF	; 255
     1ee:	d8 01       	movw	r26, r16
     1f0:	9c 93       	st	X, r25
     1f2:	90 34       	cpi	r25, 0x40	; 64
     1f4:	08 f3       	brcs	.-62     	; 0x1b8 <Modbus::getRxBuffer()+0x24>
     1f6:	ff 24       	eor	r15, r15
     1f8:	f3 94       	inc	r15
     1fa:	de cf       	rjmp	.-68     	; 0x1b8 <Modbus::getRxBuffer()+0x24>
     1fc:	fe 01       	movw	r30, r28
     1fe:	e6 5b       	subi	r30, 0xB6	; 182
     200:	ff 4f       	sbci	r31, 0xFF	; 255
     202:	80 81       	ld	r24, Z
     204:	91 81       	ldd	r25, Z+1	; 0x01
     206:	01 96       	adiw	r24, 0x01	; 1
     208:	91 83       	std	Z+1, r25	; 0x01
     20a:	80 83       	st	Z, r24
     20c:	ff 20       	and	r15, r15
     20e:	71 f0       	breq	.+28     	; 0x22c <Modbus::getRxBuffer()+0x98>
     210:	c2 5b       	subi	r28, 0xB2	; 178
     212:	df 4f       	sbci	r29, 0xFF	; 255
     214:	88 81       	ld	r24, Y
     216:	99 81       	ldd	r25, Y+1	; 0x01
     218:	01 96       	adiw	r24, 0x01	; 1
     21a:	99 83       	std	Y+1, r25	; 0x01
     21c:	88 83       	st	Y, r24
     21e:	8d ef       	ldi	r24, 0xFD	; 253
     220:	df 91       	pop	r29
     222:	cf 91       	pop	r28
     224:	1f 91       	pop	r17
     226:	0f 91       	pop	r16
     228:	ff 90       	pop	r15
     22a:	08 95       	ret
     22c:	f8 01       	movw	r30, r16
     22e:	80 81       	ld	r24, Z
     230:	f7 cf       	rjmp	.-18     	; 0x220 <Modbus::getRxBuffer()+0x8c>

00000232 <Modbus::calcCRC(unsigned char)>:
_ZN6Modbus7calcCRCEh():
     232:	fc 01       	movw	r30, r24
     234:	36 96       	adiw	r30, 0x06	; 6
     236:	20 e0       	ldi	r18, 0x00	; 0
     238:	8f ef       	ldi	r24, 0xFF	; 255
     23a:	9f ef       	ldi	r25, 0xFF	; 255
     23c:	26 17       	cp	r18, r22
     23e:	91 f0       	breq	.+36     	; 0x264 <Modbus::calcCRC(unsigned char)+0x32>
     240:	31 91       	ld	r19, Z+
     242:	83 27       	eor	r24, r19
     244:	38 e0       	ldi	r19, 0x08	; 8
     246:	ac 01       	movw	r20, r24
     248:	41 70       	andi	r20, 0x01	; 1
     24a:	55 27       	eor	r21, r21
     24c:	96 95       	lsr	r25
     24e:	87 95       	ror	r24
     250:	45 2b       	or	r20, r21
     252:	21 f0       	breq	.+8      	; 0x25c <Modbus::calcCRC(unsigned char)+0x2a>
     254:	41 e0       	ldi	r20, 0x01	; 1
     256:	84 27       	eor	r24, r20
     258:	40 ea       	ldi	r20, 0xA0	; 160
     25a:	94 27       	eor	r25, r20
     25c:	31 50       	subi	r19, 0x01	; 1
     25e:	99 f7       	brne	.-26     	; 0x246 <Modbus::calcCRC(unsigned char)+0x14>
     260:	2f 5f       	subi	r18, 0xFF	; 255
     262:	ec cf       	rjmp	.-40     	; 0x23c <Modbus::calcCRC(unsigned char)+0xa>
     264:	98 27       	eor	r25, r24
     266:	89 27       	eor	r24, r25
     268:	98 27       	eor	r25, r24
     26a:	08 95       	ret

0000026c <Modbus::sendTxBuffer()>:
_ZN6Modbus12sendTxBufferEv():
     26c:	cf 92       	push	r12
     26e:	df 92       	push	r13
     270:	ff 92       	push	r15
     272:	0f 93       	push	r16
     274:	1f 93       	push	r17
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
     27a:	00 d0       	rcall	.+0      	; 0x27c <Modbus::sendTxBuffer()+0x10>
     27c:	00 d0       	rcall	.+0      	; 0x27e <Modbus::sendTxBuffer()+0x12>
     27e:	cd b7       	in	r28, 0x3d	; 61
     280:	de b7       	in	r29, 0x3e	; 62
     282:	8c 01       	movw	r16, r24
     284:	6c 01       	movw	r12, r24
     286:	86 e4       	ldi	r24, 0x46	; 70
     288:	c8 0e       	add	r12, r24
     28a:	d1 1c       	adc	r13, r1
     28c:	d6 01       	movw	r26, r12
     28e:	fc 90       	ld	r15, X
     290:	6f 2d       	mov	r22, r15
     292:	c8 01       	movw	r24, r16
     294:	0e 94 19 01 	call	0x232	; 0x232 <Modbus::calcCRC(unsigned char)>
     298:	f8 01       	movw	r30, r16
     29a:	ef 0d       	add	r30, r15
     29c:	f1 1d       	adc	r31, r1
     29e:	96 83       	std	Z+6, r25	; 0x06
     2a0:	e1 e0       	ldi	r30, 0x01	; 1
     2a2:	ef 0d       	add	r30, r15
     2a4:	e0 0f       	add	r30, r16
     2a6:	f1 2f       	mov	r31, r17
     2a8:	f1 1d       	adc	r31, r1
     2aa:	86 83       	std	Z+6, r24	; 0x06
     2ac:	f3 94       	inc	r15
     2ae:	f3 94       	inc	r15
     2b0:	f6 01       	movw	r30, r12
     2b2:	f0 82       	st	Z, r15
     2b4:	d8 01       	movw	r26, r16
     2b6:	13 96       	adiw	r26, 0x03	; 3
     2b8:	8c 91       	ld	r24, X
     2ba:	82 30       	cpi	r24, 0x02	; 2
     2bc:	18 f0       	brcs	.+6      	; 0x2c4 <Modbus::sendTxBuffer()+0x58>
     2be:	61 e0       	ldi	r22, 0x01	; 1
     2c0:	0e 94 24 09 	call	0x1248	; 0x1248 <digitalWrite>
     2c4:	f8 01       	movw	r30, r16
     2c6:	80 81       	ld	r24, Z
     2c8:	91 81       	ldd	r25, Z+1	; 0x01
     2ca:	d6 01       	movw	r26, r12
     2cc:	4c 91       	ld	r20, X
     2ce:	50 e0       	ldi	r21, 0x00	; 0
     2d0:	dc 01       	movw	r26, r24
     2d2:	ed 91       	ld	r30, X+
     2d4:	fc 91       	ld	r31, X
     2d6:	02 80       	ldd	r0, Z+2	; 0x02
     2d8:	f3 81       	ldd	r31, Z+3	; 0x03
     2da:	e0 2d       	mov	r30, r0
     2dc:	b8 01       	movw	r22, r16
     2de:	6a 5f       	subi	r22, 0xFA	; 250
     2e0:	7f 4f       	sbci	r23, 0xFF	; 255
     2e2:	09 95       	icall
     2e4:	f8 01       	movw	r30, r16
     2e6:	83 81       	ldd	r24, Z+3	; 0x03
     2e8:	82 30       	cpi	r24, 0x02	; 2
     2ea:	58 f1       	brcs	.+86     	; 0x342 <Modbus::sendTxBuffer()+0xd6>
     2ec:	80 81       	ld	r24, Z
     2ee:	91 81       	ldd	r25, Z+1	; 0x01
     2f0:	dc 01       	movw	r26, r24
     2f2:	ed 91       	ld	r30, X+
     2f4:	fc 91       	ld	r31, X
     2f6:	06 80       	ldd	r0, Z+6	; 0x06
     2f8:	f7 81       	ldd	r31, Z+7	; 0x07
     2fa:	e0 2d       	mov	r30, r0
     2fc:	09 95       	icall
     2fe:	f8 01       	movw	r30, r16
     300:	e6 5a       	subi	r30, 0xA6	; 166
     302:	ff 4f       	sbci	r31, 0xFF	; 255
     304:	80 81       	ld	r24, Z
     306:	91 81       	ldd	r25, Z+1	; 0x01
     308:	a2 81       	ldd	r26, Z+2	; 0x02
     30a:	b3 81       	ldd	r27, Z+3	; 0x03
     30c:	89 83       	std	Y+1, r24	; 0x01
     30e:	9a 83       	std	Y+2, r25	; 0x02
     310:	ab 83       	std	Y+3, r26	; 0x03
     312:	bc 83       	std	Y+4, r27	; 0x04
     314:	89 81       	ldd	r24, Y+1	; 0x01
     316:	9a 81       	ldd	r25, Y+2	; 0x02
     318:	ab 81       	ldd	r26, Y+3	; 0x03
     31a:	bc 81       	ldd	r27, Y+4	; 0x04
     31c:	ac 01       	movw	r20, r24
     31e:	bd 01       	movw	r22, r26
     320:	41 50       	subi	r20, 0x01	; 1
     322:	51 09       	sbc	r21, r1
     324:	61 09       	sbc	r22, r1
     326:	71 09       	sbc	r23, r1
     328:	49 83       	std	Y+1, r20	; 0x01
     32a:	5a 83       	std	Y+2, r21	; 0x02
     32c:	6b 83       	std	Y+3, r22	; 0x03
     32e:	7c 83       	std	Y+4, r23	; 0x04
     330:	89 2b       	or	r24, r25
     332:	8a 2b       	or	r24, r26
     334:	8b 2b       	or	r24, r27
     336:	71 f7       	brne	.-36     	; 0x314 <Modbus::sendTxBuffer()+0xa8>
     338:	60 e0       	ldi	r22, 0x00	; 0
     33a:	f8 01       	movw	r30, r16
     33c:	83 81       	ldd	r24, Z+3	; 0x03
     33e:	0e 94 24 09 	call	0x1248	; 0x1248 <digitalWrite>
     342:	d8 01       	movw	r26, r16
     344:	8d 91       	ld	r24, X+
     346:	9c 91       	ld	r25, X
     348:	dc 01       	movw	r26, r24
     34a:	ed 91       	ld	r30, X+
     34c:	fc 91       	ld	r31, X
     34e:	02 84       	ldd	r0, Z+10	; 0x0a
     350:	f3 85       	ldd	r31, Z+11	; 0x0b
     352:	e0 2d       	mov	r30, r0
     354:	09 95       	icall
     356:	97 ff       	sbrs	r25, 7
     358:	f4 cf       	rjmp	.-24     	; 0x342 <Modbus::sendTxBuffer()+0xd6>
     35a:	f6 01       	movw	r30, r12
     35c:	10 82       	st	Z, r1
     35e:	0e 94 2d 08 	call	0x105a	; 0x105a <millis>
     362:	f8 01       	movw	r30, r16
     364:	ea 5a       	subi	r30, 0xAA	; 170
     366:	ff 4f       	sbci	r31, 0xFF	; 255
     368:	60 83       	st	Z, r22
     36a:	71 83       	std	Z+1, r23	; 0x01
     36c:	82 83       	std	Z+2, r24	; 0x02
     36e:	93 83       	std	Z+3, r25	; 0x03
     370:	3a 97       	sbiw	r30, 0x0a	; 10
     372:	80 81       	ld	r24, Z
     374:	91 81       	ldd	r25, Z+1	; 0x01
     376:	01 96       	adiw	r24, 0x01	; 1
     378:	91 83       	std	Z+1, r25	; 0x01
     37a:	80 83       	st	Z, r24
     37c:	0f 90       	pop	r0
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	1f 91       	pop	r17
     38a:	0f 91       	pop	r16
     38c:	ff 90       	pop	r15
     38e:	df 90       	pop	r13
     390:	cf 90       	pop	r12
     392:	08 95       	ret

00000394 <Modbus::validateRequest()>:
_ZN6Modbus15validateRequestEv():
     394:	0f 93       	push	r16
     396:	1f 93       	push	r17
     398:	cf 93       	push	r28
     39a:	df 93       	push	r29
     39c:	ec 01       	movw	r28, r24
     39e:	fc 01       	movw	r30, r24
     3a0:	ea 5b       	subi	r30, 0xBA	; 186
     3a2:	ff 4f       	sbci	r31, 0xFF	; 255
     3a4:	60 81       	ld	r22, Z
     3a6:	06 2f       	mov	r16, r22
     3a8:	10 e0       	ldi	r17, 0x00	; 0
     3aa:	62 50       	subi	r22, 0x02	; 2
     3ac:	0e 94 19 01 	call	0x232	; 0x232 <Modbus::calcCRC(unsigned char)>
     3b0:	fe 01       	movw	r30, r28
     3b2:	e0 0f       	add	r30, r16
     3b4:	f1 1f       	adc	r31, r17
     3b6:	24 81       	ldd	r18, Z+4	; 0x04
     3b8:	35 81       	ldd	r19, Z+5	; 0x05
     3ba:	23 27       	eor	r18, r19
     3bc:	32 27       	eor	r19, r18
     3be:	23 27       	eor	r18, r19
     3c0:	82 17       	cp	r24, r18
     3c2:	93 07       	cpc	r25, r19
     3c4:	69 f0       	breq	.+26     	; 0x3e0 <Modbus::validateRequest()+0x4c>
     3c6:	c2 5b       	subi	r28, 0xB2	; 178
     3c8:	df 4f       	sbci	r29, 0xFF	; 255
     3ca:	88 81       	ld	r24, Y
     3cc:	99 81       	ldd	r25, Y+1	; 0x01
     3ce:	01 96       	adiw	r24, 0x01	; 1
     3d0:	99 83       	std	Y+1, r25	; 0x01
     3d2:	88 83       	st	Y, r24
     3d4:	8f ef       	ldi	r24, 0xFF	; 255
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	1f 91       	pop	r17
     3dc:	0f 91       	pop	r16
     3de:	08 95       	ret
     3e0:	ef 81       	ldd	r30, Y+7	; 0x07
     3e2:	a4 e0       	ldi	r26, 0x04	; 4
     3e4:	b1 e0       	ldi	r27, 0x01	; 1
     3e6:	8d 91       	ld	r24, X+
     3e8:	8e 17       	cp	r24, r30
     3ea:	09 f4       	brne	.+2      	; 0x3ee <Modbus::validateRequest()+0x5a>
     3ec:	44 c0       	rjmp	.+136    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	ac 30       	cpi	r26, 0x0C	; 12
     3f2:	b8 07       	cpc	r27, r24
     3f4:	c1 f7       	brne	.-16     	; 0x3e6 <Modbus::validateRequest()+0x52>
     3f6:	c2 5b       	subi	r28, 0xB2	; 178
     3f8:	df 4f       	sbci	r29, 0xFF	; 255
     3fa:	88 81       	ld	r24, Y
     3fc:	99 81       	ldd	r25, Y+1	; 0x01
     3fe:	01 96       	adiw	r24, 0x01	; 1
     400:	99 83       	std	Y+1, r25	; 0x01
     402:	88 83       	st	Y, r24
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	e7 cf       	rjmp	.-50     	; 0x3d6 <Modbus::validateRequest()+0x42>
     408:	69 85       	ldd	r22, Y+9	; 0x09
     40a:	88 85       	ldd	r24, Y+8	; 0x08
     40c:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <makeWord(unsigned char, unsigned char)>
     410:	8c 01       	movw	r16, r24
     412:	34 e0       	ldi	r19, 0x04	; 4
     414:	16 95       	lsr	r17
     416:	07 95       	ror	r16
     418:	3a 95       	dec	r19
     41a:	e1 f7       	brne	.-8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     41c:	6b 85       	ldd	r22, Y+11	; 0x0b
     41e:	8a 85       	ldd	r24, Y+10	; 0x0a
     420:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <makeWord(unsigned char, unsigned char)>
     424:	44 e0       	ldi	r20, 0x04	; 4
     426:	96 95       	lsr	r25
     428:	87 95       	ror	r24
     42a:	4a 95       	dec	r20
     42c:	e1 f7       	brne	.-8      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     42e:	80 0f       	add	r24, r16
     430:	91 1f       	adc	r25, r17
     432:	c2 5a       	subi	r28, 0xA2	; 162
     434:	df 4f       	sbci	r29, 0xFF	; 255
     436:	98 81       	ld	r25, Y
     438:	98 17       	cp	r25, r24
     43a:	d8 f4       	brcc	.+54     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     43c:	82 e0       	ldi	r24, 0x02	; 2
     43e:	cb cf       	rjmp	.-106    	; 0x3d6 <Modbus::validateRequest()+0x42>
     440:	69 85       	ldd	r22, Y+9	; 0x09
     442:	88 85       	ldd	r24, Y+8	; 0x08
     444:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <makeWord(unsigned char, unsigned char)>
     448:	24 e0       	ldi	r18, 0x04	; 4
     44a:	96 95       	lsr	r25
     44c:	87 95       	ror	r24
     44e:	2a 95       	dec	r18
     450:	e1 f7       	brne	.-8      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     452:	ef cf       	rjmp	.-34     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     454:	69 85       	ldd	r22, Y+9	; 0x09
     456:	88 85       	ldd	r24, Y+8	; 0x08
     458:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <makeWord(unsigned char, unsigned char)>
     45c:	ea cf       	rjmp	.-44     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     45e:	69 85       	ldd	r22, Y+9	; 0x09
     460:	88 85       	ldd	r24, Y+8	; 0x08
     462:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <makeWord(unsigned char, unsigned char)>
     466:	8c 01       	movw	r16, r24
     468:	6b 85       	ldd	r22, Y+11	; 0x0b
     46a:	8a 85       	ldd	r24, Y+10	; 0x0a
     46c:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <makeWord(unsigned char, unsigned char)>
     470:	de cf       	rjmp	.-68     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	b0 cf       	rjmp	.-160    	; 0x3d6 <Modbus::validateRequest()+0x42>
     476:	e1 50       	subi	r30, 0x01	; 1
     478:	e0 31       	cpi	r30, 0x10	; 16
     47a:	d8 f7       	brcc	.-10     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     47c:	f0 e0       	ldi	r31, 0x00	; 0
     47e:	ed 5b       	subi	r30, 0xBD	; 189
     480:	fd 4f       	sbci	r31, 0xFD	; 253
     482:	0c 94 9a 0b 	jmp	0x1734	; 0x1734 <__tablejump2__>
     486:	04 02       	muls	r16, r20
     488:	04 02       	muls	r16, r20
     48a:	2f 02       	muls	r18, r31
     48c:	2f 02       	muls	r18, r31
     48e:	20 02       	muls	r18, r16
     490:	2a 02       	muls	r18, r26
     492:	39 02       	muls	r19, r25
     494:	39 02       	muls	r19, r25
     496:	39 02       	muls	r19, r25
     498:	39 02       	muls	r19, r25
     49a:	39 02       	muls	r19, r25
     49c:	39 02       	muls	r19, r25
     49e:	39 02       	muls	r19, r25
     4a0:	39 02       	muls	r19, r25
     4a2:	04 02       	muls	r16, r20
     4a4:	2f 02       	muls	r18, r31

000004a6 <Modbus::buildException(unsigned char)>:
_ZN6Modbus14buildExceptionEh():
     4a6:	fc 01       	movw	r30, r24
     4a8:	87 81       	ldd	r24, Z+7	; 0x07
     4aa:	92 81       	ldd	r25, Z+2	; 0x02
     4ac:	96 83       	std	Z+6, r25	; 0x06
     4ae:	80 58       	subi	r24, 0x80	; 128
     4b0:	87 83       	std	Z+7, r24	; 0x07
     4b2:	60 87       	std	Z+8, r22	; 0x08
     4b4:	ea 5b       	subi	r30, 0xBA	; 186
     4b6:	ff 4f       	sbci	r31, 0xFF	; 255
     4b8:	83 e0       	ldi	r24, 0x03	; 3
     4ba:	80 83       	st	Z, r24
     4bc:	08 95       	ret

000004be <Modbus::process_FC1(unsigned int*, unsigned char)>:
_ZN6Modbus11process_FC1EPjh():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1100
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t Modbus::process_FC1( uint16_t *regs, uint8_t /*u8size*/ )
{
     4be:	4f 92       	push	r4
     4c0:	5f 92       	push	r5
     4c2:	6f 92       	push	r6
     4c4:	7f 92       	push	r7
     4c6:	8f 92       	push	r8
     4c8:	9f 92       	push	r9
     4ca:	af 92       	push	r10
     4cc:	bf 92       	push	r11
     4ce:	cf 92       	push	r12
     4d0:	df 92       	push	r13
     4d2:	ef 92       	push	r14
     4d4:	ff 92       	push	r15
     4d6:	0f 93       	push	r16
     4d8:	1f 93       	push	r17
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	00 d0       	rcall	.+0      	; 0x4e0 <Modbus::process_FC1(unsigned int*, unsigned char)+0x22>
     4e0:	00 d0       	rcall	.+0      	; 0x4e2 <Modbus::process_FC1(unsigned int*, unsigned char)+0x24>
     4e2:	00 d0       	rcall	.+0      	; 0x4e4 <Modbus::process_FC1(unsigned int*, unsigned char)+0x26>
     4e4:	cd b7       	in	r28, 0x3d	; 61
     4e6:	de b7       	in	r29, 0x3e	; 62
     4e8:	9e 83       	std	Y+6, r25	; 0x06
     4ea:	8d 83       	std	Y+5, r24	; 0x05
     4ec:	7b 01       	movw	r14, r22
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1106
    uint8_t u8currentRegister, u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( au8Buffer[ ADD_HI ], au8Buffer[ ADD_LO ] );
     4ee:	dc 01       	movw	r26, r24
     4f0:	19 96       	adiw	r26, 0x09	; 9
     4f2:	6c 91       	ld	r22, X
     4f4:	19 97       	sbiw	r26, 0x09	; 9
     4f6:	18 96       	adiw	r26, 0x08	; 8
     4f8:	8c 91       	ld	r24, X
     4fa:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <makeWord(unsigned char, unsigned char)>
     4fe:	8c 01       	movw	r16, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1107
    uint16_t u16Coilno = word( au8Buffer[ NB_HI ], au8Buffer[ NB_LO ] );
     500:	ed 81       	ldd	r30, Y+5	; 0x05
     502:	fe 81       	ldd	r31, Y+6	; 0x06
     504:	63 85       	ldd	r22, Z+11	; 0x0b
     506:	82 85       	ldd	r24, Z+10	; 0x0a
     508:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <makeWord(unsigned char, unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1110

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
     50c:	9c 01       	movw	r18, r24
     50e:	43 e0       	ldi	r20, 0x03	; 3
     510:	36 95       	lsr	r19
     512:	27 95       	ror	r18
     514:	4a 95       	dec	r20
     516:	e1 f7       	brne	.-8      	; 0x510 <__stack+0x11>
     518:	a2 2f       	mov	r26, r18
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1111
    if (u16Coilno % 8 != 0) u8bytesno ++;
     51a:	bc 01       	movw	r22, r24
     51c:	67 70       	andi	r22, 0x07	; 7
     51e:	77 27       	eor	r23, r23
     520:	61 15       	cp	r22, r1
     522:	71 05       	cpc	r23, r1
     524:	11 f0       	breq	.+4      	; 0x52a <__stack+0x2b>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1111 (discriminator 1)
     526:	a1 e0       	ldi	r26, 0x01	; 1
     528:	a2 0f       	add	r26, r18
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1112
    au8Buffer[ ADD_HI ]  = u8bytesno;
     52a:	ed 81       	ldd	r30, Y+5	; 0x05
     52c:	fe 81       	ldd	r31, Y+6	; 0x06
     52e:	a0 87       	std	Z+8, r26	; 0x08
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1113
    u8BufferSize         = ADD_LO;
     530:	ea 5b       	subi	r30, 0xBA	; 186
     532:	ff 4f       	sbci	r31, 0xFF	; 255
     534:	23 e0       	ldi	r18, 0x03	; 3
     536:	20 83       	st	Z, r18
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1114
    au8Buffer[ u8BufferSize + u8bytesno - 1 ] = 0;
     538:	2d 81       	ldd	r18, Y+5	; 0x05
     53a:	3e 81       	ldd	r19, Y+6	; 0x06
     53c:	2a 0f       	add	r18, r26
     53e:	31 1d       	adc	r19, r1
     540:	d9 01       	movw	r26, r18
     542:	18 96       	adiw	r26, 0x08	; 8
     544:	1c 92       	st	X, r1
     546:	38 01       	movw	r6, r16
     548:	68 0e       	add	r6, r24
     54a:	79 1e       	adc	r7, r25
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1117

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
     54c:	d1 2c       	mov	r13, r1
     54e:	81 2c       	mov	r8, r1
     550:	91 2c       	mov	r9, r1
     552:	54 01       	movw	r10, r8
     554:	83 94       	inc	r8
     556:	c0 80       	ld	r12, Z
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1119 (discriminator 1)

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
     558:	60 16       	cp	r6, r16
     55a:	71 06       	cpc	r7, r17
     55c:	09 f4       	brne	.+2      	; 0x560 <__stack+0x61>
     55e:	40 c0       	rjmp	.+128    	; 0x5e0 <__stack+0xe1>
     560:	d5 01       	movw	r26, r10
     562:	c4 01       	movw	r24, r8
     564:	0d 2c       	mov	r0, r13
     566:	04 c0       	rjmp	.+8      	; 0x570 <__stack+0x71>
     568:	88 0f       	add	r24, r24
     56a:	99 1f       	adc	r25, r25
     56c:	aa 1f       	adc	r26, r26
     56e:	bb 1f       	adc	r27, r27
     570:	0a 94       	dec	r0
     572:	d2 f7       	brpl	.-12     	; 0x568 <__stack+0x69>
     574:	89 83       	std	Y+1, r24	; 0x01
     576:	9a 83       	std	Y+2, r25	; 0x02
     578:	ab 83       	std	Y+3, r26	; 0x03
     57a:	bc 83       	std	Y+4, r27	; 0x04
     57c:	4d 81       	ldd	r20, Y+5	; 0x05
     57e:	5e 81       	ldd	r21, Y+6	; 0x06
     580:	4c 0d       	add	r20, r12
     582:	51 1d       	adc	r21, r1
     584:	da 01       	movw	r26, r20
     586:	16 96       	adiw	r26, 0x06	; 6
     588:	5c 90       	ld	r5, X
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1125
    {
        u16coil = u16StartCoil + u16currentCoil;
        u8currentRegister = (uint8_t) (u16coil / 16);
        u8currentBit = (uint8_t) (u16coil % 16);

        bitWrite(
     58a:	98 01       	movw	r18, r16
     58c:	83 e0       	ldi	r24, 0x03	; 3
     58e:	36 95       	lsr	r19
     590:	27 95       	ror	r18
     592:	8a 95       	dec	r24
     594:	e1 f7       	brne	.-8      	; 0x58e <__stack+0x8f>
     596:	2e 7f       	andi	r18, 0xFE	; 254
     598:	31 70       	andi	r19, 0x01	; 1
     59a:	2e 0d       	add	r18, r14
     59c:	3f 1d       	adc	r19, r15
     59e:	d9 01       	movw	r26, r18
     5a0:	2d 91       	ld	r18, X+
     5a2:	3c 91       	ld	r19, X
     5a4:	b0 2f       	mov	r27, r16
     5a6:	bf 70       	andi	r27, 0x0F	; 15
     5a8:	02 c0       	rjmp	.+4      	; 0x5ae <__stack+0xaf>
     5aa:	36 95       	lsr	r19
     5ac:	27 95       	ror	r18
     5ae:	ba 95       	dec	r27
     5b0:	e2 f7       	brpl	.-8      	; 0x5aa <__stack+0xab>
     5b2:	89 81       	ldd	r24, Y+1	; 0x01
     5b4:	20 ff       	sbrs	r18, 0
     5b6:	0e c0       	rjmp	.+28     	; 0x5d4 <__stack+0xd5>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1125 (discriminator 1)
     5b8:	85 29       	or	r24, r5
     5ba:	da 01       	movw	r26, r20
     5bc:	16 96       	adiw	r26, 0x06	; 6
     5be:	8c 93       	st	X, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1129
            au8Buffer[ u8BufferSize ],
            u8bitsno,
            bitRead( regs[ u8currentRegister ], u8currentBit ) );
        u8bitsno ++;
     5c0:	d3 94       	inc	r13
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1131

        if (u8bitsno > 7)
     5c2:	b7 e0       	ldi	r27, 0x07	; 7
     5c4:	bd 15       	cp	r27, r13
     5c6:	18 f4       	brcc	.+6      	; 0x5ce <__stack+0xcf>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1134
        {
            u8bitsno = 0;
            u8BufferSize++;
     5c8:	c3 94       	inc	r12
     5ca:	c0 82       	st	Z, r12
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1133
            bitRead( regs[ u8currentRegister ], u8currentBit ) );
        u8bitsno ++;

        if (u8bitsno > 7)
        {
            u8bitsno = 0;
     5cc:	d1 2c       	mov	r13, r1
     5ce:	0f 5f       	subi	r16, 0xFF	; 255
     5d0:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1119 (discriminator 2)
    au8Buffer[ u8BufferSize + u8bytesno - 1 ] = 0;

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
     5d2:	c1 cf       	rjmp	.-126    	; 0x556 <__stack+0x57>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1125 (discriminator 2)
    {
        u16coil = u16StartCoil + u16currentCoil;
        u8currentRegister = (uint8_t) (u16coil / 16);
        u8currentBit = (uint8_t) (u16coil % 16);

        bitWrite(
     5d4:	80 95       	com	r24
     5d6:	58 22       	and	r5, r24
     5d8:	da 01       	movw	r26, r20
     5da:	16 96       	adiw	r26, 0x06	; 6
     5dc:	5c 92       	st	X, r5
     5de:	f0 cf       	rjmp	.-32     	; 0x5c0 <__stack+0xc1>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1139
            u8BufferSize++;
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) u8BufferSize ++;
     5e0:	67 2b       	or	r22, r23
     5e2:	11 f0       	breq	.+4      	; 0x5e8 <__stack+0xe9>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1139 (discriminator 1)
     5e4:	c3 94       	inc	r12
     5e6:	c0 82       	st	Z, r12
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1140
    u8CopyBufferSize = u8BufferSize +2;
     5e8:	10 81       	ld	r17, Z
     5ea:	1e 5f       	subi	r17, 0xFE	; 254
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1141
    sendTxBuffer();
     5ec:	8d 81       	ldd	r24, Y+5	; 0x05
     5ee:	9e 81       	ldd	r25, Y+6	; 0x06
     5f0:	0e 94 36 01 	call	0x26c	; 0x26c <Modbus::sendTxBuffer()>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1143
    return u8CopyBufferSize;
}
     5f4:	81 2f       	mov	r24, r17
     5f6:	26 96       	adiw	r28, 0x06	; 6
     5f8:	0f b6       	in	r0, 0x3f	; 63
     5fa:	f8 94       	cli
     5fc:	de bf       	out	0x3e, r29	; 62
     5fe:	0f be       	out	0x3f, r0	; 63
     600:	cd bf       	out	0x3d, r28	; 61
     602:	df 91       	pop	r29
     604:	cf 91       	pop	r28
     606:	1f 91       	pop	r17
     608:	0f 91       	pop	r16
     60a:	ff 90       	pop	r15
     60c:	ef 90       	pop	r14
     60e:	df 90       	pop	r13
     610:	cf 90       	pop	r12
     612:	bf 90       	pop	r11
     614:	af 90       	pop	r10
     616:	9f 90       	pop	r9
     618:	8f 90       	pop	r8
     61a:	7f 90       	pop	r7
     61c:	6f 90       	pop	r6
     61e:	5f 90       	pop	r5
     620:	4f 90       	pop	r4
     622:	08 95       	ret

00000624 <Modbus::process_FC3(unsigned int*, unsigned char)>:
_ZN6Modbus11process_FC3EPjh():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1154
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t Modbus::process_FC3( uint16_t *regs, uint8_t /*u8size*/ )
{
     624:	ef 92       	push	r14
     626:	ff 92       	push	r15
     628:	0f 93       	push	r16
     62a:	1f 93       	push	r17
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
     630:	ec 01       	movw	r28, r24
     632:	8b 01       	movw	r16, r22
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1156

    uint8_t u8StartAdd = word( au8Buffer[ ADD_HI ], au8Buffer[ ADD_LO ] );
     634:	69 85       	ldd	r22, Y+9	; 0x09
     636:	88 85       	ldd	r24, Y+8	; 0x08
     638:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <makeWord(unsigned char, unsigned char)>
     63c:	e8 2e       	mov	r14, r24
     63e:	f8 2e       	mov	r15, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1157
    uint8_t u8regsno = word( au8Buffer[ NB_HI ], au8Buffer[ NB_LO ] );
     640:	6b 85       	ldd	r22, Y+11	; 0x0b
     642:	8a 85       	ldd	r24, Y+10	; 0x0a
     644:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <makeWord(unsigned char, unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1161
    uint8_t u8CopyBufferSize;
    uint8_t i;

    au8Buffer[ 2 ]       = u8regsno * 2;
     648:	98 2f       	mov	r25, r24
     64a:	99 0f       	add	r25, r25
     64c:	98 87       	std	Y+8, r25	; 0x08
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1162
    u8BufferSize         = 3;
     64e:	9e 01       	movw	r18, r28
     650:	2a 5b       	subi	r18, 0xBA	; 186
     652:	3f 4f       	sbci	r19, 0xFF	; 255
     654:	93 e0       	ldi	r25, 0x03	; 3
     656:	d9 01       	movw	r26, r18
     658:	9c 93       	st	X, r25
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1164

    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
     65a:	8e 0d       	add	r24, r14
     65c:	99 27       	eor	r25, r25
     65e:	99 1f       	adc	r25, r25
     660:	f9 01       	movw	r30, r18
     662:	70 81       	ld	r23, Z
     664:	52 e0       	ldi	r21, 0x02	; 2
     666:	e5 2e       	mov	r14, r21
     668:	e7 0e       	add	r14, r23
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1164 (discriminator 3)
     66a:	af 2d       	mov	r26, r15
     66c:	b0 e0       	ldi	r27, 0x00	; 0
     66e:	a8 17       	cp	r26, r24
     670:	b9 07       	cpc	r27, r25
     672:	cc f4       	brge	.+50     	; 0x6a6 <Modbus::process_FC3(unsigned int*, unsigned char)+0x82>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1166 (discriminator 2)
    {
        au8Buffer[ u8BufferSize ] = highByte(regs[i]);
     674:	aa 0f       	add	r26, r26
     676:	bb 1f       	adc	r27, r27
     678:	a0 0f       	add	r26, r16
     67a:	b1 1f       	adc	r27, r17
     67c:	ae 01       	movw	r20, r28
     67e:	47 0f       	add	r20, r23
     680:	51 1d       	adc	r21, r1
     682:	11 96       	adiw	r26, 0x01	; 1
     684:	6c 91       	ld	r22, X
     686:	11 97       	sbiw	r26, 0x01	; 1
     688:	fa 01       	movw	r30, r20
     68a:	66 83       	std	Z+6, r22	; 0x06
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1167 (discriminator 2)
        u8BufferSize++;
     68c:	41 e0       	ldi	r20, 0x01	; 1
     68e:	47 0f       	add	r20, r23
     690:	f9 01       	movw	r30, r18
     692:	40 83       	st	Z, r20
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1168 (discriminator 2)
        au8Buffer[ u8BufferSize ] = lowByte(regs[i]);
     694:	fe 01       	movw	r30, r28
     696:	e4 0f       	add	r30, r20
     698:	f1 1d       	adc	r31, r1
     69a:	4c 91       	ld	r20, X
     69c:	46 83       	std	Z+6, r20	; 0x06
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1169 (discriminator 2)
        u8BufferSize++;
     69e:	d9 01       	movw	r26, r18
     6a0:	ec 92       	st	X, r14
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1164 (discriminator 2)
    uint8_t i;

    au8Buffer[ 2 ]       = u8regsno * 2;
    u8BufferSize         = 3;

    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
     6a2:	f3 94       	inc	r15
     6a4:	dd cf       	rjmp	.-70     	; 0x660 <Modbus::process_FC3(unsigned int*, unsigned char)+0x3c>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1172
        u8BufferSize++;
        au8Buffer[ u8BufferSize ] = lowByte(regs[i]);
        u8BufferSize++;
    }
    u8CopyBufferSize = u8BufferSize +2;
    sendTxBuffer();
     6a6:	ce 01       	movw	r24, r28
     6a8:	0e 94 36 01 	call	0x26c	; 0x26c <Modbus::sendTxBuffer()>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1175

    return u8CopyBufferSize;
}
     6ac:	8e 2d       	mov	r24, r14
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	1f 91       	pop	r17
     6b4:	0f 91       	pop	r16
     6b6:	ff 90       	pop	r15
     6b8:	ef 90       	pop	r14
     6ba:	08 95       	ret

000006bc <Modbus::process_FC5(unsigned int*, unsigned char)>:
_ZN6Modbus11process_FC5EPjh():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1186
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t Modbus::process_FC5( uint16_t *regs, uint8_t /*u8size*/ )
{
     6bc:	0f 93       	push	r16
     6be:	1f 93       	push	r17
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
     6c4:	ec 01       	movw	r28, r24
     6c6:	8b 01       	movw	r16, r22
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1189
    uint8_t u8currentRegister, u8currentBit;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( au8Buffer[ ADD_HI ], au8Buffer[ ADD_LO ] );
     6c8:	69 85       	ldd	r22, Y+9	; 0x09
     6ca:	88 85       	ldd	r24, Y+8	; 0x08
     6cc:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <makeWord(unsigned char, unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1193

    // point to the register and its bit
    u8currentRegister = (uint8_t) (u16coil / 16);
    u8currentBit = (uint8_t) (u16coil % 16);
     6d0:	48 2f       	mov	r20, r24
     6d2:	4f 70       	andi	r20, 0x0F	; 15
     6d4:	23 e0       	ldi	r18, 0x03	; 3
     6d6:	96 95       	lsr	r25
     6d8:	87 95       	ror	r24
     6da:	2a 95       	dec	r18
     6dc:	e1 f7       	brne	.-8      	; 0x6d6 <Modbus::process_FC5(unsigned int*, unsigned char)+0x1a>
     6de:	8e 7f       	andi	r24, 0xFE	; 254
     6e0:	91 70       	andi	r25, 0x01	; 1
     6e2:	f8 01       	movw	r30, r16
     6e4:	e8 0f       	add	r30, r24
     6e6:	f9 1f       	adc	r31, r25
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1196

    // write to coil
    bitWrite(
     6e8:	8a 85       	ldd	r24, Y+10	; 0x0a
     6ea:	20 81       	ld	r18, Z
     6ec:	31 81       	ldd	r19, Z+1	; 0x01
     6ee:	8f 3f       	cpi	r24, 0xFF	; 255
     6f0:	e9 f4       	brne	.+58     	; 0x72c <Modbus::process_FC5(unsigned int*, unsigned char)+0x70>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1196 (discriminator 1)
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	a0 e0       	ldi	r26, 0x00	; 0
     6f8:	b0 e0       	ldi	r27, 0x00	; 0
     6fa:	04 c0       	rjmp	.+8      	; 0x704 <Modbus::process_FC5(unsigned int*, unsigned char)+0x48>
     6fc:	88 0f       	add	r24, r24
     6fe:	99 1f       	adc	r25, r25
     700:	aa 1f       	adc	r26, r26
     702:	bb 1f       	adc	r27, r27
     704:	4a 95       	dec	r20
     706:	d2 f7       	brpl	.-12     	; 0x6fc <Modbus::process_FC5(unsigned int*, unsigned char)+0x40>
     708:	82 2b       	or	r24, r18
     70a:	93 2b       	or	r25, r19
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1196 (discriminator 2)
     70c:	91 83       	std	Z+1, r25	; 0x01
     70e:	80 83       	st	Z, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1203 (discriminator 2)
        u8currentBit,
        au8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    u8BufferSize = 6;
     710:	fe 01       	movw	r30, r28
     712:	ea 5b       	subi	r30, 0xBA	; 186
     714:	ff 4f       	sbci	r31, 0xFF	; 255
     716:	86 e0       	ldi	r24, 0x06	; 6
     718:	80 83       	st	Z, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1205 (discriminator 2)
    u8CopyBufferSize = u8BufferSize +2;
    sendTxBuffer();
     71a:	ce 01       	movw	r24, r28
     71c:	0e 94 36 01 	call	0x26c	; 0x26c <Modbus::sendTxBuffer()>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1208 (discriminator 2)

    return u8CopyBufferSize;
}
     720:	88 e0       	ldi	r24, 0x08	; 8
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	1f 91       	pop	r17
     728:	0f 91       	pop	r16
     72a:	08 95       	ret
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1196 (discriminator 2)
    // point to the register and its bit
    u8currentRegister = (uint8_t) (u16coil / 16);
    u8currentBit = (uint8_t) (u16coil % 16);

    // write to coil
    bitWrite(
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	a0 e0       	ldi	r26, 0x00	; 0
     732:	b0 e0       	ldi	r27, 0x00	; 0
     734:	04 c0       	rjmp	.+8      	; 0x73e <Modbus::process_FC5(unsigned int*, unsigned char)+0x82>
     736:	88 0f       	add	r24, r24
     738:	99 1f       	adc	r25, r25
     73a:	aa 1f       	adc	r26, r26
     73c:	bb 1f       	adc	r27, r27
     73e:	4a 95       	dec	r20
     740:	d2 f7       	brpl	.-12     	; 0x736 <Modbus::process_FC5(unsigned int*, unsigned char)+0x7a>
     742:	80 95       	com	r24
     744:	90 95       	com	r25
     746:	82 23       	and	r24, r18
     748:	93 23       	and	r25, r19
     74a:	e0 cf       	rjmp	.-64     	; 0x70c <Modbus::process_FC5(unsigned int*, unsigned char)+0x50>

0000074c <Modbus::process_FC6(unsigned int*, unsigned char)>:
_ZN6Modbus11process_FC6EPjh():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1219
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t Modbus::process_FC6( uint16_t *regs, uint8_t /*u8size*/ )
{
     74c:	ef 92       	push	r14
     74e:	ff 92       	push	r15
     750:	0f 93       	push	r16
     752:	1f 93       	push	r17
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	ec 01       	movw	r28, r24
     75a:	7b 01       	movw	r14, r22
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1221

    uint8_t u8add = word( au8Buffer[ ADD_HI ], au8Buffer[ ADD_LO ] );
     75c:	69 85       	ldd	r22, Y+9	; 0x09
     75e:	88 85       	ldd	r24, Y+8	; 0x08
     760:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <makeWord(unsigned char, unsigned char)>
     764:	8c 01       	movw	r16, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1223
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( au8Buffer[ NB_HI ], au8Buffer[ NB_LO ] );
     766:	6b 85       	ldd	r22, Y+11	; 0x0b
     768:	8a 85       	ldd	r24, Y+10	; 0x0a
     76a:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <makeWord(unsigned char, unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1225

    regs[ u8add ] = u16val;
     76e:	11 27       	eor	r17, r17
     770:	00 0f       	add	r16, r16
     772:	11 1f       	adc	r17, r17
     774:	0e 0d       	add	r16, r14
     776:	1f 1d       	adc	r17, r15
     778:	f8 01       	movw	r30, r16
     77a:	91 83       	std	Z+1, r25	; 0x01
     77c:	80 83       	st	Z, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1228

    // keep the same header
    u8BufferSize         = RESPONSE_SIZE;
     77e:	fe 01       	movw	r30, r28
     780:	ea 5b       	subi	r30, 0xBA	; 186
     782:	ff 4f       	sbci	r31, 0xFF	; 255
     784:	86 e0       	ldi	r24, 0x06	; 6
     786:	80 83       	st	Z, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1231

    u8CopyBufferSize = u8BufferSize +2;
    sendTxBuffer();
     788:	ce 01       	movw	r24, r28
     78a:	0e 94 36 01 	call	0x26c	; 0x26c <Modbus::sendTxBuffer()>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1234

    return u8CopyBufferSize;
}
     78e:	88 e0       	ldi	r24, 0x08	; 8
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	1f 91       	pop	r17
     796:	0f 91       	pop	r16
     798:	ff 90       	pop	r15
     79a:	ef 90       	pop	r14
     79c:	08 95       	ret

0000079e <Modbus::process_FC15(unsigned int*, unsigned char)>:
_ZN6Modbus12process_FC15EPjh():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1245
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t Modbus::process_FC15( uint16_t *regs, uint8_t /*u8size*/ )
{
     79e:	6f 92       	push	r6
     7a0:	7f 92       	push	r7
     7a2:	8f 92       	push	r8
     7a4:	9f 92       	push	r9
     7a6:	af 92       	push	r10
     7a8:	bf 92       	push	r11
     7aa:	cf 92       	push	r12
     7ac:	df 92       	push	r13
     7ae:	ef 92       	push	r14
     7b0:	ff 92       	push	r15
     7b2:	0f 93       	push	r16
     7b4:	1f 93       	push	r17
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
     7ba:	ec 01       	movw	r28, r24
     7bc:	7b 01       	movw	r14, r22
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1252
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    boolean bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( au8Buffer[ ADD_HI ], au8Buffer[ ADD_LO ] );
     7be:	69 85       	ldd	r22, Y+9	; 0x09
     7c0:	88 85       	ldd	r24, Y+8	; 0x08
     7c2:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <makeWord(unsigned char, unsigned char)>
     7c6:	8c 01       	movw	r16, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1253
    uint16_t u16Coilno = word( au8Buffer[ NB_HI ], au8Buffer[ NB_LO ] );
     7c8:	6b 85       	ldd	r22, Y+11	; 0x0b
     7ca:	8a 85       	ldd	r24, Y+10	; 0x0a
     7cc:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <makeWord(unsigned char, unsigned char)>
     7d0:	80 0f       	add	r24, r16
     7d2:	91 1f       	adc	r25, r17
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1257


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
     7d4:	d1 2c       	mov	r13, r1
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1258
    u8frameByte = 7;
     7d6:	37 e0       	ldi	r19, 0x07	; 7
     7d8:	c3 2e       	mov	r12, r19
     7da:	81 2c       	mov	r8, r1
     7dc:	91 2c       	mov	r9, r1
     7de:	54 01       	movw	r10, r8
     7e0:	83 94       	inc	r8
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1259 (discriminator 1)
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
     7e2:	80 17       	cp	r24, r16
     7e4:	91 07       	cpc	r25, r17
     7e6:	c1 f1       	breq	.+112    	; 0x858 <Modbus::process_FC15(unsigned int*, unsigned char)+0xba>
     7e8:	f8 01       	movw	r30, r16
     7ea:	23 e0       	ldi	r18, 0x03	; 3
     7ec:	f6 95       	lsr	r31
     7ee:	e7 95       	ror	r30
     7f0:	2a 95       	dec	r18
     7f2:	e1 f7       	brne	.-8      	; 0x7ec <Modbus::process_FC15(unsigned int*, unsigned char)+0x4e>
     7f4:	ee 7f       	andi	r30, 0xFE	; 254
     7f6:	f1 70       	andi	r31, 0x01	; 1
     7f8:	ee 0d       	add	r30, r14
     7fa:	ff 1d       	adc	r31, r15
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1264
    {

        u16coil = u16StartCoil + u16currentCoil;
        u8currentRegister = (uint8_t) (u16coil / 16);
        u8currentBit = (uint8_t) (u16coil % 16);
     7fc:	20 2f       	mov	r18, r16
     7fe:	2f 70       	andi	r18, 0x0F	; 15
     800:	b5 01       	movw	r22, r10
     802:	a4 01       	movw	r20, r8
     804:	04 c0       	rjmp	.+8      	; 0x80e <Modbus::process_FC15(unsigned int*, unsigned char)+0x70>
     806:	44 0f       	add	r20, r20
     808:	55 1f       	adc	r21, r21
     80a:	66 1f       	adc	r22, r22
     80c:	77 1f       	adc	r23, r23
     80e:	2a 95       	dec	r18
     810:	d2 f7       	brpl	.-12     	; 0x806 <Modbus::process_FC15(unsigned int*, unsigned char)+0x68>
     812:	60 80       	ld	r6, Z
     814:	71 80       	ldd	r7, Z+1	; 0x01
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1266

        bTemp = bitRead(
     816:	9e 01       	movw	r18, r28
     818:	2c 0d       	add	r18, r12
     81a:	31 1d       	adc	r19, r1
     81c:	d9 01       	movw	r26, r18
     81e:	16 96       	adiw	r26, 0x06	; 6
     820:	2c 91       	ld	r18, X
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	0d 2c       	mov	r0, r13
     826:	02 c0       	rjmp	.+4      	; 0x82c <Modbus::process_FC15(unsigned int*, unsigned char)+0x8e>
     828:	35 95       	asr	r19
     82a:	27 95       	ror	r18
     82c:	0a 94       	dec	r0
     82e:	e2 f7       	brpl	.-8      	; 0x828 <Modbus::process_FC15(unsigned int*, unsigned char)+0x8a>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1270
                    au8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
     830:	20 ff       	sbrs	r18, 0
     832:	0d c0       	rjmp	.+26     	; 0x84e <Modbus::process_FC15(unsigned int*, unsigned char)+0xb0>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1270 (discriminator 1)
     834:	46 29       	or	r20, r6
     836:	57 29       	or	r21, r7
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1270 (discriminator 2)
     838:	51 83       	std	Z+1, r21	; 0x01
     83a:	40 83       	st	Z, r20
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1275 (discriminator 2)
            regs[ u8currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
     83c:	d3 94       	inc	r13
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1277 (discriminator 2)

        if (u8bitsno > 7)
     83e:	b7 e0       	ldi	r27, 0x07	; 7
     840:	bd 15       	cp	r27, r13
     842:	10 f4       	brcc	.+4      	; 0x848 <Modbus::process_FC15(unsigned int*, unsigned char)+0xaa>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1280
        {
            u8bitsno = 0;
            u8frameByte++;
     844:	c3 94       	inc	r12
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1279

        u8bitsno ++;

        if (u8bitsno > 7)
        {
            u8bitsno = 0;
     846:	d1 2c       	mov	r13, r1
     848:	0f 5f       	subi	r16, 0xFF	; 255
     84a:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1259 (discriminator 2)


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
    u8frameByte = 7;
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
     84c:	ca cf       	rjmp	.-108    	; 0x7e2 <Modbus::process_FC15(unsigned int*, unsigned char)+0x44>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1270 (discriminator 2)

        bTemp = bitRead(
                    au8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
     84e:	40 95       	com	r20
     850:	50 95       	com	r21
     852:	46 21       	and	r20, r6
     854:	57 21       	and	r21, r7
     856:	f0 cf       	rjmp	.-32     	; 0x838 <Modbus::process_FC15(unsigned int*, unsigned char)+0x9a>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1286
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    u8BufferSize         = 6;
     858:	fe 01       	movw	r30, r28
     85a:	ea 5b       	subi	r30, 0xBA	; 186
     85c:	ff 4f       	sbci	r31, 0xFF	; 255
     85e:	86 e0       	ldi	r24, 0x06	; 6
     860:	80 83       	st	Z, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1288
    u8CopyBufferSize = u8BufferSize +2;
    sendTxBuffer();
     862:	ce 01       	movw	r24, r28
     864:	0e 94 36 01 	call	0x26c	; 0x26c <Modbus::sendTxBuffer()>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1290
    return u8CopyBufferSize;
}
     868:	88 e0       	ldi	r24, 0x08	; 8
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	1f 91       	pop	r17
     870:	0f 91       	pop	r16
     872:	ff 90       	pop	r15
     874:	ef 90       	pop	r14
     876:	df 90       	pop	r13
     878:	cf 90       	pop	r12
     87a:	bf 90       	pop	r11
     87c:	af 90       	pop	r10
     87e:	9f 90       	pop	r9
     880:	8f 90       	pop	r8
     882:	7f 90       	pop	r7
     884:	6f 90       	pop	r6
     886:	08 95       	ret

00000888 <Modbus::process_FC16(unsigned int*, unsigned char)>:
_ZN6Modbus12process_FC16EPjh():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1301
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t Modbus::process_FC16( uint16_t *regs, uint8_t /*u8size*/ )
{
     888:	af 92       	push	r10
     88a:	bf 92       	push	r11
     88c:	cf 92       	push	r12
     88e:	df 92       	push	r13
     890:	ef 92       	push	r14
     892:	ff 92       	push	r15
     894:	0f 93       	push	r16
     896:	1f 93       	push	r17
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
     89c:	ec 01       	movw	r28, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1302
    uint8_t u8StartAdd = au8Buffer[ ADD_HI ] << 8 | au8Buffer[ ADD_LO ];
     89e:	89 85       	ldd	r24, Y+9	; 0x09
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1303
    uint8_t u8regsno = au8Buffer[ NB_HI ] << 8 | au8Buffer[ NB_LO ];
     8a0:	ab 84       	ldd	r10, Y+11	; 0x0b
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1309
    uint8_t u8CopyBufferSize;
    uint8_t i;
    uint16_t temp;

    // build header
    au8Buffer[ NB_HI ]   = 0;
     8a2:	1a 86       	std	Y+10, r1	; 0x0a
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1311
    au8Buffer[ NB_LO ]   = u8regsno;
    u8BufferSize         = RESPONSE_SIZE;
     8a4:	7e 01       	movw	r14, r28
     8a6:	96 e4       	ldi	r25, 0x46	; 70
     8a8:	e9 0e       	add	r14, r25
     8aa:	f1 1c       	adc	r15, r1
     8ac:	96 e0       	ldi	r25, 0x06	; 6
     8ae:	f7 01       	movw	r30, r14
     8b0:	90 83       	st	Z, r25
     8b2:	8e 01       	movw	r16, r28
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	88 0f       	add	r24, r24
     8b8:	99 1f       	adc	r25, r25
     8ba:	6b 01       	movw	r12, r22
     8bc:	c8 0e       	add	r12, r24
     8be:	d9 1e       	adc	r13, r25
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1314

    // write registers
    for (i = 0; i < u8regsno; i++)
     8c0:	b1 2c       	mov	r11, r1
     8c2:	0e 5f       	subi	r16, 0xFE	; 254
     8c4:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1314 (discriminator 3)
     8c6:	ab 14       	cp	r10, r11
     8c8:	59 f0       	breq	.+22     	; 0x8e0 <Modbus::process_FC16(unsigned int*, unsigned char)+0x58>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1316 (discriminator 2)
    {
        temp = word(
     8ca:	f8 01       	movw	r30, r16
     8cc:	64 85       	ldd	r22, Z+12	; 0x0c
     8ce:	83 85       	ldd	r24, Z+11	; 0x0b
     8d0:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <makeWord(unsigned char, unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1320 (discriminator 2)
                   au8Buffer[ (BYTE_CNT + 1) + i * 2 ],
                   au8Buffer[ (BYTE_CNT + 2) + i * 2 ]);

        regs[ u8StartAdd + i ] = temp;
     8d4:	f6 01       	movw	r30, r12
     8d6:	81 93       	st	Z+, r24
     8d8:	91 93       	st	Z+, r25
     8da:	6f 01       	movw	r12, r30
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1314 (discriminator 2)
    au8Buffer[ NB_HI ]   = 0;
    au8Buffer[ NB_LO ]   = u8regsno;
    u8BufferSize         = RESPONSE_SIZE;

    // write registers
    for (i = 0; i < u8regsno; i++)
     8dc:	b3 94       	inc	r11
     8de:	f1 cf       	rjmp	.-30     	; 0x8c2 <Modbus::process_FC16(unsigned int*, unsigned char)+0x3a>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1322
                   au8Buffer[ (BYTE_CNT + 1) + i * 2 ],
                   au8Buffer[ (BYTE_CNT + 2) + i * 2 ]);

        regs[ u8StartAdd + i ] = temp;
    }
    u8CopyBufferSize = u8BufferSize +2;
     8e0:	f7 01       	movw	r30, r14
     8e2:	10 81       	ld	r17, Z
     8e4:	1e 5f       	subi	r17, 0xFE	; 254
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1323
    sendTxBuffer();
     8e6:	ce 01       	movw	r24, r28
     8e8:	0e 94 36 01 	call	0x26c	; 0x26c <Modbus::sendTxBuffer()>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1326

    return u8CopyBufferSize;
}
     8ec:	81 2f       	mov	r24, r17
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	1f 91       	pop	r17
     8f4:	0f 91       	pop	r16
     8f6:	ff 90       	pop	r15
     8f8:	ef 90       	pop	r14
     8fa:	df 90       	pop	r13
     8fc:	cf 90       	pop	r12
     8fe:	bf 90       	pop	r11
     900:	af 90       	pop	r10
     902:	08 95       	ret

00000904 <Modbus::poll(unsigned int*, unsigned char)>:
_ZN6Modbus4pollEPjh():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:723
 * @param u8size  size of the register table
 * @return 0 if no query, 1..4 if communication error, >4 if correct query processed
 * @ingroup loop
 */
int8_t Modbus::poll( uint16_t *regs, uint8_t u8size )
{
     904:	8f 92       	push	r8
     906:	9f 92       	push	r9
     908:	af 92       	push	r10
     90a:	bf 92       	push	r11
     90c:	cf 92       	push	r12
     90e:	df 92       	push	r13
     910:	ef 92       	push	r14
     912:	ff 92       	push	r15
     914:	0f 93       	push	r16
     916:	1f 93       	push	r17
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	ec 01       	movw	r28, r24
     91e:	8b 01       	movw	r16, r22
     920:	f4 2e       	mov	r15, r20
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:725

    au16regs = regs;
     922:	fc 01       	movw	r30, r24
     924:	e8 5b       	subi	r30, 0xB8	; 184
     926:	ff 4f       	sbci	r31, 0xFF	; 255
     928:	71 83       	std	Z+1, r23	; 0x01
     92a:	60 83       	st	Z, r22
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:726
    u8regsize = u8size;
     92c:	76 96       	adiw	r30, 0x16	; 22
     92e:	40 83       	st	Z, r20
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:731
	uint8_t u8current;


    // check if there is any incoming frame
    u8current = port->available();
     930:	88 81       	ld	r24, Y
     932:	99 81       	ldd	r25, Y+1	; 0x01
     934:	dc 01       	movw	r26, r24
     936:	ed 91       	ld	r30, X+
     938:	fc 91       	ld	r31, X
     93a:	00 84       	ldd	r0, Z+8	; 0x08
     93c:	f1 85       	ldd	r31, Z+9	; 0x09
     93e:	e0 2d       	mov	r30, r0
     940:	09 95       	icall
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:733

    if (u8current == 0) return 0;
     942:	81 11       	cpse	r24, r1
     944:	0f c0       	rjmp	.+30     	; 0x964 <Modbus::poll(unsigned int*, unsigned char)+0x60>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:740
    // check T35 after frame end or still no frame end
    if (u8current != u8lastRec)
    {
        u8lastRec = u8current;
        u32time = millis();
        return 0;
     946:	e1 2c       	mov	r14, r1
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:795
        break;
    default:
        break;
    }
    return i8state;
}
     948:	8e 2d       	mov	r24, r14
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	ff 90       	pop	r15
     954:	ef 90       	pop	r14
     956:	df 90       	pop	r13
     958:	cf 90       	pop	r12
     95a:	bf 90       	pop	r11
     95c:	af 90       	pop	r10
     95e:	9f 90       	pop	r9
     960:	8f 90       	pop	r8
     962:	08 95       	ret
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:736
    u8current = port->available();

    if (u8current == 0) return 0;

    // check T35 after frame end or still no frame end
    if (u8current != u8lastRec)
     964:	6e 01       	movw	r12, r28
     966:	b7 e4       	ldi	r27, 0x47	; 71
     968:	cb 0e       	add	r12, r27
     96a:	d1 1c       	adc	r13, r1
     96c:	f6 01       	movw	r30, r12
     96e:	90 81       	ld	r25, Z
     970:	9e 01       	movw	r18, r28
     972:	2e 5a       	subi	r18, 0xAE	; 174
     974:	3f 4f       	sbci	r19, 0xFF	; 255
     976:	59 01       	movw	r10, r18
     978:	98 17       	cp	r25, r24
     97a:	51 f0       	breq	.+20     	; 0x990 <Modbus::poll(unsigned int*, unsigned char)+0x8c>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:738
    {
        u8lastRec = u8current;
     97c:	80 83       	st	Z, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:739
        u32time = millis();
     97e:	0e 94 2d 08 	call	0x105a	; 0x105a <millis>
     982:	d5 01       	movw	r26, r10
     984:	6d 93       	st	X+, r22
     986:	7d 93       	st	X+, r23
     988:	8d 93       	st	X+, r24
     98a:	9c 93       	st	X, r25
     98c:	13 97       	sbiw	r26, 0x03	; 3
     98e:	db cf       	rjmp	.-74     	; 0x946 <Modbus::poll(unsigned int*, unsigned char)+0x42>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:742
        return 0;
    }
    if ((unsigned long)(millis() -u32time) < (unsigned long)T35) return 0;
     990:	0e 94 2d 08 	call	0x105a	; 0x105a <millis>
     994:	f5 01       	movw	r30, r10
     996:	80 80       	ld	r8, Z
     998:	91 80       	ldd	r9, Z+1	; 0x01
     99a:	a2 80       	ldd	r10, Z+2	; 0x02
     99c:	b3 80       	ldd	r11, Z+3	; 0x03
     99e:	68 19       	sub	r22, r8
     9a0:	79 09       	sbc	r23, r9
     9a2:	8a 09       	sbc	r24, r10
     9a4:	9b 09       	sbc	r25, r11
     9a6:	65 30       	cpi	r22, 0x05	; 5
     9a8:	71 05       	cpc	r23, r1
     9aa:	81 05       	cpc	r24, r1
     9ac:	91 05       	cpc	r25, r1
     9ae:	58 f2       	brcs	.-106    	; 0x946 <Modbus::poll(unsigned int*, unsigned char)+0x42>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:744

    u8lastRec = 0;
     9b0:	d6 01       	movw	r26, r12
     9b2:	1c 92       	st	X, r1
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:745
    int8_t i8state = getRxBuffer();
     9b4:	ce 01       	movw	r24, r28
     9b6:	0e 94 ca 00 	call	0x194	; 0x194 <Modbus::getRxBuffer()>
     9ba:	e8 2e       	mov	r14, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:746
    u8lastError = i8state;
     9bc:	8d 83       	std	Y+5, r24	; 0x05
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:747
    if (i8state < 7) return i8state;
     9be:	b6 e0       	ldi	r27, 0x06	; 6
     9c0:	b8 17       	cp	r27, r24
     9c2:	14 f6       	brge	.-124    	; 0x948 <Modbus::poll(unsigned int*, unsigned char)+0x44>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:750

    // check slave id
    if (au8Buffer[ ID ] != u8id) return 0;
     9c4:	9e 81       	ldd	r25, Y+6	; 0x06
     9c6:	8a 81       	ldd	r24, Y+2	; 0x02
     9c8:	98 13       	cpse	r25, r24
     9ca:	bd cf       	rjmp	.-134    	; 0x946 <Modbus::poll(unsigned int*, unsigned char)+0x42>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:753

    // validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest();
     9cc:	ce 01       	movw	r24, r28
     9ce:	0e 94 ca 01 	call	0x394	; 0x394 <Modbus::validateRequest()>
     9d2:	d8 2e       	mov	r13, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:754
    if (u8exception > 0)
     9d4:	88 23       	and	r24, r24
     9d6:	69 f0       	breq	.+26     	; 0x9f2 <Modbus::poll(unsigned int*, unsigned char)+0xee>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:756
    {
        if (u8exception != NO_REPLY)
     9d8:	ef ef       	ldi	r30, 0xFF	; 255
     9da:	8e 17       	cp	r24, r30
     9dc:	39 f0       	breq	.+14     	; 0x9ec <Modbus::poll(unsigned int*, unsigned char)+0xe8>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:758
        {
            buildException( u8exception );
     9de:	68 2f       	mov	r22, r24
     9e0:	ce 01       	movw	r24, r28
     9e2:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Modbus::buildException(unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:759
            sendTxBuffer();
     9e6:	ce 01       	movw	r24, r28
     9e8:	0e 94 36 01 	call	0x26c	; 0x26c <Modbus::sendTxBuffer()>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:761
        }
        u8lastError = u8exception;
     9ec:	dd 82       	std	Y+5, r13	; 0x05
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:762
        return u8exception;
     9ee:	ed 2c       	mov	r14, r13
     9f0:	ab cf       	rjmp	.-170    	; 0x948 <Modbus::poll(unsigned int*, unsigned char)+0x44>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:765
    }

    u32timeOut = millis();
     9f2:	0e 94 2d 08 	call	0x105a	; 0x105a <millis>
     9f6:	fe 01       	movw	r30, r28
     9f8:	ea 5a       	subi	r30, 0xAA	; 170
     9fa:	ff 4f       	sbci	r31, 0xFF	; 255
     9fc:	60 83       	st	Z, r22
     9fe:	71 83       	std	Z+1, r23	; 0x01
     a00:	82 83       	std	Z+2, r24	; 0x02
     a02:	93 83       	std	Z+3, r25	; 0x03
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:766
    u8lastError = 0;
     a04:	1d 82       	std	Y+5, r1	; 0x05
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:769

    // process message
    switch( au8Buffer[ FUNC ] )
     a06:	ef 81       	ldd	r30, Y+7	; 0x07
     a08:	e1 50       	subi	r30, 0x01	; 1
     a0a:	e0 31       	cpi	r30, 0x10	; 16
     a0c:	08 f0       	brcs	.+2      	; 0xa10 <Modbus::poll(unsigned int*, unsigned char)+0x10c>
     a0e:	9c cf       	rjmp	.-200    	; 0x948 <Modbus::poll(unsigned int*, unsigned char)+0x44>
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	e3 5f       	subi	r30, 0xF3	; 243
     a14:	fa 4f       	sbci	r31, 0xFA	; 250
     a16:	0c 94 9a 0b 	jmp	0x1734	; 0x1734 <__tablejump2__>
     a1a:	1d 05       	cpc	r17, r13
     a1c:	1d 05       	cpc	r17, r13
     a1e:	2e 05       	cpc	r18, r14
     a20:	2e 05       	cpc	r18, r14
     a22:	3f 05       	cpc	r19, r15
     a24:	50 05       	cpc	r21, r0
     a26:	a4 04       	cpc	r10, r4
     a28:	a4 04       	cpc	r10, r4
     a2a:	a4 04       	cpc	r10, r4
     a2c:	a4 04       	cpc	r10, r4
     a2e:	a4 04       	cpc	r10, r4
     a30:	a4 04       	cpc	r10, r4
     a32:	a4 04       	cpc	r10, r4
     a34:	a4 04       	cpc	r10, r4
     a36:	61 05       	cpc	r22, r1
     a38:	72 05       	cpc	r23, r2
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:773
    {
    case MB_FC_READ_COILS:
    case MB_FC_READ_DISCRETE_INPUT:
        return process_FC1( regs, u8size );
     a3a:	4f 2d       	mov	r20, r15
     a3c:	b8 01       	movw	r22, r16
     a3e:	ce 01       	movw	r24, r28
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:795
        break;
    default:
        break;
    }
    return i8state;
}
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	1f 91       	pop	r17
     a46:	0f 91       	pop	r16
     a48:	ff 90       	pop	r15
     a4a:	ef 90       	pop	r14
     a4c:	df 90       	pop	r13
     a4e:	cf 90       	pop	r12
     a50:	bf 90       	pop	r11
     a52:	af 90       	pop	r10
     a54:	9f 90       	pop	r9
     a56:	8f 90       	pop	r8
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:773
    // process message
    switch( au8Buffer[ FUNC ] )
    {
    case MB_FC_READ_COILS:
    case MB_FC_READ_DISCRETE_INPUT:
        return process_FC1( regs, u8size );
     a58:	0c 94 5f 02 	jmp	0x4be	; 0x4be <Modbus::process_FC1(unsigned int*, unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:777
        break;
    case MB_FC_READ_INPUT_REGISTER:
    case MB_FC_READ_REGISTERS :
        return process_FC3( regs, u8size );
     a5c:	4f 2d       	mov	r20, r15
     a5e:	b8 01       	movw	r22, r16
     a60:	ce 01       	movw	r24, r28
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:795
        break;
    default:
        break;
    }
    return i8state;
}
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	1f 91       	pop	r17
     a68:	0f 91       	pop	r16
     a6a:	ff 90       	pop	r15
     a6c:	ef 90       	pop	r14
     a6e:	df 90       	pop	r13
     a70:	cf 90       	pop	r12
     a72:	bf 90       	pop	r11
     a74:	af 90       	pop	r10
     a76:	9f 90       	pop	r9
     a78:	8f 90       	pop	r8
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:777
    case MB_FC_READ_DISCRETE_INPUT:
        return process_FC1( regs, u8size );
        break;
    case MB_FC_READ_INPUT_REGISTER:
    case MB_FC_READ_REGISTERS :
        return process_FC3( regs, u8size );
     a7a:	0c 94 12 03 	jmp	0x624	; 0x624 <Modbus::process_FC3(unsigned int*, unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:780
        break;
    case MB_FC_WRITE_COIL:
        return process_FC5( regs, u8size );
     a7e:	4f 2d       	mov	r20, r15
     a80:	b8 01       	movw	r22, r16
     a82:	ce 01       	movw	r24, r28
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:795
        break;
    default:
        break;
    }
    return i8state;
}
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	1f 91       	pop	r17
     a8a:	0f 91       	pop	r16
     a8c:	ff 90       	pop	r15
     a8e:	ef 90       	pop	r14
     a90:	df 90       	pop	r13
     a92:	cf 90       	pop	r12
     a94:	bf 90       	pop	r11
     a96:	af 90       	pop	r10
     a98:	9f 90       	pop	r9
     a9a:	8f 90       	pop	r8
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:780
    case MB_FC_READ_INPUT_REGISTER:
    case MB_FC_READ_REGISTERS :
        return process_FC3( regs, u8size );
        break;
    case MB_FC_WRITE_COIL:
        return process_FC5( regs, u8size );
     a9c:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <Modbus::process_FC5(unsigned int*, unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:783
        break;
    case MB_FC_WRITE_REGISTER :
        return process_FC6( regs, u8size );
     aa0:	4f 2d       	mov	r20, r15
     aa2:	b8 01       	movw	r22, r16
     aa4:	ce 01       	movw	r24, r28
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:795
        break;
    default:
        break;
    }
    return i8state;
}
     aa6:	df 91       	pop	r29
     aa8:	cf 91       	pop	r28
     aaa:	1f 91       	pop	r17
     aac:	0f 91       	pop	r16
     aae:	ff 90       	pop	r15
     ab0:	ef 90       	pop	r14
     ab2:	df 90       	pop	r13
     ab4:	cf 90       	pop	r12
     ab6:	bf 90       	pop	r11
     ab8:	af 90       	pop	r10
     aba:	9f 90       	pop	r9
     abc:	8f 90       	pop	r8
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:783
        break;
    case MB_FC_WRITE_COIL:
        return process_FC5( regs, u8size );
        break;
    case MB_FC_WRITE_REGISTER :
        return process_FC6( regs, u8size );
     abe:	0c 94 a6 03 	jmp	0x74c	; 0x74c <Modbus::process_FC6(unsigned int*, unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:786
        break;
    case MB_FC_WRITE_MULTIPLE_COILS:
        return process_FC15( regs, u8size );
     ac2:	4f 2d       	mov	r20, r15
     ac4:	b8 01       	movw	r22, r16
     ac6:	ce 01       	movw	r24, r28
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:795
        break;
    default:
        break;
    }
    return i8state;
}
     ac8:	df 91       	pop	r29
     aca:	cf 91       	pop	r28
     acc:	1f 91       	pop	r17
     ace:	0f 91       	pop	r16
     ad0:	ff 90       	pop	r15
     ad2:	ef 90       	pop	r14
     ad4:	df 90       	pop	r13
     ad6:	cf 90       	pop	r12
     ad8:	bf 90       	pop	r11
     ada:	af 90       	pop	r10
     adc:	9f 90       	pop	r9
     ade:	8f 90       	pop	r8
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:786
        break;
    case MB_FC_WRITE_REGISTER :
        return process_FC6( regs, u8size );
        break;
    case MB_FC_WRITE_MULTIPLE_COILS:
        return process_FC15( regs, u8size );
     ae0:	0c 94 cf 03 	jmp	0x79e	; 0x79e <Modbus::process_FC15(unsigned int*, unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:789
        break;
    case MB_FC_WRITE_MULTIPLE_REGISTERS :
        return process_FC16( regs, u8size );
     ae4:	4f 2d       	mov	r20, r15
     ae6:	b8 01       	movw	r22, r16
     ae8:	ce 01       	movw	r24, r28
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:795
        break;
    default:
        break;
    }
    return i8state;
}
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	1f 91       	pop	r17
     af0:	0f 91       	pop	r16
     af2:	ff 90       	pop	r15
     af4:	ef 90       	pop	r14
     af6:	df 90       	pop	r13
     af8:	cf 90       	pop	r12
     afa:	bf 90       	pop	r11
     afc:	af 90       	pop	r10
     afe:	9f 90       	pop	r9
     b00:	8f 90       	pop	r8
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:789
        break;
    case MB_FC_WRITE_MULTIPLE_COILS:
        return process_FC15( regs, u8size );
        break;
    case MB_FC_WRITE_MULTIPLE_REGISTERS :
        return process_FC16( regs, u8size );
     b02:	0c 94 44 04 	jmp	0x888	; 0x888 <Modbus::process_FC16(unsigned int*, unsigned char)>

00000b06 <setup>:
setup():
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:17

Bounce upButton = Bounce();
Bounce downButton = Bounce();

void setup() {
    pinMode(7, INPUT_PULLUP);
     b06:	62 e0       	ldi	r22, 0x02	; 2
     b08:	87 e0       	ldi	r24, 0x07	; 7
     b0a:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <pinMode>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:18
    pinMode(8, INPUT_PULLUP);
     b0e:	62 e0       	ldi	r22, 0x02	; 2
     b10:	88 e0       	ldi	r24, 0x08	; 8
     b12:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <pinMode>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:19
    pinMode(9, INPUT_PULLUP);
     b16:	62 e0       	ldi	r22, 0x02	; 2
     b18:	89 e0       	ldi	r24, 0x09	; 9
     b1a:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <pinMode>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:20
    pinMode(10, INPUT_PULLUP);
     b1e:	62 e0       	ldi	r22, 0x02	; 2
     b20:	8a e0       	ldi	r24, 0x0A	; 10
     b22:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <pinMode>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:22

    pinMode(UP_RELAY, OUTPUT);
     b26:	61 e0       	ldi	r22, 0x01	; 1
     b28:	8e e0       	ldi	r24, 0x0E	; 14
     b2a:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <pinMode>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:23
    pinMode(DOWN_RELAY, OUTPUT);
     b2e:	61 e0       	ldi	r22, 0x01	; 1
     b30:	8f e0       	ldi	r24, 0x0F	; 15
     b32:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <pinMode>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:25

    digitalWrite(UP_RELAY, LOW);
     b36:	60 e0       	ldi	r22, 0x00	; 0
     b38:	8e e0       	ldi	r24, 0x0E	; 14
     b3a:	0e 94 24 09 	call	0x1248	; 0x1248 <digitalWrite>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:26
    digitalWrite(DOWN_RELAY, LOW);
     b3e:	60 e0       	ldi	r22, 0x00	; 0
     b40:	8f e0       	ldi	r24, 0x0F	; 15
     b42:	0e 94 24 09 	call	0x1248	; 0x1248 <digitalWrite>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:28

    upButton.attach(A2, INPUT);
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	40 e0       	ldi	r20, 0x00	; 0
     b4a:	60 e1       	ldi	r22, 0x10	; 16
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	8f e3       	ldi	r24, 0x3F	; 63
     b50:	91 e0       	ldi	r25, 0x01	; 1
     b52:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Bounce::attach(int, int)>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:29
    upButton.interval(25);
     b56:	69 e1       	ldi	r22, 0x19	; 25
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	8f e3       	ldi	r24, 0x3F	; 63
     b5c:	91 e0       	ldi	r25, 0x01	; 1
     b5e:	0e 94 3b 07 	call	0xe76	; 0xe76 <Debouncer::interval(unsigned int)>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:30
    downButton.attach(A3, INPUT);
     b62:	50 e0       	ldi	r21, 0x00	; 0
     b64:	40 e0       	ldi	r20, 0x00	; 0
     b66:	61 e1       	ldi	r22, 0x11	; 17
     b68:	70 e0       	ldi	r23, 0x00	; 0
     b6a:	8d e2       	ldi	r24, 0x2D	; 45
     b6c:	91 e0       	ldi	r25, 0x01	; 1
     b6e:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Bounce::attach(int, int)>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:31
    downButton.interval(25);
     b72:	69 e1       	ldi	r22, 0x19	; 25
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	8d e2       	ldi	r24, 0x2D	; 45
     b78:	91 e0       	ldi	r25, 0x01	; 1
     b7a:	0e 94 3b 07 	call	0xe76	; 0xe76 <Debouncer::interval(unsigned int)>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:33

    bitWrite(address, 0, digitalRead(7));
     b7e:	87 e0       	ldi	r24, 0x07	; 7
     b80:	0e 94 52 09 	call	0x12a4	; 0x12a4 <digitalRead>
     b84:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <address>
     b88:	30 91 52 01 	lds	r19, 0x0152	; 0x800152 <address+0x1>
     b8c:	89 2b       	or	r24, r25
     b8e:	09 f4       	brne	.+2      	; 0xb92 <setup+0x8c>
     b90:	5b c0       	rjmp	.+182    	; 0xc48 <setup+0x142>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:33 (discriminator 1)
     b92:	21 60       	ori	r18, 0x01	; 1
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:33 (discriminator 2)
     b94:	30 93 52 01 	sts	0x0152, r19	; 0x800152 <address+0x1>
     b98:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <address>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:34 (discriminator 2)
    bitWrite(address, 1, digitalRead(8));
     b9c:	88 e0       	ldi	r24, 0x08	; 8
     b9e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <digitalRead>
     ba2:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <address>
     ba6:	30 91 52 01 	lds	r19, 0x0152	; 0x800152 <address+0x1>
     baa:	89 2b       	or	r24, r25
     bac:	09 f4       	brne	.+2      	; 0xbb0 <setup+0xaa>
     bae:	4e c0       	rjmp	.+156    	; 0xc4c <setup+0x146>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:34 (discriminator 1)
     bb0:	22 60       	ori	r18, 0x02	; 2
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:34 (discriminator 2)
     bb2:	30 93 52 01 	sts	0x0152, r19	; 0x800152 <address+0x1>
     bb6:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <address>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:35 (discriminator 2)
    bitWrite(address, 2, digitalRead(9));
     bba:	89 e0       	ldi	r24, 0x09	; 9
     bbc:	0e 94 52 09 	call	0x12a4	; 0x12a4 <digitalRead>
     bc0:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <address>
     bc4:	30 91 52 01 	lds	r19, 0x0152	; 0x800152 <address+0x1>
     bc8:	89 2b       	or	r24, r25
     bca:	09 f4       	brne	.+2      	; 0xbce <setup+0xc8>
     bcc:	41 c0       	rjmp	.+130    	; 0xc50 <setup+0x14a>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:35 (discriminator 1)
     bce:	24 60       	ori	r18, 0x04	; 4
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:35 (discriminator 2)
     bd0:	30 93 52 01 	sts	0x0152, r19	; 0x800152 <address+0x1>
     bd4:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <address>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:36 (discriminator 2)
    bitWrite(address, 3, digitalRead(10));
     bd8:	8a e0       	ldi	r24, 0x0A	; 10
     bda:	0e 94 52 09 	call	0x12a4	; 0x12a4 <digitalRead>
     bde:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <address>
     be2:	30 91 52 01 	lds	r19, 0x0152	; 0x800152 <address+0x1>
     be6:	89 2b       	or	r24, r25
     be8:	a9 f1       	breq	.+106    	; 0xc54 <setup+0x14e>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:36 (discriminator 1)
     bea:	28 60       	ori	r18, 0x08	; 8
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:36 (discriminator 2)
     bec:	30 93 52 01 	sts	0x0152, r19	; 0x800152 <address+0x1>
     bf0:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <address>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:38 (discriminator 2)

    address += 10;
     bf4:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <address>
     bf8:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <address+0x1>
     bfc:	0a 96       	adiw	r24, 0x0a	; 10
     bfe:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <address+0x1>
     c02:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <address>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:40 (discriminator 2)

    slave = Modbus(ID, Serial, 2);
     c06:	81 ec       	ldi	r24, 0xC1	; 193
     c08:	91 e0       	ldi	r25, 0x01	; 1
     c0a:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <slave+0x1>
     c0e:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <slave>
     c12:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <slave+0x2>
     c16:	82 e0       	ldi	r24, 0x02	; 2
     c18:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <slave+0x3>
     c1c:	88 ee       	ldi	r24, 0xE8	; 232
     c1e:	93 e0       	ldi	r25, 0x03	; 3
     c20:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <slave+0x51>
     c24:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <slave+0x50>
     c28:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <slave+0x5a>
     c2c:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <slave+0x5b>
     c30:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <slave+0x5c>
     c34:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <slave+0x5d>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:41 (discriminator 2)
    slave.begin(9600);
     c38:	40 e8       	ldi	r20, 0x80	; 128
     c3a:	55 e2       	ldi	r21, 0x25	; 37
     c3c:	60 e0       	ldi	r22, 0x00	; 0
     c3e:	70 e0       	ldi	r23, 0x00	; 0
     c40:	89 e5       	ldi	r24, 0x59	; 89
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	0c 94 bd 00 	jmp	0x17a	; 0x17a <Modbus::begin(long)>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:33 (discriminator 2)
    upButton.attach(A2, INPUT);
    upButton.interval(25);
    downButton.attach(A3, INPUT);
    downButton.interval(25);

    bitWrite(address, 0, digitalRead(7));
     c48:	2e 7f       	andi	r18, 0xFE	; 254
     c4a:	a4 cf       	rjmp	.-184    	; 0xb94 <setup+0x8e>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:34 (discriminator 2)
    bitWrite(address, 1, digitalRead(8));
     c4c:	2d 7f       	andi	r18, 0xFD	; 253
     c4e:	b1 cf       	rjmp	.-158    	; 0xbb2 <setup+0xac>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:35 (discriminator 2)
    bitWrite(address, 2, digitalRead(9));
     c50:	2b 7f       	andi	r18, 0xFB	; 251
     c52:	be cf       	rjmp	.-132    	; 0xbd0 <setup+0xca>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:36 (discriminator 2)
    bitWrite(address, 3, digitalRead(10));
     c54:	27 7f       	andi	r18, 0xF7	; 247
     c56:	ca cf       	rjmp	.-108    	; 0xbec <setup+0xe6>

00000c58 <loop>:
loop():
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:53
int down = HIGH;
int up = HIGH;

void loop()
{
    upButton.update();
     c58:	8f e3       	ldi	r24, 0x3F	; 63
     c5a:	91 e0       	ldi	r25, 0x01	; 1
     c5c:	0e 94 57 07 	call	0xeae	; 0xeae <Debouncer::update()>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:54
    downButton.update();
     c60:	8d e2       	ldi	r24, 0x2D	; 45
     c62:	91 e0       	ldi	r25, 0x01	; 1
     c64:	0e 94 57 07 	call	0xeae	; 0xeae <Debouncer::update()>
_ZNK9Debouncer12getStateFlagEh():
C:\Users\Jacek\Documents\Arduino\libraries\Bounce2\src/Bounce2.h:76
private:
  inline void changeState();
  inline void setStateFlag(const uint8_t flag)       {state |= flag;}
  inline void unsetStateFlag(const uint8_t flag)     {state &= ~flag;}
  inline void toggleStateFlag(const uint8_t flag)    {state ^= flag;}
  inline bool getStateFlag(const uint8_t flag) const {return((state & flag) != 0);}
     c68:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <upButton+0x8>
loop():
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:55
    if (upButton.changed())
     c6c:	82 ff       	sbrs	r24, 2
     c6e:	09 c0       	rjmp	.+18     	; 0xc82 <loop+0x2a>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:57
    {
        up = upButton.read();
     c70:	8f e3       	ldi	r24, 0x3F	; 63
     c72:	91 e0       	ldi	r25, 0x01	; 1
     c74:	0e 94 c0 07 	call	0xf80	; 0xf80 <Debouncer::read() const>
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     c7e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
_ZNK9Debouncer12getStateFlagEh():
C:\Users\Jacek\Documents\Arduino\libraries\Bounce2\src/Bounce2.h:76
     c82:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <downButton+0x8>
loop():
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:60
    }

    if (downButton.changed())
     c86:	82 ff       	sbrs	r24, 2
     c88:	09 c0       	rjmp	.+18     	; 0xc9c <loop+0x44>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:62
    {
        down = downButton.read();
     c8a:	8d e2       	ldi	r24, 0x2D	; 45
     c8c:	91 e0       	ldi	r25, 0x01	; 1
     c8e:	0e 94 c0 07 	call	0xf80	; 0xf80 <Debouncer::read() const>
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <down+0x1>
     c98:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <down>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:65
    }

    if (modbusData[0] == 1 && modbusData[1] == 0)
     c9c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <modbusData>
     ca0:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <modbusData+0x1>
     ca4:	01 97       	sbiw	r24, 0x01	; 1
     ca6:	d1 f4       	brne	.+52     	; 0xcdc <loop+0x84>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:65 (discriminator 1)
     ca8:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <modbusData+0x2>
     cac:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <modbusData+0x3>
     cb0:	89 2b       	or	r24, r25
     cb2:	a1 f4       	brne	.+40     	; 0xcdc <loop+0x84>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:67
    {
        digitalWrite(DOWN_RELAY, 0);
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	8f e0       	ldi	r24, 0x0F	; 15
     cb8:	0e 94 24 09 	call	0x1248	; 0x1248 <digitalWrite>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:68
        delay(10);
     cbc:	6a e0       	ldi	r22, 0x0A	; 10
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	0e 94 5e 08 	call	0x10bc	; 0x10bc <delay>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:69
        digitalWrite(UP_RELAY, 1);
     cc8:	61 e0       	ldi	r22, 0x01	; 1
     cca:	8e e0       	ldi	r24, 0x0E	; 14
     ccc:	0e 94 24 09 	call	0x1248	; 0x1248 <digitalWrite>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:70
        delay(10);
     cd0:	6a e0       	ldi	r22, 0x0A	; 10
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	0e 94 5e 08 	call	0x10bc	; 0x10bc <delay>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:73
    }

    if (modbusData[0] == 0 && modbusData[1] == 1)
     cdc:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <modbusData>
     ce0:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <modbusData+0x1>
     ce4:	89 2b       	or	r24, r25
     ce6:	d1 f4       	brne	.+52     	; 0xd1c <loop+0xc4>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:73 (discriminator 1)
     ce8:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <modbusData+0x2>
     cec:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <modbusData+0x3>
     cf0:	01 97       	sbiw	r24, 0x01	; 1
     cf2:	a1 f4       	brne	.+40     	; 0xd1c <loop+0xc4>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:75
    {
        digitalWrite(UP_RELAY, 0);
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	8e e0       	ldi	r24, 0x0E	; 14
     cf8:	0e 94 24 09 	call	0x1248	; 0x1248 <digitalWrite>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:76
        delay(10);
     cfc:	6a e0       	ldi	r22, 0x0A	; 10
     cfe:	70 e0       	ldi	r23, 0x00	; 0
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0e 94 5e 08 	call	0x10bc	; 0x10bc <delay>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:77
        digitalWrite(DOWN_RELAY, 1);
     d08:	61 e0       	ldi	r22, 0x01	; 1
     d0a:	8f e0       	ldi	r24, 0x0F	; 15
     d0c:	0e 94 24 09 	call	0x1248	; 0x1248 <digitalWrite>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:78
        delay(10);
     d10:	6a e0       	ldi	r22, 0x0A	; 10
     d12:	70 e0       	ldi	r23, 0x00	; 0
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	0e 94 5e 08 	call	0x10bc	; 0x10bc <delay>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:81
    }

    if (modbusData[0] == 0 && modbusData[1] == 0 && down == HIGH && up == HIGH)
     d1c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <modbusData>
     d20:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <modbusData+0x1>
     d24:	89 2b       	or	r24, r25
     d26:	d1 f4       	brne	.+52     	; 0xd5c <loop+0x104>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:81 (discriminator 1)
     d28:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <modbusData+0x2>
     d2c:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <modbusData+0x3>
     d30:	89 2b       	or	r24, r25
     d32:	a1 f4       	brne	.+40     	; 0xd5c <loop+0x104>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:81 (discriminator 2)
     d34:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <down>
     d38:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <down+0x1>
     d3c:	01 97       	sbiw	r24, 0x01	; 1
     d3e:	71 f4       	brne	.+28     	; 0xd5c <loop+0x104>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:81 (discriminator 3)
     d40:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     d44:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     d48:	01 97       	sbiw	r24, 0x01	; 1
     d4a:	41 f4       	brne	.+16     	; 0xd5c <loop+0x104>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:83
    {
        digitalWrite(UP_RELAY, 0);
     d4c:	60 e0       	ldi	r22, 0x00	; 0
     d4e:	8e e0       	ldi	r24, 0x0E	; 14
     d50:	0e 94 24 09 	call	0x1248	; 0x1248 <digitalWrite>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:84
        digitalWrite(DOWN_RELAY, 0);
     d54:	60 e0       	ldi	r22, 0x00	; 0
     d56:	8f e0       	ldi	r24, 0x0F	; 15
     d58:	0e 94 24 09 	call	0x1248	; 0x1248 <digitalWrite>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:87
    }

    if (down == LOW && up == HIGH)
     d5c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <down>
     d60:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <down+0x1>
     d64:	89 2b       	or	r24, r25
     d66:	d1 f4       	brne	.+52     	; 0xd9c <loop+0x144>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:87 (discriminator 1)
     d68:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     d6c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     d70:	01 97       	sbiw	r24, 0x01	; 1
     d72:	a1 f4       	brne	.+40     	; 0xd9c <loop+0x144>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:89
    {
        digitalWrite(UP_RELAY, 0);
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	8e e0       	ldi	r24, 0x0E	; 14
     d78:	0e 94 24 09 	call	0x1248	; 0x1248 <digitalWrite>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:90
        delay(10);
     d7c:	6a e0       	ldi	r22, 0x0A	; 10
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	0e 94 5e 08 	call	0x10bc	; 0x10bc <delay>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:91
        digitalWrite(DOWN_RELAY, 1);
     d88:	61 e0       	ldi	r22, 0x01	; 1
     d8a:	8f e0       	ldi	r24, 0x0F	; 15
     d8c:	0e 94 24 09 	call	0x1248	; 0x1248 <digitalWrite>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:92
        delay(10);
     d90:	6a e0       	ldi	r22, 0x0A	; 10
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	0e 94 5e 08 	call	0x10bc	; 0x10bc <delay>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:95
    }

    if (down == HIGH && up == LOW)
     d9c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <down>
     da0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <down+0x1>
     da4:	01 97       	sbiw	r24, 0x01	; 1
     da6:	d1 f4       	brne	.+52     	; 0xddc <loop+0x184>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:95 (discriminator 1)
     da8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     dac:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     db0:	89 2b       	or	r24, r25
     db2:	a1 f4       	brne	.+40     	; 0xddc <loop+0x184>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:97
    {
        digitalWrite(DOWN_RELAY, 0);
     db4:	60 e0       	ldi	r22, 0x00	; 0
     db6:	8f e0       	ldi	r24, 0x0F	; 15
     db8:	0e 94 24 09 	call	0x1248	; 0x1248 <digitalWrite>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:98
        delay(10);
     dbc:	6a e0       	ldi	r22, 0x0A	; 10
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	0e 94 5e 08 	call	0x10bc	; 0x10bc <delay>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:99
        digitalWrite(UP_RELAY, 1);
     dc8:	61 e0       	ldi	r22, 0x01	; 1
     dca:	8e e0       	ldi	r24, 0x0E	; 14
     dcc:	0e 94 24 09 	call	0x1248	; 0x1248 <digitalWrite>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:100
        delay(10);
     dd0:	6a e0       	ldi	r22, 0x0A	; 10
     dd2:	70 e0       	ldi	r23, 0x00	; 0
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	0e 94 5e 08 	call	0x10bc	; 0x10bc <delay>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:103
    }

    modbusData[2] = slave.getInCnt();
     ddc:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <slave+0x4a>
     de0:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <slave+0x4b>
     de4:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <modbusData+0x5>
     de8:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <modbusData+0x4>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:105

    state = slave.poll( modbusData, 3 );
     dec:	43 e0       	ldi	r20, 0x03	; 3
     dee:	63 e5       	ldi	r22, 0x53	; 83
     df0:	71 e0       	ldi	r23, 0x01	; 1
     df2:	89 e5       	ldi	r24, 0x59	; 89
     df4:	91 e0       	ldi	r25, 0x01	; 1
     df6:	0e 94 82 04 	call	0x904	; 0x904 <Modbus::poll(unsigned int*, unsigned char)>
     dfa:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:106
}
     dfe:	08 95       	ret

00000e00 <_GLOBAL__sub_I__ZN6ModbusC2EhR6Streamh>:
_ZN6ModbusC4Ehhh():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:274
 * @ingroup setup
 * @overload Modbus::Modbus(uint8_t u8id, T_Stream& port, uint8_t u8txenpin)
 */
Modbus::Modbus(uint8_t u8id, uint8_t u8serno, uint8_t u8txenpin)
{
    this->u8id = u8id;
     e00:	e9 e5       	ldi	r30, 0x59	; 89
     e02:	f1 e0       	ldi	r31, 0x01	; 1
     e04:	12 82       	std	Z+2, r1	; 0x02
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:275
    this->u8txenpin = u8txenpin;
     e06:	13 82       	std	Z+3, r1	; 0x03
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:276
    this->u16timeOut = 1000;
     e08:	88 ee       	ldi	r24, 0xE8	; 232
     e0a:	93 e0       	ldi	r25, 0x03	; 3
     e0c:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <slave+0x51>
     e10:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <slave+0x50>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:277
    this->u32overTime = 0;
     e14:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <slave+0x5a>
     e18:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <slave+0x5b>
     e1c:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <slave+0x5c>
     e20:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <slave+0x5d>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:300
        port = &Serial3;
        break;
#endif
    case 0:
    default:
        port = &Serial;
     e24:	81 ec       	ldi	r24, 0xC1	; 193
     e26:	91 e0       	ldi	r25, 0x01	; 1
     e28:	91 83       	std	Z+1, r25	; 0x01
     e2a:	80 83       	st	Z, r24
_GLOBAL__sub_I__ZN6ModbusC2EhR6Streamh():
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:13
Modbus slave;

uint16_t modbusData[3];
int address = 0;

Bounce upButton = Bounce();
     e2c:	8f e3       	ldi	r24, 0x3F	; 63
     e2e:	91 e0       	ldi	r25, 0x01	; 1
     e30:	0e 94 c4 07 	call	0xf88	; 0xf88 <Bounce::Bounce()>
C:\Users\Jacek\Documents\Arduino\roller_shutter/roller_shutter.ino:14
Bounce downButton = Bounce();
     e34:	8d e2       	ldi	r24, 0x2D	; 45
     e36:	91 e0       	ldi	r25, 0x01	; 1
     e38:	0c 94 c4 07 	jmp	0xf88	; 0xf88 <Bounce::Bounce()>

00000e3c <Bounce::readCurrentState()>:
_ZN6Bounce16readCurrentStateEv():
C:\Users\Jacek\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:146

void Bounce::attach(int pin) {
    this->pin = pin;
    
    // SET INITIAL STATE
    begin();
     e3c:	fc 01       	movw	r30, r24
     e3e:	81 89       	ldd	r24, Z+17	; 0x11
     e40:	0e 94 52 09 	call	0x12a4	; 0x12a4 <digitalRead>
     e44:	21 e0       	ldi	r18, 0x01	; 1
     e46:	89 2b       	or	r24, r25
     e48:	09 f4       	brne	.+2      	; 0xe4c <Bounce::readCurrentState()+0x10>
     e4a:	20 e0       	ldi	r18, 0x00	; 0
     e4c:	82 2f       	mov	r24, r18
     e4e:	08 95       	ret

00000e50 <Bounce::setPinMode(int, int)>:
_ZN6Bounce10setPinModeEii():
     e50:	86 2f       	mov	r24, r22
     e52:	64 2f       	mov	r22, r20
     e54:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <pinMode>

00000e58 <Debouncer::Debouncer()>:
_ZN9DebouncerC2Ev():
     e58:	fc 01       	movw	r30, r24
     e5a:	80 e1       	ldi	r24, 0x10	; 16
     e5c:	91 e0       	ldi	r25, 0x01	; 1
     e5e:	91 83       	std	Z+1, r25	; 0x01
     e60:	80 83       	st	Z, r24
     e62:	12 82       	std	Z+2, r1	; 0x02
     e64:	13 82       	std	Z+3, r1	; 0x03
     e66:	14 82       	std	Z+4, r1	; 0x04
     e68:	15 82       	std	Z+5, r1	; 0x05
     e6a:	8a e0       	ldi	r24, 0x0A	; 10
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	97 83       	std	Z+7, r25	; 0x07
     e70:	86 83       	std	Z+6, r24	; 0x06
     e72:	10 86       	std	Z+8, r1	; 0x08
     e74:	08 95       	ret

00000e76 <Debouncer::interval(unsigned int)>:
_ZN9Debouncer8intervalEj():
     e76:	fc 01       	movw	r30, r24
     e78:	77 83       	std	Z+7, r23	; 0x07
     e7a:	66 83       	std	Z+6, r22	; 0x06
     e7c:	08 95       	ret

00000e7e <Debouncer::begin()>:
_ZN9Debouncer5beginEv():
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	ec 01       	movw	r28, r24
     e84:	18 86       	std	Y+8, r1	; 0x08
     e86:	e8 81       	ld	r30, Y
     e88:	f9 81       	ldd	r31, Y+1	; 0x01
     e8a:	01 90       	ld	r0, Z+
     e8c:	f0 81       	ld	r31, Z
     e8e:	e0 2d       	mov	r30, r0
     e90:	09 95       	icall
     e92:	88 23       	and	r24, r24
     e94:	19 f0       	breq	.+6      	; 0xe9c <Debouncer::begin()+0x1e>
_ZN9Debouncer12setStateFlagEh():
     e96:	88 85       	ldd	r24, Y+8	; 0x08
     e98:	83 60       	ori	r24, 0x03	; 3
     e9a:	88 87       	std	Y+8, r24	; 0x08
_ZN9Debouncer5beginEv():
     e9c:	0e 94 2d 08 	call	0x105a	; 0x105a <millis>
     ea0:	6a 83       	std	Y+2, r22	; 0x02
     ea2:	7b 83       	std	Y+3, r23	; 0x03
     ea4:	8c 83       	std	Y+4, r24	; 0x04
     ea6:	9d 83       	std	Y+5, r25	; 0x05
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	08 95       	ret

00000eae <Debouncer::update()>:
_ZN9Debouncer6updateEv():
     eae:	cf 92       	push	r12
     eb0:	df 92       	push	r13
     eb2:	ef 92       	push	r14
     eb4:	ff 92       	push	r15
     eb6:	0f 93       	push	r16
     eb8:	1f 93       	push	r17
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	ec 01       	movw	r28, r24
_ZN9Debouncer14unsetStateFlagEh():
     ec0:	88 85       	ldd	r24, Y+8	; 0x08
     ec2:	8b 7f       	andi	r24, 0xFB	; 251
     ec4:	88 87       	std	Y+8, r24	; 0x08
_ZN9Debouncer6updateEv():
     ec6:	e8 81       	ld	r30, Y
     ec8:	f9 81       	ldd	r31, Y+1	; 0x01
     eca:	01 90       	ld	r0, Z+
     ecc:	f0 81       	ld	r31, Z
     ece:	e0 2d       	mov	r30, r0
     ed0:	ce 01       	movw	r24, r28
     ed2:	09 95       	icall
     ed4:	18 2f       	mov	r17, r24
_ZNK9Debouncer12getStateFlagEh():
     ed6:	88 85       	ldd	r24, Y+8	; 0x08
     ed8:	86 95       	lsr	r24
     eda:	81 70       	andi	r24, 0x01	; 1
_ZN9Debouncer6updateEv():
     edc:	18 17       	cp	r17, r24
     ede:	b9 f0       	breq	.+46     	; 0xf0e <Debouncer::update()+0x60>
     ee0:	0e 94 2d 08 	call	0x105a	; 0x105a <millis>
     ee4:	6a 83       	std	Y+2, r22	; 0x02
     ee6:	7b 83       	std	Y+3, r23	; 0x03
     ee8:	8c 83       	std	Y+4, r24	; 0x04
     eea:	9d 83       	std	Y+5, r25	; 0x05
_ZN9Debouncer15toggleStateFlagEh():
     eec:	88 85       	ldd	r24, Y+8	; 0x08
     eee:	92 e0       	ldi	r25, 0x02	; 2
     ef0:	89 27       	eor	r24, r25
     ef2:	88 87       	std	Y+8, r24	; 0x08
_ZNK9Debouncer12getStateFlagEh():
     ef4:	88 85       	ldd	r24, Y+8	; 0x08
_ZN9Debouncer6updateEv():
     ef6:	82 fb       	bst	r24, 2
     ef8:	88 27       	eor	r24, r24
     efa:	80 f9       	bld	r24, 0
     efc:	df 91       	pop	r29
     efe:	cf 91       	pop	r28
     f00:	1f 91       	pop	r17
     f02:	0f 91       	pop	r16
     f04:	ff 90       	pop	r15
     f06:	ef 90       	pop	r14
     f08:	df 90       	pop	r13
     f0a:	cf 90       	pop	r12
     f0c:	08 95       	ret
     f0e:	0e 94 2d 08 	call	0x105a	; 0x105a <millis>
     f12:	ca 80       	ldd	r12, Y+2	; 0x02
     f14:	db 80       	ldd	r13, Y+3	; 0x03
     f16:	ec 80       	ldd	r14, Y+4	; 0x04
     f18:	fd 80       	ldd	r15, Y+5	; 0x05
     f1a:	ab 01       	movw	r20, r22
     f1c:	bc 01       	movw	r22, r24
     f1e:	4c 19       	sub	r20, r12
     f20:	5d 09       	sbc	r21, r13
     f22:	6e 09       	sbc	r22, r14
     f24:	7f 09       	sbc	r23, r15
     f26:	8e 81       	ldd	r24, Y+6	; 0x06
     f28:	9f 81       	ldd	r25, Y+7	; 0x07
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	a0 e0       	ldi	r26, 0x00	; 0
     f2e:	48 17       	cp	r20, r24
     f30:	59 07       	cpc	r21, r25
     f32:	6a 07       	cpc	r22, r26
     f34:	7b 07       	cpc	r23, r27
     f36:	f0 f2       	brcs	.-68     	; 0xef4 <Debouncer::update()+0x46>
_ZNK9Debouncer12getStateFlagEh():
     f38:	88 85       	ldd	r24, Y+8	; 0x08
     f3a:	81 70       	andi	r24, 0x01	; 1
_ZN9Debouncer6updateEv():
     f3c:	18 17       	cp	r17, r24
     f3e:	d1 f2       	breq	.-76     	; 0xef4 <Debouncer::update()+0x46>
     f40:	0e 94 2d 08 	call	0x105a	; 0x105a <millis>
     f44:	6a 83       	std	Y+2, r22	; 0x02
     f46:	7b 83       	std	Y+3, r23	; 0x03
     f48:	8c 83       	std	Y+4, r24	; 0x04
     f4a:	9d 83       	std	Y+5, r25	; 0x05
_ZN9Debouncer15toggleStateFlagEh():
     f4c:	88 85       	ldd	r24, Y+8	; 0x08
     f4e:	91 e0       	ldi	r25, 0x01	; 1
     f50:	89 27       	eor	r24, r25
_ZN9Debouncer12setStateFlagEh():
     f52:	84 60       	ori	r24, 0x04	; 4
     f54:	88 87       	std	Y+8, r24	; 0x08
_ZN9Debouncer11changeStateEv():
     f56:	0e 94 2d 08 	call	0x105a	; 0x105a <millis>
     f5a:	09 85       	ldd	r16, Y+9	; 0x09
     f5c:	1a 85       	ldd	r17, Y+10	; 0x0a
     f5e:	2b 85       	ldd	r18, Y+11	; 0x0b
     f60:	3c 85       	ldd	r19, Y+12	; 0x0c
     f62:	60 1b       	sub	r22, r16
     f64:	71 0b       	sbc	r23, r17
     f66:	82 0b       	sbc	r24, r18
     f68:	93 0b       	sbc	r25, r19
     f6a:	6d 87       	std	Y+13, r22	; 0x0d
     f6c:	7e 87       	std	Y+14, r23	; 0x0e
     f6e:	8f 87       	std	Y+15, r24	; 0x0f
     f70:	98 8b       	std	Y+16, r25	; 0x10
     f72:	0e 94 2d 08 	call	0x105a	; 0x105a <millis>
     f76:	69 87       	std	Y+9, r22	; 0x09
     f78:	7a 87       	std	Y+10, r23	; 0x0a
     f7a:	8b 87       	std	Y+11, r24	; 0x0b
     f7c:	9c 87       	std	Y+12, r25	; 0x0c
     f7e:	ba cf       	rjmp	.-140    	; 0xef4 <Debouncer::update()+0x46>

00000f80 <Debouncer::read() const>:
_ZNK9Debouncer12getStateFlagEh():
     f80:	fc 01       	movw	r30, r24
     f82:	80 85       	ldd	r24, Z+8	; 0x08
_ZNK9Debouncer4readEv():
     f84:	81 70       	andi	r24, 0x01	; 1
     f86:	08 95       	ret

00000f88 <Bounce::Bounce()>:
_ZN6BounceC2Ev():
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
     f8c:	ec 01       	movw	r28, r24
     f8e:	0e 94 2c 07 	call	0xe58	; 0xe58 <Debouncer::Debouncer()>
     f92:	86 e1       	ldi	r24, 0x16	; 22
     f94:	91 e0       	ldi	r25, 0x01	; 1
     f96:	99 83       	std	Y+1, r25	; 0x01
     f98:	88 83       	st	Y, r24
     f9a:	19 8a       	std	Y+17, r1	; 0x11
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	08 95       	ret

00000fa2 <Bounce::attach(int, int)>:
_ZN6Bounce6attachEii():
C:\Users\Jacek\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:149
}

void Bounce::attach(int pin, int mode){
     fa2:	1f 93       	push	r17
     fa4:	cf 93       	push	r28
     fa6:	df 93       	push	r29
     fa8:	ec 01       	movw	r28, r24
     faa:	16 2f       	mov	r17, r22
C:\Users\Jacek\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:150
    setPinMode(pin, mode);
     fac:	e8 81       	ld	r30, Y
     fae:	f9 81       	ldd	r31, Y+1	; 0x01
     fb0:	02 80       	ldd	r0, Z+2	; 0x02
     fb2:	f3 81       	ldd	r31, Z+3	; 0x03
     fb4:	e0 2d       	mov	r30, r0
     fb6:	09 95       	icall
_ZN6Bounce6attachEi():
C:\Users\Jacek\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:143
Bounce::Bounce()
    : pin(0)
{}

void Bounce::attach(int pin) {
    this->pin = pin;
     fb8:	19 8b       	std	Y+17, r17	; 0x11
C:\Users\Jacek\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:146
    
    // SET INITIAL STATE
    begin();
     fba:	ce 01       	movw	r24, r28
_ZN6Bounce6attachEii():
C:\Users\Jacek\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:152
}

void Bounce::attach(int pin, int mode){
    setPinMode(pin, mode);
    this->attach(pin);
}
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	1f 91       	pop	r17
_ZN6Bounce6attachEi():
C:\Users\Jacek\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:146

void Bounce::attach(int pin) {
    this->pin = pin;
    
    // SET INITIAL STATE
    begin();
     fc2:	0c 94 3f 07 	jmp	0xe7e	; 0xe7e <Debouncer::begin()>

00000fc6 <__vector_16>:
__vector_16():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
     fc6:	1f 92       	push	r1
     fc8:	0f 92       	push	r0
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	0f 92       	push	r0
     fce:	11 24       	eor	r1, r1
     fd0:	2f 93       	push	r18
     fd2:	3f 93       	push	r19
     fd4:	8f 93       	push	r24
     fd6:	9f 93       	push	r25
     fd8:	af 93       	push	r26
     fda:	bf 93       	push	r27
     fdc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <timer0_millis>
     fe0:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <timer0_millis+0x1>
     fe4:	a0 91 bf 01 	lds	r26, 0x01BF	; 0x8001bf <timer0_millis+0x2>
     fe8:	b0 91 c0 01 	lds	r27, 0x01C0	; 0x8001c0 <timer0_millis+0x3>
     fec:	30 91 bc 01 	lds	r19, 0x01BC	; 0x8001bc <timer0_fract>
     ff0:	23 e0       	ldi	r18, 0x03	; 3
     ff2:	23 0f       	add	r18, r19
     ff4:	2d 37       	cpi	r18, 0x7D	; 125
     ff6:	68 f1       	brcs	.+90     	; 0x1052 <__vector_16+0x8c>
     ff8:	26 e8       	ldi	r18, 0x86	; 134
     ffa:	23 0f       	add	r18, r19
     ffc:	02 96       	adiw	r24, 0x02	; 2
     ffe:	a1 1d       	adc	r26, r1
    1000:	b1 1d       	adc	r27, r1
    1002:	20 93 bc 01 	sts	0x01BC, r18	; 0x8001bc <timer0_fract>
    1006:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <timer0_millis>
    100a:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <timer0_millis+0x1>
    100e:	a0 93 bf 01 	sts	0x01BF, r26	; 0x8001bf <timer0_millis+0x2>
    1012:	b0 93 c0 01 	sts	0x01C0, r27	; 0x8001c0 <timer0_millis+0x3>
    1016:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <timer0_overflow_count>
    101a:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <timer0_overflow_count+0x1>
    101e:	a0 91 ba 01 	lds	r26, 0x01BA	; 0x8001ba <timer0_overflow_count+0x2>
    1022:	b0 91 bb 01 	lds	r27, 0x01BB	; 0x8001bb <timer0_overflow_count+0x3>
    1026:	01 96       	adiw	r24, 0x01	; 1
    1028:	a1 1d       	adc	r26, r1
    102a:	b1 1d       	adc	r27, r1
    102c:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <timer0_overflow_count>
    1030:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <timer0_overflow_count+0x1>
    1034:	a0 93 ba 01 	sts	0x01BA, r26	; 0x8001ba <timer0_overflow_count+0x2>
    1038:	b0 93 bb 01 	sts	0x01BB, r27	; 0x8001bb <timer0_overflow_count+0x3>
    103c:	bf 91       	pop	r27
    103e:	af 91       	pop	r26
    1040:	9f 91       	pop	r25
    1042:	8f 91       	pop	r24
    1044:	3f 91       	pop	r19
    1046:	2f 91       	pop	r18
    1048:	0f 90       	pop	r0
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	0f 90       	pop	r0
    104e:	1f 90       	pop	r1
    1050:	18 95       	reti
    1052:	01 96       	adiw	r24, 0x01	; 1
    1054:	a1 1d       	adc	r26, r1
    1056:	b1 1d       	adc	r27, r1
    1058:	d4 cf       	rjmp	.-88     	; 0x1002 <__vector_16+0x3c>

0000105a <millis>:
millis():
    105a:	2f b7       	in	r18, 0x3f	; 63
    105c:	f8 94       	cli
    105e:	60 91 bd 01 	lds	r22, 0x01BD	; 0x8001bd <timer0_millis>
    1062:	70 91 be 01 	lds	r23, 0x01BE	; 0x8001be <timer0_millis+0x1>
    1066:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <timer0_millis+0x2>
    106a:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <timer0_millis+0x3>
    106e:	2f bf       	out	0x3f, r18	; 63
    1070:	08 95       	ret

00001072 <micros>:
micros():
    1072:	3f b7       	in	r19, 0x3f	; 63
    1074:	f8 94       	cli
    1076:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <timer0_overflow_count>
    107a:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <timer0_overflow_count+0x1>
    107e:	a0 91 ba 01 	lds	r26, 0x01BA	; 0x8001ba <timer0_overflow_count+0x2>
    1082:	b0 91 bb 01 	lds	r27, 0x01BB	; 0x8001bb <timer0_overflow_count+0x3>
    1086:	26 b5       	in	r18, 0x26	; 38
    1088:	a8 9b       	sbis	0x15, 0	; 21
    108a:	05 c0       	rjmp	.+10     	; 0x1096 <micros+0x24>
    108c:	2f 3f       	cpi	r18, 0xFF	; 255
    108e:	19 f0       	breq	.+6      	; 0x1096 <micros+0x24>
    1090:	01 96       	adiw	r24, 0x01	; 1
    1092:	a1 1d       	adc	r26, r1
    1094:	b1 1d       	adc	r27, r1
    1096:	3f bf       	out	0x3f, r19	; 63
    1098:	ba 2f       	mov	r27, r26
    109a:	a9 2f       	mov	r26, r25
    109c:	98 2f       	mov	r25, r24
    109e:	88 27       	eor	r24, r24
    10a0:	bc 01       	movw	r22, r24
    10a2:	cd 01       	movw	r24, r26
    10a4:	62 0f       	add	r22, r18
    10a6:	71 1d       	adc	r23, r1
    10a8:	81 1d       	adc	r24, r1
    10aa:	91 1d       	adc	r25, r1
    10ac:	42 e0       	ldi	r20, 0x02	; 2
    10ae:	66 0f       	add	r22, r22
    10b0:	77 1f       	adc	r23, r23
    10b2:	88 1f       	adc	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	4a 95       	dec	r20
    10b8:	d1 f7       	brne	.-12     	; 0x10ae <micros+0x3c>
    10ba:	08 95       	ret

000010bc <delay>:
delay():
    10bc:	8f 92       	push	r8
    10be:	9f 92       	push	r9
    10c0:	af 92       	push	r10
    10c2:	bf 92       	push	r11
    10c4:	cf 92       	push	r12
    10c6:	df 92       	push	r13
    10c8:	ef 92       	push	r14
    10ca:	ff 92       	push	r15
    10cc:	6b 01       	movw	r12, r22
    10ce:	7c 01       	movw	r14, r24
    10d0:	0e 94 39 08 	call	0x1072	; 0x1072 <micros>
    10d4:	4b 01       	movw	r8, r22
    10d6:	5c 01       	movw	r10, r24
    10d8:	c1 14       	cp	r12, r1
    10da:	d1 04       	cpc	r13, r1
    10dc:	e1 04       	cpc	r14, r1
    10de:	f1 04       	cpc	r15, r1
    10e0:	e9 f0       	breq	.+58     	; 0x111c <delay+0x60>
    10e2:	0e 94 77 0b 	call	0x16ee	; 0x16ee <yield>
    10e6:	0e 94 39 08 	call	0x1072	; 0x1072 <micros>
    10ea:	68 19       	sub	r22, r8
    10ec:	79 09       	sbc	r23, r9
    10ee:	8a 09       	sbc	r24, r10
    10f0:	9b 09       	sbc	r25, r11
    10f2:	68 3e       	cpi	r22, 0xE8	; 232
    10f4:	73 40       	sbci	r23, 0x03	; 3
    10f6:	81 05       	cpc	r24, r1
    10f8:	91 05       	cpc	r25, r1
    10fa:	70 f3       	brcs	.-36     	; 0x10d8 <delay+0x1c>
    10fc:	21 e0       	ldi	r18, 0x01	; 1
    10fe:	c2 1a       	sub	r12, r18
    1100:	d1 08       	sbc	r13, r1
    1102:	e1 08       	sbc	r14, r1
    1104:	f1 08       	sbc	r15, r1
    1106:	88 ee       	ldi	r24, 0xE8	; 232
    1108:	88 0e       	add	r8, r24
    110a:	83 e0       	ldi	r24, 0x03	; 3
    110c:	98 1e       	adc	r9, r24
    110e:	a1 1c       	adc	r10, r1
    1110:	b1 1c       	adc	r11, r1
    1112:	c1 14       	cp	r12, r1
    1114:	d1 04       	cpc	r13, r1
    1116:	e1 04       	cpc	r14, r1
    1118:	f1 04       	cpc	r15, r1
    111a:	29 f7       	brne	.-54     	; 0x10e6 <delay+0x2a>
    111c:	ff 90       	pop	r15
    111e:	ef 90       	pop	r14
    1120:	df 90       	pop	r13
    1122:	cf 90       	pop	r12
    1124:	bf 90       	pop	r11
    1126:	af 90       	pop	r10
    1128:	9f 90       	pop	r9
    112a:	8f 90       	pop	r8
    112c:	08 95       	ret

0000112e <init>:
init():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    112e:	78 94       	sei
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    1130:	84 b5       	in	r24, 0x24	; 36
    1132:	83 60       	ori	r24, 0x03	; 3
    1134:	84 bd       	out	0x24, r24	; 36
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    1136:	85 b5       	in	r24, 0x25	; 37
    1138:	83 60       	ori	r24, 0x03	; 3
    113a:	85 bd       	out	0x25, r24	; 37
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    113c:	ee e6       	ldi	r30, 0x6E	; 110
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	81 60       	ori	r24, 0x01	; 1
    1144:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    1146:	e1 e8       	ldi	r30, 0x81	; 129
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	82 e0       	ldi	r24, 0x02	; 2
    114c:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    114e:	80 81       	ld	r24, Z
    1150:	81 60       	ori	r24, 0x01	; 1
    1152:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    1154:	e0 e8       	ldi	r30, 0x80	; 128
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	81 60       	ori	r24, 0x01	; 1
    115c:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    115e:	e1 eb       	ldi	r30, 0xB1	; 177
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	84 60       	ori	r24, 0x04	; 4
    1166:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    1168:	e0 eb       	ldi	r30, 0xB0	; 176
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	81 60       	ori	r24, 0x01	; 1
    1170:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    1172:	87 e8       	ldi	r24, 0x87	; 135
    1174:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    1178:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    117c:	08 95       	ret

0000117e <turnOffPWM>:
turnOffPWM():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    117e:	84 30       	cpi	r24, 0x04	; 4
    1180:	81 f0       	breq	.+32     	; 0x11a2 <turnOffPWM+0x24>
    1182:	28 f4       	brcc	.+10     	; 0x118e <turnOffPWM+0x10>
    1184:	82 30       	cpi	r24, 0x02	; 2
    1186:	e9 f0       	breq	.+58     	; 0x11c2 <turnOffPWM+0x44>
    1188:	83 30       	cpi	r24, 0x03	; 3
    118a:	f9 f0       	breq	.+62     	; 0x11ca <turnOffPWM+0x4c>
    118c:	08 95       	ret
    118e:	88 30       	cpi	r24, 0x08	; 8
    1190:	71 f0       	breq	.+28     	; 0x11ae <turnOffPWM+0x30>
    1192:	89 30       	cpi	r24, 0x09	; 9
    1194:	91 f0       	breq	.+36     	; 0x11ba <turnOffPWM+0x3c>
    1196:	85 30       	cpi	r24, 0x05	; 5
    1198:	b9 f4       	brne	.+46     	; 0x11c8 <turnOffPWM+0x4a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    119a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    119e:	8f 7d       	andi	r24, 0xDF	; 223
    11a0:	03 c0       	rjmp	.+6      	; 0x11a8 <turnOffPWM+0x2a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    11a2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    11a6:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    11a8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    11ac:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    11ae:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    11b2:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    11b4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
    11b8:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    11ba:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    11be:	8f 7d       	andi	r24, 0xDF	; 223
    11c0:	f9 cf       	rjmp	.-14     	; 0x11b4 <turnOffPWM+0x36>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    11c2:	84 b5       	in	r24, 0x24	; 36
    11c4:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    11c6:	84 bd       	out	0x24, r24	; 36
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    11c8:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    11ca:	84 b5       	in	r24, 0x24	; 36
    11cc:	8f 7d       	andi	r24, 0xDF	; 223
    11ce:	fb cf       	rjmp	.-10     	; 0x11c6 <turnOffPWM+0x48>

000011d0 <pinMode>:
pinMode():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    11d0:	cf 93       	push	r28
    11d2:	df 93       	push	r29
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	fc 01       	movw	r30, r24
    11d8:	e1 58       	subi	r30, 0x81	; 129
    11da:	ff 4f       	sbci	r31, 0xFF	; 255
    11dc:	24 91       	lpm	r18, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    11de:	8a 56       	subi	r24, 0x6A	; 106
    11e0:	9f 4f       	sbci	r25, 0xFF	; 255
    11e2:	fc 01       	movw	r30, r24
    11e4:	84 91       	lpm	r24, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    11e6:	88 23       	and	r24, r24
    11e8:	c9 f0       	breq	.+50     	; 0x121c <pinMode+0x4c>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	fc 01       	movw	r30, r24
    11f2:	ef 53       	subi	r30, 0x3F	; 63
    11f4:	ff 4f       	sbci	r31, 0xFF	; 255
    11f6:	a5 91       	lpm	r26, Z+
    11f8:	b4 91       	lpm	r27, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    11fa:	fc 01       	movw	r30, r24
    11fc:	e9 54       	subi	r30, 0x49	; 73
    11fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1200:	c5 91       	lpm	r28, Z+
    1202:	d4 91       	lpm	r29, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    1204:	61 11       	cpse	r22, r1
    1206:	0d c0       	rjmp	.+26     	; 0x1222 <pinMode+0x52>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    1208:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    120a:	f8 94       	cli
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    120c:	8c 91       	ld	r24, X
    120e:	20 95       	com	r18
    1210:	82 23       	and	r24, r18
    1212:	8c 93       	st	X, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    1214:	88 81       	ld	r24, Y
    1216:	28 23       	and	r18, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    1218:	28 83       	st	Y, r18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    121a:	9f bf       	out	0x3f, r25	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    1222:	62 30       	cpi	r22, 0x02	; 2
    1224:	51 f4       	brne	.+20     	; 0x123a <pinMode+0x6a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    1226:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    1228:	f8 94       	cli
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    122a:	3c 91       	ld	r19, X
    122c:	82 2f       	mov	r24, r18
    122e:	80 95       	com	r24
    1230:	83 23       	and	r24, r19
    1232:	8c 93       	st	X, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    1234:	e8 81       	ld	r30, Y
    1236:	2e 2b       	or	r18, r30
    1238:	ef cf       	rjmp	.-34     	; 0x1218 <pinMode+0x48>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    123a:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    123c:	f8 94       	cli
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    123e:	ec 91       	ld	r30, X
    1240:	2e 2b       	or	r18, r30
    1242:	2c 93       	st	X, r18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    1244:	8f bf       	out	0x3f, r24	; 63
    1246:	ea cf       	rjmp	.-44     	; 0x121c <pinMode+0x4c>

00001248 <digitalWrite>:
digitalWrite():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1248:	1f 93       	push	r17
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	f9 01       	movw	r30, r18
    1254:	e8 59       	subi	r30, 0x98	; 152
    1256:	ff 4f       	sbci	r31, 0xFF	; 255
    1258:	84 91       	lpm	r24, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    125a:	f9 01       	movw	r30, r18
    125c:	e1 58       	subi	r30, 0x81	; 129
    125e:	ff 4f       	sbci	r31, 0xFF	; 255
    1260:	d4 91       	lpm	r29, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    1262:	f9 01       	movw	r30, r18
    1264:	ea 56       	subi	r30, 0x6A	; 106
    1266:	ff 4f       	sbci	r31, 0xFF	; 255
    1268:	c4 91       	lpm	r28, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    126a:	cc 23       	and	r28, r28
    126c:	a9 f0       	breq	.+42     	; 0x1298 <digitalWrite+0x50>
    126e:	16 2f       	mov	r17, r22
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1270:	81 11       	cpse	r24, r1
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    1272:	0e 94 bf 08 	call	0x117e	; 0x117e <turnOffPWM>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    1276:	ec 2f       	mov	r30, r28
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	ee 0f       	add	r30, r30
    127c:	ff 1f       	adc	r31, r31
    127e:	e9 54       	subi	r30, 0x49	; 73
    1280:	ff 4f       	sbci	r31, 0xFF	; 255
    1282:	a5 91       	lpm	r26, Z+
    1284:	b4 91       	lpm	r27, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    1286:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    1288:	f8 94       	cli
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    128a:	ec 91       	ld	r30, X
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    128c:	11 11       	cpse	r17, r1
    128e:	08 c0       	rjmp	.+16     	; 0x12a0 <digitalWrite+0x58>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    1290:	d0 95       	com	r29
    1292:	de 23       	and	r29, r30
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    1294:	dc 93       	st	X, r29
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    1296:	8f bf       	out	0x3f, r24	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
    1298:	df 91       	pop	r29
    129a:	cf 91       	pop	r28
    129c:	1f 91       	pop	r17
    129e:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    12a0:	de 2b       	or	r29, r30
    12a2:	f8 cf       	rjmp	.-16     	; 0x1294 <digitalWrite+0x4c>

000012a4 <digitalRead>:
digitalRead():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    12a4:	cf 93       	push	r28
    12a6:	df 93       	push	r29
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	f9 01       	movw	r30, r18
    12ae:	e8 59       	subi	r30, 0x98	; 152
    12b0:	ff 4f       	sbci	r31, 0xFF	; 255
    12b2:	84 91       	lpm	r24, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    12b4:	f9 01       	movw	r30, r18
    12b6:	e1 58       	subi	r30, 0x81	; 129
    12b8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ba:	d4 91       	lpm	r29, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    12bc:	f9 01       	movw	r30, r18
    12be:	ea 56       	subi	r30, 0x6A	; 106
    12c0:	ff 4f       	sbci	r31, 0xFF	; 255
    12c2:	c4 91       	lpm	r28, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    12c4:	cc 23       	and	r28, r28
    12c6:	a1 f0       	breq	.+40     	; 0x12f0 <digitalRead+0x4c>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    12c8:	81 11       	cpse	r24, r1
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    12ca:	0e 94 bf 08 	call	0x117e	; 0x117e <turnOffPWM>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    12ce:	ec 2f       	mov	r30, r28
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	ee 0f       	add	r30, r30
    12d4:	ff 1f       	adc	r31, r31
    12d6:	e3 55       	subi	r30, 0x53	; 83
    12d8:	ff 4f       	sbci	r31, 0xFF	; 255
    12da:	a5 91       	lpm	r26, Z+
    12dc:	b4 91       	lpm	r27, Z
    12de:	ec 91       	ld	r30, X
    12e0:	ed 23       	and	r30, r29
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	09 f4       	brne	.+2      	; 0x12ea <digitalRead+0x46>
    12e8:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    12ea:	df 91       	pop	r29
    12ec:	cf 91       	pop	r28
    12ee:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	fa cf       	rjmp	.-12     	; 0x12ea <digitalRead+0x46>

000012f6 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    12f6:	fc 01       	movw	r30, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    12f8:	91 8d       	ldd	r25, Z+25	; 0x19
    12fa:	22 8d       	ldd	r18, Z+26	; 0x1a
    12fc:	89 2f       	mov	r24, r25
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	80 5c       	subi	r24, 0xC0	; 192
    1302:	9f 4f       	sbci	r25, 0xFF	; 255
    1304:	82 1b       	sub	r24, r18
    1306:	91 09       	sbc	r25, r1
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:152
}
    1308:	8f 73       	andi	r24, 0x3F	; 63
    130a:	99 27       	eor	r25, r25
    130c:	08 95       	ret

0000130e <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
    130e:	fc 01       	movw	r30, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
    1310:	91 8d       	ldd	r25, Z+25	; 0x19
    1312:	82 8d       	ldd	r24, Z+26	; 0x1a
    1314:	98 17       	cp	r25, r24
    1316:	31 f0       	breq	.+12     	; 0x1324 <HardwareSerial::peek()+0x16>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1318:	82 8d       	ldd	r24, Z+26	; 0x1a
    131a:	e8 0f       	add	r30, r24
    131c:	f1 1d       	adc	r31, r1
    131e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1324:	8f ef       	ldi	r24, 0xFF	; 255
    1326:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1328:	08 95       	ret

0000132a <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
    132a:	fc 01       	movw	r30, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    132c:	91 8d       	ldd	r25, Z+25	; 0x19
    132e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1330:	98 17       	cp	r25, r24
    1332:	61 f0       	breq	.+24     	; 0x134c <HardwareSerial::read()+0x22>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1334:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1336:	ae 0f       	add	r26, r30
    1338:	bf 2f       	mov	r27, r31
    133a:	b1 1d       	adc	r27, r1
    133c:	5d 96       	adiw	r26, 0x1d	; 29
    133e:	8c 91       	ld	r24, X
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1340:	92 8d       	ldd	r25, Z+26	; 0x1a
    1342:	9f 5f       	subi	r25, 0xFF	; 255
    1344:	9f 73       	andi	r25, 0x3F	; 63
    1346:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    134c:	8f ef       	ldi	r24, 0xFF	; 255
    134e:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1350:	08 95       	ret

00001352 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    1352:	fc 01       	movw	r30, r24
    1354:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
    1356:	44 8d       	ldd	r20, Z+28	; 0x1c
    1358:	25 2f       	mov	r18, r21
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	84 2f       	mov	r24, r20
    135e:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1360:	82 1b       	sub	r24, r18
    1362:	93 0b       	sbc	r25, r19
    1364:	54 17       	cp	r21, r20
    1366:	10 f0       	brcs	.+4      	; 0x136c <HardwareSerial::availableForWrite()+0x1a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
    1368:	cf 96       	adiw	r24, 0x3f	; 63
    136a:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
    136c:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:188
}
    136e:	08 95       	ret

00001370 <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1370:	8e ef       	ldi	r24, 0xFE	; 254
    1372:	9a e0       	ldi	r25, 0x0A	; 10
    1374:	89 2b       	or	r24, r25
    1376:	49 f0       	breq	.+18     	; 0x138a <serialEventRun()+0x1a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	89 2b       	or	r24, r25
    137e:	29 f0       	breq	.+10     	; 0x138a <serialEventRun()+0x1a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
    1380:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <Serial0_available()>
    1384:	81 11       	cpse	r24, r1
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
    1386:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    138a:	08 95       	ret

0000138c <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    138c:	fc 01       	movw	r30, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    138e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1390:	a8 0f       	add	r26, r24
    1392:	b9 2f       	mov	r27, r25
    1394:	b1 1d       	adc	r27, r1
    1396:	a3 5a       	subi	r26, 0xA3	; 163
    1398:	bf 4f       	sbci	r27, 0xFF	; 255
    139a:	2c 91       	ld	r18, X
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    139c:	84 8d       	ldd	r24, Z+28	; 0x1c
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	01 96       	adiw	r24, 0x01	; 1
    13a2:	8f 73       	andi	r24, 0x3F	; 63
    13a4:	99 27       	eor	r25, r25
    13a6:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
    13a8:	a6 89       	ldd	r26, Z+22	; 0x16
    13aa:	b7 89       	ldd	r27, Z+23	; 0x17
    13ac:	2c 93       	st	X, r18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
    13ae:	a0 89       	ldd	r26, Z+16	; 0x10
    13b0:	b1 89       	ldd	r27, Z+17	; 0x11
    13b2:	8c 91       	ld	r24, X
    13b4:	80 64       	ori	r24, 0x40	; 64
    13b6:	8c 93       	st	X, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
    13b8:	93 8d       	ldd	r25, Z+27	; 0x1b
    13ba:	84 8d       	ldd	r24, Z+28	; 0x1c
    13bc:	98 13       	cpse	r25, r24
    13be:	06 c0       	rjmp	.+12     	; 0x13cc <HardwareSerial::_tx_udr_empty_irq()+0x40>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    13c0:	02 88       	ldd	r0, Z+18	; 0x12
    13c2:	f3 89       	ldd	r31, Z+19	; 0x13
    13c4:	e0 2d       	mov	r30, r0
    13c6:	80 81       	ld	r24, Z
    13c8:	8f 7d       	andi	r24, 0xDF	; 223
    13ca:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
    13cc:	08 95       	ret

000013ce <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    13ce:	cf 93       	push	r28
    13d0:	df 93       	push	r29
    13d2:	ec 01       	movw	r28, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    13d4:	88 8d       	ldd	r24, Y+24	; 0x18
    13d6:	88 23       	and	r24, r24
    13d8:	b9 f0       	breq	.+46     	; 0x1408 <HardwareSerial::flush()+0x3a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    13da:	aa 89       	ldd	r26, Y+18	; 0x12
    13dc:	bb 89       	ldd	r27, Y+19	; 0x13
    13de:	e8 89       	ldd	r30, Y+16	; 0x10
    13e0:	f9 89       	ldd	r31, Y+17	; 0x11
    13e2:	8c 91       	ld	r24, X
    13e4:	85 fd       	sbrc	r24, 5
    13e6:	03 c0       	rjmp	.+6      	; 0x13ee <HardwareSerial::flush()+0x20>
    13e8:	80 81       	ld	r24, Z
    13ea:	86 fd       	sbrc	r24, 6
    13ec:	0d c0       	rjmp	.+26     	; 0x1408 <HardwareSerial::flush()+0x3a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	07 fc       	sbrc	r0, 7
    13f2:	f7 cf       	rjmp	.-18     	; 0x13e2 <HardwareSerial::flush()+0x14>
    13f4:	8c 91       	ld	r24, X
    13f6:	85 ff       	sbrs	r24, 5
    13f8:	f2 cf       	rjmp	.-28     	; 0x13de <HardwareSerial::flush()+0x10>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    13fa:	80 81       	ld	r24, Z
    13fc:	85 ff       	sbrs	r24, 5
    13fe:	ed cf       	rjmp	.-38     	; 0x13da <HardwareSerial::flush()+0xc>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
    1400:	ce 01       	movw	r24, r28
    1402:	0e 94 c6 09 	call	0x138c	; 0x138c <HardwareSerial::_tx_udr_empty_irq()>
    1406:	e9 cf       	rjmp	.-46     	; 0x13da <HardwareSerial::flush()+0xc>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	08 95       	ret

0000140e <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
    140e:	ef 92       	push	r14
    1410:	ff 92       	push	r15
    1412:	0f 93       	push	r16
    1414:	1f 93       	push	r17
    1416:	cf 93       	push	r28
    1418:	df 93       	push	r29
    141a:	ec 01       	movw	r28, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1420:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1422:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1424:	98 13       	cpse	r25, r24
    1426:	16 c0       	rjmp	.+44     	; 0x1454 <HardwareSerial::write(unsigned char)+0x46>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
    1428:	e8 89       	ldd	r30, Y+16	; 0x10
    142a:	f9 89       	ldd	r31, Y+17	; 0x11
    142c:	80 81       	ld	r24, Z
    142e:	85 ff       	sbrs	r24, 5
    1430:	11 c0       	rjmp	.+34     	; 0x1454 <HardwareSerial::write(unsigned char)+0x46>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
    1432:	ee 89       	ldd	r30, Y+22	; 0x16
    1434:	ff 89       	ldd	r31, Y+23	; 0x17
    1436:	60 83       	st	Z, r22
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
    1438:	e8 89       	ldd	r30, Y+16	; 0x10
    143a:	f9 89       	ldd	r31, Y+17	; 0x11
    143c:	80 81       	ld	r24, Z
    143e:	80 64       	ori	r24, 0x40	; 64
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
    1440:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	df 91       	pop	r29
    1448:	cf 91       	pop	r28
    144a:	1f 91       	pop	r17
    144c:	0f 91       	pop	r16
    144e:	ff 90       	pop	r15
    1450:	ef 90       	pop	r14
    1452:	08 95       	ret
    1454:	f6 2e       	mov	r15, r22
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1456:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1458:	10 e0       	ldi	r17, 0x00	; 0
    145a:	0f 5f       	subi	r16, 0xFF	; 255
    145c:	1f 4f       	sbci	r17, 0xFF	; 255
    145e:	0f 73       	andi	r16, 0x3F	; 63
    1460:	11 27       	eor	r17, r17
    1462:	e0 2e       	mov	r14, r16
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1464:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1466:	8e 11       	cpse	r24, r14
    1468:	0c c0       	rjmp	.+24     	; 0x1482 <HardwareSerial::write(unsigned char)+0x74>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
    146a:	0f b6       	in	r0, 0x3f	; 63
    146c:	07 fc       	sbrc	r0, 7
    146e:	fa cf       	rjmp	.-12     	; 0x1464 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1470:	e8 89       	ldd	r30, Y+16	; 0x10
    1472:	f9 89       	ldd	r31, Y+17	; 0x11
    1474:	80 81       	ld	r24, Z
    1476:	85 ff       	sbrs	r24, 5
    1478:	f5 cf       	rjmp	.-22     	; 0x1464 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
    147a:	ce 01       	movw	r24, r28
    147c:	0e 94 c6 09 	call	0x138c	; 0x138c <HardwareSerial::_tx_udr_empty_irq()>
    1480:	f1 cf       	rjmp	.-30     	; 0x1464 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1482:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1484:	ec 0f       	add	r30, r28
    1486:	fd 2f       	mov	r31, r29
    1488:	f1 1d       	adc	r31, r1
    148a:	e3 5a       	subi	r30, 0xA3	; 163
    148c:	ff 4f       	sbci	r31, 0xFF	; 255
    148e:	f0 82       	st	Z, r15
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
    1490:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
    1492:	ea 89       	ldd	r30, Y+18	; 0x12
    1494:	fb 89       	ldd	r31, Y+19	; 0x13
    1496:	80 81       	ld	r24, Z
    1498:	80 62       	ori	r24, 0x20	; 32
    149a:	d2 cf       	rjmp	.-92     	; 0x1440 <HardwareSerial::write(unsigned char)+0x32>

0000149c <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:104
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    149c:	cf 92       	push	r12
    149e:	df 92       	push	r13
    14a0:	ef 92       	push	r14
    14a2:	ff 92       	push	r15
    14a4:	1f 93       	push	r17
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	ec 01       	movw	r28, r24
    14ac:	6a 01       	movw	r12, r20
    14ae:	7b 01       	movw	r14, r22
    14b0:	12 2f       	mov	r17, r18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:107
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    14b2:	e8 89       	ldd	r30, Y+16	; 0x10
    14b4:	f9 89       	ldd	r31, Y+17	; 0x11
    14b6:	82 e0       	ldi	r24, 0x02	; 2
    14b8:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    14ba:	c1 14       	cp	r12, r1
    14bc:	81 ee       	ldi	r24, 0xE1	; 225
    14be:	d8 06       	cpc	r13, r24
    14c0:	e1 04       	cpc	r14, r1
    14c2:	f1 04       	cpc	r15, r1
    14c4:	a1 f0       	breq	.+40     	; 0x14ee <HardwareSerial::begin(unsigned long, unsigned char)+0x52>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:106 (discriminator 1)
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    14c6:	60 e0       	ldi	r22, 0x00	; 0
    14c8:	79 e0       	ldi	r23, 0x09	; 9
    14ca:	8d e3       	ldi	r24, 0x3D	; 61
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	a7 01       	movw	r20, r14
    14d0:	96 01       	movw	r18, r12
    14d2:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__udivmodsi4>
    14d6:	21 50       	subi	r18, 0x01	; 1
    14d8:	31 09       	sbc	r19, r1
    14da:	41 09       	sbc	r20, r1
    14dc:	51 09       	sbc	r21, r1
    14de:	56 95       	lsr	r21
    14e0:	47 95       	ror	r20
    14e2:	37 95       	ror	r19
    14e4:	27 95       	ror	r18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114 (discriminator 1)
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    14e6:	21 15       	cp	r18, r1
    14e8:	80 e1       	ldi	r24, 0x10	; 16
    14ea:	38 07       	cpc	r19, r24
    14ec:	98 f0       	brcs	.+38     	; 0x1514 <HardwareSerial::begin(unsigned long, unsigned char)+0x78>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:116
  {
    *_ucsra = 0;
    14ee:	e8 89       	ldd	r30, Y+16	; 0x10
    14f0:	f9 89       	ldd	r31, Y+17	; 0x11
    14f2:	10 82       	st	Z, r1
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:117
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    14f4:	60 e8       	ldi	r22, 0x80	; 128
    14f6:	74 e8       	ldi	r23, 0x84	; 132
    14f8:	8e e1       	ldi	r24, 0x1E	; 30
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	a7 01       	movw	r20, r14
    14fe:	96 01       	movw	r18, r12
    1500:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__udivmodsi4>
    1504:	21 50       	subi	r18, 0x01	; 1
    1506:	31 09       	sbc	r19, r1
    1508:	41 09       	sbc	r20, r1
    150a:	51 09       	sbc	r21, r1
    150c:	56 95       	lsr	r21
    150e:	47 95       	ror	r20
    1510:	37 95       	ror	r19
    1512:	27 95       	ror	r18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1514:	ec 85       	ldd	r30, Y+12	; 0x0c
    1516:	fd 85       	ldd	r31, Y+13	; 0x0d
    1518:	30 83       	st	Z, r19
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
    151a:	ee 85       	ldd	r30, Y+14	; 0x0e
    151c:	ff 85       	ldd	r31, Y+15	; 0x0f
    151e:	20 83       	st	Z, r18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:124

  _written = false;
    1520:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:132
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1522:	ec 89       	ldd	r30, Y+20	; 0x14
    1524:	fd 89       	ldd	r31, Y+21	; 0x15
    1526:	10 83       	st	Z, r17
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:134
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    1528:	ea 89       	ldd	r30, Y+18	; 0x12
    152a:	fb 89       	ldd	r31, Y+19	; 0x13
    152c:	80 81       	ld	r24, Z
    152e:	88 69       	ori	r24, 0x98	; 152
    1530:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  *_ucsrb &= ~_BV(UDRIE0);
    1532:	ea 89       	ldd	r30, Y+18	; 0x12
    1534:	fb 89       	ldd	r31, Y+19	; 0x13
    1536:	80 81       	ld	r24, Z
    1538:	8f 7d       	andi	r24, 0xDF	; 223
    153a:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:136
}
    153c:	df 91       	pop	r29
    153e:	cf 91       	pop	r28
    1540:	1f 91       	pop	r17
    1542:	ff 90       	pop	r15
    1544:	ef 90       	pop	r14
    1546:	df 90       	pop	r13
    1548:	cf 90       	pop	r12
    154a:	08 95       	ret

0000154c <__vector_18>:
__vector_18():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    154c:	1f 92       	push	r1
    154e:	0f 92       	push	r0
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	0f 92       	push	r0
    1554:	11 24       	eor	r1, r1
    1556:	2f 93       	push	r18
    1558:	8f 93       	push	r24
    155a:	9f 93       	push	r25
    155c:	ef 93       	push	r30
    155e:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1560:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <Serial+0x10>
    1564:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <Serial+0x11>
    1568:	80 81       	ld	r24, Z
    156a:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <Serial+0x16>
    156e:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <Serial+0x17>
    1572:	82 fd       	sbrc	r24, 2
    1574:	1b c0       	rjmp	.+54     	; 0x15ac <__vector_18+0x60>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1576:	90 81       	ld	r25, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1578:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <Serial+0x19>
    157c:	8f 5f       	subi	r24, 0xFF	; 255
    157e:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1580:	20 91 db 01 	lds	r18, 0x01DB	; 0x8001db <Serial+0x1a>
    1584:	82 17       	cp	r24, r18
    1586:	41 f0       	breq	.+16     	; 0x1598 <__vector_18+0x4c>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
    1588:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <Serial+0x19>
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	ef 53       	subi	r30, 0x3F	; 63
    1590:	fe 4f       	sbci	r31, 0xFE	; 254
    1592:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
    1594:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <Serial+0x19>
__vector_18():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    1598:	ff 91       	pop	r31
    159a:	ef 91       	pop	r30
    159c:	9f 91       	pop	r25
    159e:	8f 91       	pop	r24
    15a0:	2f 91       	pop	r18
    15a2:	0f 90       	pop	r0
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	0f 90       	pop	r0
    15a8:	1f 90       	pop	r1
    15aa:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    15ac:	80 81       	ld	r24, Z
__vector_18():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    15ae:	f4 cf       	rjmp	.-24     	; 0x1598 <__vector_18+0x4c>

000015b0 <__vector_19>:
__vector_19():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    15b0:	1f 92       	push	r1
    15b2:	0f 92       	push	r0
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	0f 92       	push	r0
    15b8:	11 24       	eor	r1, r1
    15ba:	2f 93       	push	r18
    15bc:	3f 93       	push	r19
    15be:	4f 93       	push	r20
    15c0:	5f 93       	push	r21
    15c2:	6f 93       	push	r22
    15c4:	7f 93       	push	r23
    15c6:	8f 93       	push	r24
    15c8:	9f 93       	push	r25
    15ca:	af 93       	push	r26
    15cc:	bf 93       	push	r27
    15ce:	ef 93       	push	r30
    15d0:	ff 93       	push	r31
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    15d2:	81 ec       	ldi	r24, 0xC1	; 193
    15d4:	91 e0       	ldi	r25, 0x01	; 1
    15d6:	0e 94 c6 09 	call	0x138c	; 0x138c <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    15da:	ff 91       	pop	r31
    15dc:	ef 91       	pop	r30
    15de:	bf 91       	pop	r27
    15e0:	af 91       	pop	r26
    15e2:	9f 91       	pop	r25
    15e4:	8f 91       	pop	r24
    15e6:	7f 91       	pop	r23
    15e8:	6f 91       	pop	r22
    15ea:	5f 91       	pop	r21
    15ec:	4f 91       	pop	r20
    15ee:	3f 91       	pop	r19
    15f0:	2f 91       	pop	r18
    15f2:	0f 90       	pop	r0
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	0f 90       	pop	r0
    15f8:	1f 90       	pop	r1
    15fa:	18 95       	reti

000015fc <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    15fc:	81 ec       	ldi	r24, 0xC1	; 193
    15fe:	91 e0       	ldi	r25, 0x01	; 1
    1600:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <HardwareSerial::available()>
    1604:	21 e0       	ldi	r18, 0x01	; 1
    1606:	89 2b       	or	r24, r25
    1608:	09 f4       	brne	.+2      	; 0x160c <Serial0_available()+0x10>
    160a:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
    160c:	82 2f       	mov	r24, r18
    160e:	08 95       	ret

00001610 <_GLOBAL__sub_I___vector_18>:
_ZN5PrintC4Ev():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1610:	e1 ec       	ldi	r30, 0xC1	; 193
    1612:	f1 e0       	ldi	r31, 0x01	; 1
    1614:	13 82       	std	Z+3, r1	; 0x03
    1616:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1618:	88 ee       	ldi	r24, 0xE8	; 232
    161a:	93 e0       	ldi	r25, 0x03	; 3
    161c:	a0 e0       	ldi	r26, 0x00	; 0
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	84 83       	std	Z+4, r24	; 0x04
    1622:	95 83       	std	Z+5, r25	; 0x05
    1624:	a6 83       	std	Z+6, r26	; 0x06
    1626:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1628:	8e e1       	ldi	r24, 0x1E	; 30
    162a:	91 e0       	ldi	r25, 0x01	; 1
    162c:	91 83       	std	Z+1, r25	; 0x01
    162e:	80 83       	st	Z, r24
    1630:	85 ec       	ldi	r24, 0xC5	; 197
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	95 87       	std	Z+13, r25	; 0x0d
    1636:	84 87       	std	Z+12, r24	; 0x0c
    1638:	84 ec       	ldi	r24, 0xC4	; 196
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	97 87       	std	Z+15, r25	; 0x0f
    163e:	86 87       	std	Z+14, r24	; 0x0e
    1640:	80 ec       	ldi	r24, 0xC0	; 192
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	91 8b       	std	Z+17, r25	; 0x11
    1646:	80 8b       	std	Z+16, r24	; 0x10
    1648:	81 ec       	ldi	r24, 0xC1	; 193
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	93 8b       	std	Z+19, r25	; 0x13
    164e:	82 8b       	std	Z+18, r24	; 0x12
    1650:	82 ec       	ldi	r24, 0xC2	; 194
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	95 8b       	std	Z+21, r25	; 0x15
    1656:	84 8b       	std	Z+20, r24	; 0x14
    1658:	86 ec       	ldi	r24, 0xC6	; 198
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	97 8b       	std	Z+23, r25	; 0x17
    165e:	86 8b       	std	Z+22, r24	; 0x16
    1660:	11 8e       	std	Z+25, r1	; 0x19
    1662:	12 8e       	std	Z+26, r1	; 0x1a
    1664:	13 8e       	std	Z+27, r1	; 0x1b
    1666:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_18():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
    1668:	08 95       	ret

0000166a <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    166a:	af 92       	push	r10
    166c:	bf 92       	push	r11
    166e:	cf 92       	push	r12
    1670:	df 92       	push	r13
    1672:	ef 92       	push	r14
    1674:	ff 92       	push	r15
    1676:	0f 93       	push	r16
    1678:	1f 93       	push	r17
    167a:	cf 93       	push	r28
    167c:	df 93       	push	r29
    167e:	6c 01       	movw	r12, r24
    1680:	7b 01       	movw	r14, r22
    1682:	8b 01       	movw	r16, r22
    1684:	04 0f       	add	r16, r20
    1686:	15 1f       	adc	r17, r21
    1688:	eb 01       	movw	r28, r22
    168a:	5e 01       	movw	r10, r28
    168c:	ae 18       	sub	r10, r14
    168e:	bf 08       	sbc	r11, r15
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
    1690:	c0 17       	cp	r28, r16
    1692:	d1 07       	cpc	r29, r17
    1694:	59 f0       	breq	.+22     	; 0x16ac <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
    1696:	69 91       	ld	r22, Y+
    1698:	d6 01       	movw	r26, r12
    169a:	ed 91       	ld	r30, X+
    169c:	fc 91       	ld	r31, X
    169e:	01 90       	ld	r0, Z+
    16a0:	f0 81       	ld	r31, Z
    16a2:	e0 2d       	mov	r30, r0
    16a4:	c6 01       	movw	r24, r12
    16a6:	09 95       	icall
    16a8:	89 2b       	or	r24, r25
    16aa:	79 f7       	brne	.-34     	; 0x168a <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
    16ac:	c5 01       	movw	r24, r10
    16ae:	df 91       	pop	r29
    16b0:	cf 91       	pop	r28
    16b2:	1f 91       	pop	r17
    16b4:	0f 91       	pop	r16
    16b6:	ff 90       	pop	r15
    16b8:	ef 90       	pop	r14
    16ba:	df 90       	pop	r13
    16bc:	cf 90       	pop	r12
    16be:	bf 90       	pop	r11
    16c0:	af 90       	pop	r10
    16c2:	08 95       	ret

000016c4 <makeWord(unsigned char, unsigned char)>:
_Z8makeWordhh():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:58
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

unsigned int makeWord(unsigned int w) { return w; }
unsigned int makeWord(unsigned char h, unsigned char l) { return (h << 8) | l; }
    16c4:	98 2f       	mov	r25, r24
    16c6:	86 2f       	mov	r24, r22
    16c8:	08 95       	ret

000016ca <__cxa_pure_virtual>:
__cxa_pure_virtual():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/abi.cpp:27
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    16ca:	0e 94 a0 0b 	call	0x1740	; 0x1740 <abort>

000016ce <initVariant>:
initVariant():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    16ce:	08 95       	ret

000016d0 <main>:
main():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    16d0:	0e 94 97 08 	call	0x112e	; 0x112e <init>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    16d4:	0e 94 67 0b 	call	0x16ce	; 0x16ce <initVariant>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    16d8:	0e 94 83 05 	call	0xb06	; 0xb06 <setup>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    16dc:	c8 eb       	ldi	r28, 0xB8	; 184
    16de:	d9 e0       	ldi	r29, 0x09	; 9
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    16e0:	0e 94 2c 06 	call	0xc58	; 0xc58 <loop>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    16e4:	20 97       	sbiw	r28, 0x00	; 0
    16e6:	e1 f3       	breq	.-8      	; 0x16e0 <main+0x10>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    16e8:	0e 94 b8 09 	call	0x1370	; 0x1370 <serialEventRun()>
    16ec:	f9 cf       	rjmp	.-14     	; 0x16e0 <main+0x10>

000016ee <yield>:
__empty():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    16ee:	08 95       	ret

000016f0 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    16f0:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    16f2:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    16f4:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    16f6:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    16f8:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    16fa:	0d c0       	rjmp	.+26     	; 0x1716 <__udivmodsi4_ep>

000016fc <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    16fc:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    16fe:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1700:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1702:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1704:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    1706:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    1708:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    170a:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    170c:	20 f0       	brcs	.+8      	; 0x1716 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    170e:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1710:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1712:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1714:	f5 0b       	sbc	r31, r21

00001716 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1716:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    1718:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    171a:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    171c:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    171e:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1720:	69 f7       	brne	.-38     	; 0x16fc <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1722:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1724:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1726:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    1728:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    172a:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    172c:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    172e:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1730:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1732:	08 95       	ret

00001734 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1734:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1736:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    1738:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    173a:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    173c:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    173e:	09 94       	ijmp

00001740 <abort>:
abort():
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	f8 94       	cli
    1746:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <_exit>

0000174a <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    174a:	f8 94       	cli

0000174c <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    174c:	ff cf       	rjmp	.-2      	; 0x174c <__stop_program>
