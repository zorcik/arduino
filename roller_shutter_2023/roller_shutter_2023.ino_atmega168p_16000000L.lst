
C:\Users\Jacek\AppData\Local\Temp\arduino_build_629840/roller_shutter_2023.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__ctors_end>
       4:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       8:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      10:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      14:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      18:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      1c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      20:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      24:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      28:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      2c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      30:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      34:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      38:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      3c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      40:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <__vector_16>
      44:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      48:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <__vector_18>
      4c:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__vector_19>
      50:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      54:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      58:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      5c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      60:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      64:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	00 00       	nop
      6a:	00 09       	sbc	r16, r0
      6c:	00 03       	mulsu	r16, r16
      6e:	02 00       	.word	0x0002	; ????
      70:	00 04       	cpc	r0, r0
      72:	05 08       	sbc	r0, r5
	...

0000007f <digital_pin_to_bit_mask_PGM>:
      7f:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8f:	04 08 10 20 40 80 40                                ... @.@

00000096 <digital_pin_to_port_PGM>:
      96:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a6:	03 03 03 03 02 02 03                                .......

000000ad <port_to_input_PGM>:
      ad:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000b7 <port_to_output_PGM>:
      b7:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000c1 <port_to_mode_PGM>:
      c1:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000cc <__ctors_start>:
__ctors_start():
      cc:	37 07       	cpc	r19, r23
      ce:	3f 0b       	sbc	r19, r31

000000d0 <__ctors_end>:
__dtors_end():
      d0:	11 24       	eor	r1, r1
      d2:	1f be       	out	0x3f, r1	; 63
      d4:	cf ef       	ldi	r28, 0xFF	; 255
      d6:	d4 e0       	ldi	r29, 0x04	; 4
      d8:	de bf       	out	0x3e, r29	; 62
      da:	cd bf       	out	0x3d, r28	; 61

000000dc <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      dc:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      de:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      e0:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      e2:	ec eb       	ldi	r30, 0xBC	; 188
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      e4:	f7 e1       	ldi	r31, 0x17	; 23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      e8:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      ea:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      ec:	ae 32       	cpi	r26, 0x2E	; 46
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      ee:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0xc>

000000f2 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      f2:	22 e0       	ldi	r18, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      f4:	ae e2       	ldi	r26, 0x2E	; 46
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      f6:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      fc:	a8 36       	cpi	r26, 0x68	; 104
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      fe:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>

00000102 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     102:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     104:	c8 e6       	ldi	r28, 0x68	; 104
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     106:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     108:	04 c0       	rjmp	.+8      	; 0x112 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     10a:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     10c:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     10e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     112:	c6 36       	cpi	r28, 0x66	; 102
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     114:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     116:	c9 f7       	brne	.-14     	; 0x10a <__do_global_ctors+0x8>
     118:	0e 94 9f 0b 	call	0x173e	; 0x173e <main>
     11c:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <_exit>

00000120 <__bad_interrupt>:
__vector_22():
     120:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000124 <Modbus::getRxBuffer()>:
_ZN6Modbus11getRxBufferEv():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:695
        break;
    case MB_FC_READ_INPUT_REGISTER:
    case MB_FC_READ_REGISTERS :
        // call get_FC3 to transfer the incoming message to au16regs buffer
        get_FC3( );
        break;
     124:	ff 92       	push	r15
     126:	0f 93       	push	r16
     128:	1f 93       	push	r17
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	ec 01       	movw	r28, r24
     130:	8b 81       	ldd	r24, Y+3	; 0x03
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	18 f0       	brcs	.+6      	; 0x13c <Modbus::getRxBuffer()+0x18>
     136:	60 e0       	ldi	r22, 0x00	; 0
     138:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <digitalWrite>
     13c:	8e 01       	movw	r16, r28
     13e:	0a 5b       	subi	r16, 0xBA	; 186
     140:	1f 4f       	sbci	r17, 0xFF	; 255
     142:	d8 01       	movw	r26, r16
     144:	1c 92       	st	X, r1
     146:	f1 2c       	mov	r15, r1
     148:	88 81       	ld	r24, Y
     14a:	99 81       	ldd	r25, Y+1	; 0x01
     14c:	dc 01       	movw	r26, r24
     14e:	ed 91       	ld	r30, X+
     150:	fc 91       	ld	r31, X
     152:	00 84       	ldd	r0, Z+8	; 0x08
     154:	f1 85       	ldd	r31, Z+9	; 0x09
     156:	e0 2d       	mov	r30, r0
     158:	09 95       	icall
     15a:	89 2b       	or	r24, r25
     15c:	b9 f0       	breq	.+46     	; 0x18c <Modbus::getRxBuffer()+0x68>
     15e:	88 81       	ld	r24, Y
     160:	99 81       	ldd	r25, Y+1	; 0x01
     162:	dc 01       	movw	r26, r24
     164:	ed 91       	ld	r30, X+
     166:	fc 91       	ld	r31, X
     168:	02 84       	ldd	r0, Z+10	; 0x0a
     16a:	f3 85       	ldd	r31, Z+11	; 0x0b
     16c:	e0 2d       	mov	r30, r0
     16e:	09 95       	icall
     170:	f8 01       	movw	r30, r16
     172:	90 81       	ld	r25, Z
     174:	fe 01       	movw	r30, r28
     176:	e9 0f       	add	r30, r25
     178:	f1 1d       	adc	r31, r1
     17a:	86 83       	std	Z+6, r24	; 0x06
     17c:	9f 5f       	subi	r25, 0xFF	; 255
     17e:	d8 01       	movw	r26, r16
     180:	9c 93       	st	X, r25
     182:	90 34       	cpi	r25, 0x40	; 64
     184:	08 f3       	brcs	.-62     	; 0x148 <Modbus::getRxBuffer()+0x24>
     186:	ff 24       	eor	r15, r15
     188:	f3 94       	inc	r15
     18a:	de cf       	rjmp	.-68     	; 0x148 <Modbus::getRxBuffer()+0x24>
     18c:	fe 01       	movw	r30, r28
     18e:	e6 5b       	subi	r30, 0xB6	; 182
     190:	ff 4f       	sbci	r31, 0xFF	; 255
     192:	80 81       	ld	r24, Z
     194:	91 81       	ldd	r25, Z+1	; 0x01
     196:	01 96       	adiw	r24, 0x01	; 1
     198:	91 83       	std	Z+1, r25	; 0x01
     19a:	80 83       	st	Z, r24
     19c:	ff 20       	and	r15, r15
     19e:	71 f0       	breq	.+28     	; 0x1bc <Modbus::getRxBuffer()+0x98>
     1a0:	c2 5b       	subi	r28, 0xB2	; 178
     1a2:	df 4f       	sbci	r29, 0xFF	; 255
     1a4:	88 81       	ld	r24, Y
     1a6:	99 81       	ldd	r25, Y+1	; 0x01
     1a8:	01 96       	adiw	r24, 0x01	; 1
     1aa:	99 83       	std	Y+1, r25	; 0x01
     1ac:	88 83       	st	Y, r24
     1ae:	8d ef       	ldi	r24, 0xFD	; 253
     1b0:	df 91       	pop	r29
     1b2:	cf 91       	pop	r28
     1b4:	1f 91       	pop	r17
     1b6:	0f 91       	pop	r16
     1b8:	ff 90       	pop	r15
     1ba:	08 95       	ret
     1bc:	f8 01       	movw	r30, r16
     1be:	80 81       	ld	r24, Z
     1c0:	f7 cf       	rjmp	.-18     	; 0x1b0 <Modbus::getRxBuffer()+0x8c>

000001c2 <Modbus::calcCRC(unsigned char)>:
_ZN6Modbus7calcCRCEh():
     1c2:	fc 01       	movw	r30, r24
     1c4:	36 96       	adiw	r30, 0x06	; 6
     1c6:	20 e0       	ldi	r18, 0x00	; 0
     1c8:	8f ef       	ldi	r24, 0xFF	; 255
     1ca:	9f ef       	ldi	r25, 0xFF	; 255
     1cc:	26 17       	cp	r18, r22
     1ce:	91 f0       	breq	.+36     	; 0x1f4 <Modbus::calcCRC(unsigned char)+0x32>
     1d0:	31 91       	ld	r19, Z+
     1d2:	83 27       	eor	r24, r19
     1d4:	38 e0       	ldi	r19, 0x08	; 8
     1d6:	ac 01       	movw	r20, r24
     1d8:	41 70       	andi	r20, 0x01	; 1
     1da:	55 27       	eor	r21, r21
     1dc:	96 95       	lsr	r25
     1de:	87 95       	ror	r24
     1e0:	45 2b       	or	r20, r21
     1e2:	21 f0       	breq	.+8      	; 0x1ec <Modbus::calcCRC(unsigned char)+0x2a>
     1e4:	41 e0       	ldi	r20, 0x01	; 1
     1e6:	84 27       	eor	r24, r20
     1e8:	40 ea       	ldi	r20, 0xA0	; 160
     1ea:	94 27       	eor	r25, r20
     1ec:	31 50       	subi	r19, 0x01	; 1
     1ee:	99 f7       	brne	.-26     	; 0x1d6 <Modbus::calcCRC(unsigned char)+0x14>
     1f0:	2f 5f       	subi	r18, 0xFF	; 255
     1f2:	ec cf       	rjmp	.-40     	; 0x1cc <Modbus::calcCRC(unsigned char)+0xa>
     1f4:	98 27       	eor	r25, r24
     1f6:	89 27       	eor	r24, r25
     1f8:	98 27       	eor	r25, r24
     1fa:	08 95       	ret

000001fc <Modbus::sendTxBuffer()>:
_ZN6Modbus12sendTxBufferEv():
     1fc:	cf 92       	push	r12
     1fe:	df 92       	push	r13
     200:	ff 92       	push	r15
     202:	0f 93       	push	r16
     204:	1f 93       	push	r17
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
     20a:	00 d0       	rcall	.+0      	; 0x20c <Modbus::sendTxBuffer()+0x10>
     20c:	00 d0       	rcall	.+0      	; 0x20e <Modbus::sendTxBuffer()+0x12>
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
     212:	8c 01       	movw	r16, r24
     214:	6c 01       	movw	r12, r24
     216:	86 e4       	ldi	r24, 0x46	; 70
     218:	c8 0e       	add	r12, r24
     21a:	d1 1c       	adc	r13, r1
     21c:	d6 01       	movw	r26, r12
     21e:	fc 90       	ld	r15, X
     220:	6f 2d       	mov	r22, r15
     222:	c8 01       	movw	r24, r16
     224:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <Modbus::calcCRC(unsigned char)>
     228:	f8 01       	movw	r30, r16
     22a:	ef 0d       	add	r30, r15
     22c:	f1 1d       	adc	r31, r1
     22e:	96 83       	std	Z+6, r25	; 0x06
     230:	e1 e0       	ldi	r30, 0x01	; 1
     232:	ef 0d       	add	r30, r15
     234:	e0 0f       	add	r30, r16
     236:	f1 2f       	mov	r31, r17
     238:	f1 1d       	adc	r31, r1
     23a:	86 83       	std	Z+6, r24	; 0x06
     23c:	f3 94       	inc	r15
     23e:	f3 94       	inc	r15
     240:	f6 01       	movw	r30, r12
     242:	f0 82       	st	Z, r15
     244:	d8 01       	movw	r26, r16
     246:	13 96       	adiw	r26, 0x03	; 3
     248:	8c 91       	ld	r24, X
     24a:	82 30       	cpi	r24, 0x02	; 2
     24c:	18 f0       	brcs	.+6      	; 0x254 <Modbus::sendTxBuffer()+0x58>
     24e:	61 e0       	ldi	r22, 0x01	; 1
     250:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <digitalWrite>
     254:	f8 01       	movw	r30, r16
     256:	80 81       	ld	r24, Z
     258:	91 81       	ldd	r25, Z+1	; 0x01
     25a:	d6 01       	movw	r26, r12
     25c:	4c 91       	ld	r20, X
     25e:	50 e0       	ldi	r21, 0x00	; 0
     260:	dc 01       	movw	r26, r24
     262:	ed 91       	ld	r30, X+
     264:	fc 91       	ld	r31, X
     266:	02 80       	ldd	r0, Z+2	; 0x02
     268:	f3 81       	ldd	r31, Z+3	; 0x03
     26a:	e0 2d       	mov	r30, r0
     26c:	b8 01       	movw	r22, r16
     26e:	6a 5f       	subi	r22, 0xFA	; 250
     270:	7f 4f       	sbci	r23, 0xFF	; 255
     272:	09 95       	icall
     274:	f8 01       	movw	r30, r16
     276:	83 81       	ldd	r24, Z+3	; 0x03
     278:	82 30       	cpi	r24, 0x02	; 2
     27a:	58 f1       	brcs	.+86     	; 0x2d2 <Modbus::sendTxBuffer()+0xd6>
     27c:	80 81       	ld	r24, Z
     27e:	91 81       	ldd	r25, Z+1	; 0x01
     280:	dc 01       	movw	r26, r24
     282:	ed 91       	ld	r30, X+
     284:	fc 91       	ld	r31, X
     286:	06 80       	ldd	r0, Z+6	; 0x06
     288:	f7 81       	ldd	r31, Z+7	; 0x07
     28a:	e0 2d       	mov	r30, r0
     28c:	09 95       	icall
     28e:	f8 01       	movw	r30, r16
     290:	e6 5a       	subi	r30, 0xA6	; 166
     292:	ff 4f       	sbci	r31, 0xFF	; 255
     294:	80 81       	ld	r24, Z
     296:	91 81       	ldd	r25, Z+1	; 0x01
     298:	a2 81       	ldd	r26, Z+2	; 0x02
     29a:	b3 81       	ldd	r27, Z+3	; 0x03
     29c:	89 83       	std	Y+1, r24	; 0x01
     29e:	9a 83       	std	Y+2, r25	; 0x02
     2a0:	ab 83       	std	Y+3, r26	; 0x03
     2a2:	bc 83       	std	Y+4, r27	; 0x04
     2a4:	89 81       	ldd	r24, Y+1	; 0x01
     2a6:	9a 81       	ldd	r25, Y+2	; 0x02
     2a8:	ab 81       	ldd	r26, Y+3	; 0x03
     2aa:	bc 81       	ldd	r27, Y+4	; 0x04
     2ac:	ac 01       	movw	r20, r24
     2ae:	bd 01       	movw	r22, r26
     2b0:	41 50       	subi	r20, 0x01	; 1
     2b2:	51 09       	sbc	r21, r1
     2b4:	61 09       	sbc	r22, r1
     2b6:	71 09       	sbc	r23, r1
     2b8:	49 83       	std	Y+1, r20	; 0x01
     2ba:	5a 83       	std	Y+2, r21	; 0x02
     2bc:	6b 83       	std	Y+3, r22	; 0x03
     2be:	7c 83       	std	Y+4, r23	; 0x04
     2c0:	89 2b       	or	r24, r25
     2c2:	8a 2b       	or	r24, r26
     2c4:	8b 2b       	or	r24, r27
     2c6:	71 f7       	brne	.-36     	; 0x2a4 <Modbus::sendTxBuffer()+0xa8>
     2c8:	60 e0       	ldi	r22, 0x00	; 0
     2ca:	f8 01       	movw	r30, r16
     2cc:	83 81       	ldd	r24, Z+3	; 0x03
     2ce:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <digitalWrite>
     2d2:	d8 01       	movw	r26, r16
     2d4:	8d 91       	ld	r24, X+
     2d6:	9c 91       	ld	r25, X
     2d8:	dc 01       	movw	r26, r24
     2da:	ed 91       	ld	r30, X+
     2dc:	fc 91       	ld	r31, X
     2de:	02 84       	ldd	r0, Z+10	; 0x0a
     2e0:	f3 85       	ldd	r31, Z+11	; 0x0b
     2e2:	e0 2d       	mov	r30, r0
     2e4:	09 95       	icall
     2e6:	97 ff       	sbrs	r25, 7
     2e8:	f4 cf       	rjmp	.-24     	; 0x2d2 <Modbus::sendTxBuffer()+0xd6>
     2ea:	f6 01       	movw	r30, r12
     2ec:	10 82       	st	Z, r1
     2ee:	0e 94 64 08 	call	0x10c8	; 0x10c8 <millis>
     2f2:	f8 01       	movw	r30, r16
     2f4:	ea 5a       	subi	r30, 0xAA	; 170
     2f6:	ff 4f       	sbci	r31, 0xFF	; 255
     2f8:	60 83       	st	Z, r22
     2fa:	71 83       	std	Z+1, r23	; 0x01
     2fc:	82 83       	std	Z+2, r24	; 0x02
     2fe:	93 83       	std	Z+3, r25	; 0x03
     300:	3a 97       	sbiw	r30, 0x0a	; 10
     302:	80 81       	ld	r24, Z
     304:	91 81       	ldd	r25, Z+1	; 0x01
     306:	01 96       	adiw	r24, 0x01	; 1
     308:	91 83       	std	Z+1, r25	; 0x01
     30a:	80 83       	st	Z, r24
     30c:	0f 90       	pop	r0
     30e:	0f 90       	pop	r0
     310:	0f 90       	pop	r0
     312:	0f 90       	pop	r0
     314:	df 91       	pop	r29
     316:	cf 91       	pop	r28
     318:	1f 91       	pop	r17
     31a:	0f 91       	pop	r16
     31c:	ff 90       	pop	r15
     31e:	df 90       	pop	r13
     320:	cf 90       	pop	r12
     322:	08 95       	ret

00000324 <Modbus::validateRequest()>:
_ZN6Modbus15validateRequestEv():
     324:	0f 93       	push	r16
     326:	1f 93       	push	r17
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
     32c:	ec 01       	movw	r28, r24
     32e:	fc 01       	movw	r30, r24
     330:	ea 5b       	subi	r30, 0xBA	; 186
     332:	ff 4f       	sbci	r31, 0xFF	; 255
     334:	60 81       	ld	r22, Z
     336:	06 2f       	mov	r16, r22
     338:	10 e0       	ldi	r17, 0x00	; 0
     33a:	62 50       	subi	r22, 0x02	; 2
     33c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <Modbus::calcCRC(unsigned char)>
     340:	fe 01       	movw	r30, r28
     342:	e0 0f       	add	r30, r16
     344:	f1 1f       	adc	r31, r17
     346:	24 81       	ldd	r18, Z+4	; 0x04
     348:	35 81       	ldd	r19, Z+5	; 0x05
     34a:	23 27       	eor	r18, r19
     34c:	32 27       	eor	r19, r18
     34e:	23 27       	eor	r18, r19
     350:	82 17       	cp	r24, r18
     352:	93 07       	cpc	r25, r19
     354:	69 f0       	breq	.+26     	; 0x370 <Modbus::validateRequest()+0x4c>
     356:	c2 5b       	subi	r28, 0xB2	; 178
     358:	df 4f       	sbci	r29, 0xFF	; 255
     35a:	88 81       	ld	r24, Y
     35c:	99 81       	ldd	r25, Y+1	; 0x01
     35e:	01 96       	adiw	r24, 0x01	; 1
     360:	99 83       	std	Y+1, r25	; 0x01
     362:	88 83       	st	Y, r24
     364:	8f ef       	ldi	r24, 0xFF	; 255
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	1f 91       	pop	r17
     36c:	0f 91       	pop	r16
     36e:	08 95       	ret
     370:	ef 81       	ldd	r30, Y+7	; 0x07
     372:	a6 e0       	ldi	r26, 0x06	; 6
     374:	b1 e0       	ldi	r27, 0x01	; 1
     376:	8d 91       	ld	r24, X+
     378:	8e 17       	cp	r24, r30
     37a:	09 f4       	brne	.+2      	; 0x37e <Modbus::validateRequest()+0x5a>
     37c:	44 c0       	rjmp	.+136    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	ae 30       	cpi	r26, 0x0E	; 14
     382:	b8 07       	cpc	r27, r24
     384:	c1 f7       	brne	.-16     	; 0x376 <Modbus::validateRequest()+0x52>
     386:	c2 5b       	subi	r28, 0xB2	; 178
     388:	df 4f       	sbci	r29, 0xFF	; 255
     38a:	88 81       	ld	r24, Y
     38c:	99 81       	ldd	r25, Y+1	; 0x01
     38e:	01 96       	adiw	r24, 0x01	; 1
     390:	99 83       	std	Y+1, r25	; 0x01
     392:	88 83       	st	Y, r24
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	e7 cf       	rjmp	.-50     	; 0x366 <Modbus::validateRequest()+0x42>
     398:	69 85       	ldd	r22, Y+9	; 0x09
     39a:	88 85       	ldd	r24, Y+8	; 0x08
     39c:	0e 94 99 0b 	call	0x1732	; 0x1732 <makeWord(unsigned char, unsigned char)>
     3a0:	8c 01       	movw	r16, r24
     3a2:	34 e0       	ldi	r19, 0x04	; 4
     3a4:	16 95       	lsr	r17
     3a6:	07 95       	ror	r16
     3a8:	3a 95       	dec	r19
     3aa:	e1 f7       	brne	.-8      	; 0x3a4 <Modbus::validateRequest()+0x80>
     3ac:	6b 85       	ldd	r22, Y+11	; 0x0b
     3ae:	8a 85       	ldd	r24, Y+10	; 0x0a
     3b0:	0e 94 99 0b 	call	0x1732	; 0x1732 <makeWord(unsigned char, unsigned char)>
     3b4:	44 e0       	ldi	r20, 0x04	; 4
     3b6:	96 95       	lsr	r25
     3b8:	87 95       	ror	r24
     3ba:	4a 95       	dec	r20
     3bc:	e1 f7       	brne	.-8      	; 0x3b6 <Modbus::validateRequest()+0x92>
     3be:	80 0f       	add	r24, r16
     3c0:	91 1f       	adc	r25, r17
     3c2:	c2 5a       	subi	r28, 0xA2	; 162
     3c4:	df 4f       	sbci	r29, 0xFF	; 255
     3c6:	98 81       	ld	r25, Y
     3c8:	98 17       	cp	r25, r24
     3ca:	d8 f4       	brcc	.+54     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3cc:	82 e0       	ldi	r24, 0x02	; 2
     3ce:	cb cf       	rjmp	.-106    	; 0x366 <Modbus::validateRequest()+0x42>
     3d0:	69 85       	ldd	r22, Y+9	; 0x09
     3d2:	88 85       	ldd	r24, Y+8	; 0x08
     3d4:	0e 94 99 0b 	call	0x1732	; 0x1732 <makeWord(unsigned char, unsigned char)>
     3d8:	24 e0       	ldi	r18, 0x04	; 4
     3da:	96 95       	lsr	r25
     3dc:	87 95       	ror	r24
     3de:	2a 95       	dec	r18
     3e0:	e1 f7       	brne	.-8      	; 0x3da <Modbus::validateRequest()+0xb6>
     3e2:	ef cf       	rjmp	.-34     	; 0x3c2 <Modbus::validateRequest()+0x9e>
     3e4:	69 85       	ldd	r22, Y+9	; 0x09
     3e6:	88 85       	ldd	r24, Y+8	; 0x08
     3e8:	0e 94 99 0b 	call	0x1732	; 0x1732 <makeWord(unsigned char, unsigned char)>
     3ec:	ea cf       	rjmp	.-44     	; 0x3c2 <Modbus::validateRequest()+0x9e>
     3ee:	69 85       	ldd	r22, Y+9	; 0x09
     3f0:	88 85       	ldd	r24, Y+8	; 0x08
     3f2:	0e 94 99 0b 	call	0x1732	; 0x1732 <makeWord(unsigned char, unsigned char)>
     3f6:	8c 01       	movw	r16, r24
     3f8:	6b 85       	ldd	r22, Y+11	; 0x0b
     3fa:	8a 85       	ldd	r24, Y+10	; 0x0a
     3fc:	0e 94 99 0b 	call	0x1732	; 0x1732 <makeWord(unsigned char, unsigned char)>
     400:	de cf       	rjmp	.-68     	; 0x3be <Modbus::validateRequest()+0x9a>
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	b0 cf       	rjmp	.-160    	; 0x366 <Modbus::validateRequest()+0x42>
     406:	e1 50       	subi	r30, 0x01	; 1
     408:	e0 31       	cpi	r30, 0x10	; 16
     40a:	d8 f7       	brcc	.-10     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	e5 5f       	subi	r30, 0xF5	; 245
     410:	fd 4f       	sbci	r31, 0xFD	; 253
     412:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__tablejump2__>
     416:	cc 01       	movw	r24, r24
     418:	cc 01       	movw	r24, r24
     41a:	f7 01       	movw	r30, r14
     41c:	f7 01       	movw	r30, r14
     41e:	e8 01       	movw	r28, r16
     420:	f2 01       	movw	r30, r4
     422:	01 02       	muls	r16, r17
     424:	01 02       	muls	r16, r17
     426:	01 02       	muls	r16, r17
     428:	01 02       	muls	r16, r17
     42a:	01 02       	muls	r16, r17
     42c:	01 02       	muls	r16, r17
     42e:	01 02       	muls	r16, r17
     430:	01 02       	muls	r16, r17
     432:	cc 01       	movw	r24, r24
     434:	f7 01       	movw	r30, r14

00000436 <Modbus::buildException(unsigned char)>:
_ZN6Modbus14buildExceptionEh():
     436:	fc 01       	movw	r30, r24
     438:	87 81       	ldd	r24, Z+7	; 0x07
     43a:	92 81       	ldd	r25, Z+2	; 0x02
     43c:	96 83       	std	Z+6, r25	; 0x06
     43e:	80 58       	subi	r24, 0x80	; 128
     440:	87 83       	std	Z+7, r24	; 0x07
     442:	60 87       	std	Z+8, r22	; 0x08
     444:	ea 5b       	subi	r30, 0xBA	; 186
     446:	ff 4f       	sbci	r31, 0xFF	; 255
     448:	83 e0       	ldi	r24, 0x03	; 3
     44a:	80 83       	st	Z, r24
     44c:	08 95       	ret

0000044e <Modbus::process_FC1(unsigned int*, unsigned char)>:
_ZN6Modbus11process_FC1EPjh():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1100
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t Modbus::process_FC1( uint16_t *regs, uint8_t /*u8size*/ )
{
     44e:	4f 92       	push	r4
     450:	5f 92       	push	r5
     452:	6f 92       	push	r6
     454:	7f 92       	push	r7
     456:	8f 92       	push	r8
     458:	9f 92       	push	r9
     45a:	af 92       	push	r10
     45c:	bf 92       	push	r11
     45e:	cf 92       	push	r12
     460:	df 92       	push	r13
     462:	ef 92       	push	r14
     464:	ff 92       	push	r15
     466:	0f 93       	push	r16
     468:	1f 93       	push	r17
     46a:	cf 93       	push	r28
     46c:	df 93       	push	r29
     46e:	00 d0       	rcall	.+0      	; 0x470 <Modbus::process_FC1(unsigned int*, unsigned char)+0x22>
     470:	00 d0       	rcall	.+0      	; 0x472 <Modbus::process_FC1(unsigned int*, unsigned char)+0x24>
     472:	00 d0       	rcall	.+0      	; 0x474 <Modbus::process_FC1(unsigned int*, unsigned char)+0x26>
     474:	cd b7       	in	r28, 0x3d	; 61
     476:	de b7       	in	r29, 0x3e	; 62
     478:	9e 83       	std	Y+6, r25	; 0x06
     47a:	8d 83       	std	Y+5, r24	; 0x05
     47c:	7b 01       	movw	r14, r22
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1106
    uint8_t u8currentRegister, u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( au8Buffer[ ADD_HI ], au8Buffer[ ADD_LO ] );
     47e:	dc 01       	movw	r26, r24
     480:	19 96       	adiw	r26, 0x09	; 9
     482:	6c 91       	ld	r22, X
     484:	19 97       	sbiw	r26, 0x09	; 9
     486:	18 96       	adiw	r26, 0x08	; 8
     488:	8c 91       	ld	r24, X
     48a:	0e 94 99 0b 	call	0x1732	; 0x1732 <makeWord(unsigned char, unsigned char)>
     48e:	8c 01       	movw	r16, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1107
    uint16_t u16Coilno = word( au8Buffer[ NB_HI ], au8Buffer[ NB_LO ] );
     490:	ed 81       	ldd	r30, Y+5	; 0x05
     492:	fe 81       	ldd	r31, Y+6	; 0x06
     494:	63 85       	ldd	r22, Z+11	; 0x0b
     496:	82 85       	ldd	r24, Z+10	; 0x0a
     498:	0e 94 99 0b 	call	0x1732	; 0x1732 <makeWord(unsigned char, unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1110

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
     49c:	9c 01       	movw	r18, r24
     49e:	43 e0       	ldi	r20, 0x03	; 3
     4a0:	36 95       	lsr	r19
     4a2:	27 95       	ror	r18
     4a4:	4a 95       	dec	r20
     4a6:	e1 f7       	brne	.-8      	; 0x4a0 <Modbus::process_FC1(unsigned int*, unsigned char)+0x52>
     4a8:	a2 2f       	mov	r26, r18
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1111
    if (u16Coilno % 8 != 0) u8bytesno ++;
     4aa:	bc 01       	movw	r22, r24
     4ac:	67 70       	andi	r22, 0x07	; 7
     4ae:	77 27       	eor	r23, r23
     4b0:	61 15       	cp	r22, r1
     4b2:	71 05       	cpc	r23, r1
     4b4:	11 f0       	breq	.+4      	; 0x4ba <Modbus::process_FC1(unsigned int*, unsigned char)+0x6c>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1111 (discriminator 1)
     4b6:	a1 e0       	ldi	r26, 0x01	; 1
     4b8:	a2 0f       	add	r26, r18
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1112
    au8Buffer[ ADD_HI ]  = u8bytesno;
     4ba:	ed 81       	ldd	r30, Y+5	; 0x05
     4bc:	fe 81       	ldd	r31, Y+6	; 0x06
     4be:	a0 87       	std	Z+8, r26	; 0x08
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1113
    u8BufferSize         = ADD_LO;
     4c0:	ea 5b       	subi	r30, 0xBA	; 186
     4c2:	ff 4f       	sbci	r31, 0xFF	; 255
     4c4:	23 e0       	ldi	r18, 0x03	; 3
     4c6:	20 83       	st	Z, r18
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1114
    au8Buffer[ u8BufferSize + u8bytesno - 1 ] = 0;
     4c8:	2d 81       	ldd	r18, Y+5	; 0x05
     4ca:	3e 81       	ldd	r19, Y+6	; 0x06
     4cc:	2a 0f       	add	r18, r26
     4ce:	31 1d       	adc	r19, r1
     4d0:	d9 01       	movw	r26, r18
     4d2:	18 96       	adiw	r26, 0x08	; 8
     4d4:	1c 92       	st	X, r1
     4d6:	38 01       	movw	r6, r16
     4d8:	68 0e       	add	r6, r24
     4da:	79 1e       	adc	r7, r25
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1117

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
     4dc:	d1 2c       	mov	r13, r1
     4de:	81 2c       	mov	r8, r1
     4e0:	91 2c       	mov	r9, r1
     4e2:	54 01       	movw	r10, r8
     4e4:	83 94       	inc	r8
     4e6:	c0 80       	ld	r12, Z
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1119 (discriminator 1)

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
     4e8:	60 16       	cp	r6, r16
     4ea:	71 06       	cpc	r7, r17
     4ec:	09 f4       	brne	.+2      	; 0x4f0 <Modbus::process_FC1(unsigned int*, unsigned char)+0xa2>
     4ee:	40 c0       	rjmp	.+128    	; 0x570 <__stack+0x71>
     4f0:	d5 01       	movw	r26, r10
     4f2:	c4 01       	movw	r24, r8
     4f4:	0d 2c       	mov	r0, r13
     4f6:	04 c0       	rjmp	.+8      	; 0x500 <__stack+0x1>
     4f8:	88 0f       	add	r24, r24
     4fa:	99 1f       	adc	r25, r25
     4fc:	aa 1f       	adc	r26, r26
     4fe:	bb 1f       	adc	r27, r27
     500:	0a 94       	dec	r0
     502:	d2 f7       	brpl	.-12     	; 0x4f8 <Modbus::process_FC1(unsigned int*, unsigned char)+0xaa>
     504:	89 83       	std	Y+1, r24	; 0x01
     506:	9a 83       	std	Y+2, r25	; 0x02
     508:	ab 83       	std	Y+3, r26	; 0x03
     50a:	bc 83       	std	Y+4, r27	; 0x04
     50c:	4d 81       	ldd	r20, Y+5	; 0x05
     50e:	5e 81       	ldd	r21, Y+6	; 0x06
     510:	4c 0d       	add	r20, r12
     512:	51 1d       	adc	r21, r1
     514:	da 01       	movw	r26, r20
     516:	16 96       	adiw	r26, 0x06	; 6
     518:	5c 90       	ld	r5, X
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1125
    {
        u16coil = u16StartCoil + u16currentCoil;
        u8currentRegister = (uint8_t) (u16coil / 16);
        u8currentBit = (uint8_t) (u16coil % 16);

        bitWrite(
     51a:	98 01       	movw	r18, r16
     51c:	83 e0       	ldi	r24, 0x03	; 3
     51e:	36 95       	lsr	r19
     520:	27 95       	ror	r18
     522:	8a 95       	dec	r24
     524:	e1 f7       	brne	.-8      	; 0x51e <__stack+0x1f>
     526:	2e 7f       	andi	r18, 0xFE	; 254
     528:	31 70       	andi	r19, 0x01	; 1
     52a:	2e 0d       	add	r18, r14
     52c:	3f 1d       	adc	r19, r15
     52e:	d9 01       	movw	r26, r18
     530:	2d 91       	ld	r18, X+
     532:	3c 91       	ld	r19, X
     534:	b0 2f       	mov	r27, r16
     536:	bf 70       	andi	r27, 0x0F	; 15
     538:	02 c0       	rjmp	.+4      	; 0x53e <__stack+0x3f>
     53a:	36 95       	lsr	r19
     53c:	27 95       	ror	r18
     53e:	ba 95       	dec	r27
     540:	e2 f7       	brpl	.-8      	; 0x53a <__stack+0x3b>
     542:	89 81       	ldd	r24, Y+1	; 0x01
     544:	20 ff       	sbrs	r18, 0
     546:	0e c0       	rjmp	.+28     	; 0x564 <__stack+0x65>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1125 (discriminator 1)
     548:	85 29       	or	r24, r5
     54a:	da 01       	movw	r26, r20
     54c:	16 96       	adiw	r26, 0x06	; 6
     54e:	8c 93       	st	X, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1129
            au8Buffer[ u8BufferSize ],
            u8bitsno,
            bitRead( regs[ u8currentRegister ], u8currentBit ) );
        u8bitsno ++;
     550:	d3 94       	inc	r13
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1131

        if (u8bitsno > 7)
     552:	b7 e0       	ldi	r27, 0x07	; 7
     554:	bd 15       	cp	r27, r13
     556:	18 f4       	brcc	.+6      	; 0x55e <__stack+0x5f>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1134
        {
            u8bitsno = 0;
            u8BufferSize++;
     558:	c3 94       	inc	r12
     55a:	c0 82       	st	Z, r12
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1133
            bitRead( regs[ u8currentRegister ], u8currentBit ) );
        u8bitsno ++;

        if (u8bitsno > 7)
        {
            u8bitsno = 0;
     55c:	d1 2c       	mov	r13, r1
     55e:	0f 5f       	subi	r16, 0xFF	; 255
     560:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1119 (discriminator 2)
    au8Buffer[ u8BufferSize + u8bytesno - 1 ] = 0;

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
     562:	c1 cf       	rjmp	.-126    	; 0x4e6 <Modbus::process_FC1(unsigned int*, unsigned char)+0x98>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1125 (discriminator 2)
    {
        u16coil = u16StartCoil + u16currentCoil;
        u8currentRegister = (uint8_t) (u16coil / 16);
        u8currentBit = (uint8_t) (u16coil % 16);

        bitWrite(
     564:	80 95       	com	r24
     566:	58 22       	and	r5, r24
     568:	da 01       	movw	r26, r20
     56a:	16 96       	adiw	r26, 0x06	; 6
     56c:	5c 92       	st	X, r5
     56e:	f0 cf       	rjmp	.-32     	; 0x550 <__stack+0x51>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1139
            u8BufferSize++;
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) u8BufferSize ++;
     570:	67 2b       	or	r22, r23
     572:	11 f0       	breq	.+4      	; 0x578 <__stack+0x79>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1139 (discriminator 1)
     574:	c3 94       	inc	r12
     576:	c0 82       	st	Z, r12
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1140
    u8CopyBufferSize = u8BufferSize +2;
     578:	10 81       	ld	r17, Z
     57a:	1e 5f       	subi	r17, 0xFE	; 254
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1141
    sendTxBuffer();
     57c:	8d 81       	ldd	r24, Y+5	; 0x05
     57e:	9e 81       	ldd	r25, Y+6	; 0x06
     580:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Modbus::sendTxBuffer()>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1143
    return u8CopyBufferSize;
}
     584:	81 2f       	mov	r24, r17
     586:	26 96       	adiw	r28, 0x06	; 6
     588:	0f b6       	in	r0, 0x3f	; 63
     58a:	f8 94       	cli
     58c:	de bf       	out	0x3e, r29	; 62
     58e:	0f be       	out	0x3f, r0	; 63
     590:	cd bf       	out	0x3d, r28	; 61
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	1f 91       	pop	r17
     598:	0f 91       	pop	r16
     59a:	ff 90       	pop	r15
     59c:	ef 90       	pop	r14
     59e:	df 90       	pop	r13
     5a0:	cf 90       	pop	r12
     5a2:	bf 90       	pop	r11
     5a4:	af 90       	pop	r10
     5a6:	9f 90       	pop	r9
     5a8:	8f 90       	pop	r8
     5aa:	7f 90       	pop	r7
     5ac:	6f 90       	pop	r6
     5ae:	5f 90       	pop	r5
     5b0:	4f 90       	pop	r4
     5b2:	08 95       	ret

000005b4 <Modbus::process_FC3(unsigned int*, unsigned char)>:
_ZN6Modbus11process_FC3EPjh():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1154
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t Modbus::process_FC3( uint16_t *regs, uint8_t /*u8size*/ )
{
     5b4:	ef 92       	push	r14
     5b6:	ff 92       	push	r15
     5b8:	0f 93       	push	r16
     5ba:	1f 93       	push	r17
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	ec 01       	movw	r28, r24
     5c2:	8b 01       	movw	r16, r22
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1156

    uint8_t u8StartAdd = word( au8Buffer[ ADD_HI ], au8Buffer[ ADD_LO ] );
     5c4:	69 85       	ldd	r22, Y+9	; 0x09
     5c6:	88 85       	ldd	r24, Y+8	; 0x08
     5c8:	0e 94 99 0b 	call	0x1732	; 0x1732 <makeWord(unsigned char, unsigned char)>
     5cc:	e8 2e       	mov	r14, r24
     5ce:	f8 2e       	mov	r15, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1157
    uint8_t u8regsno = word( au8Buffer[ NB_HI ], au8Buffer[ NB_LO ] );
     5d0:	6b 85       	ldd	r22, Y+11	; 0x0b
     5d2:	8a 85       	ldd	r24, Y+10	; 0x0a
     5d4:	0e 94 99 0b 	call	0x1732	; 0x1732 <makeWord(unsigned char, unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1161
    uint8_t u8CopyBufferSize;
    uint8_t i;

    au8Buffer[ 2 ]       = u8regsno * 2;
     5d8:	98 2f       	mov	r25, r24
     5da:	99 0f       	add	r25, r25
     5dc:	98 87       	std	Y+8, r25	; 0x08
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1162
    u8BufferSize         = 3;
     5de:	9e 01       	movw	r18, r28
     5e0:	2a 5b       	subi	r18, 0xBA	; 186
     5e2:	3f 4f       	sbci	r19, 0xFF	; 255
     5e4:	93 e0       	ldi	r25, 0x03	; 3
     5e6:	d9 01       	movw	r26, r18
     5e8:	9c 93       	st	X, r25
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1164

    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
     5ea:	8e 0d       	add	r24, r14
     5ec:	99 27       	eor	r25, r25
     5ee:	99 1f       	adc	r25, r25
     5f0:	f9 01       	movw	r30, r18
     5f2:	70 81       	ld	r23, Z
     5f4:	52 e0       	ldi	r21, 0x02	; 2
     5f6:	e5 2e       	mov	r14, r21
     5f8:	e7 0e       	add	r14, r23
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1164 (discriminator 3)
     5fa:	af 2d       	mov	r26, r15
     5fc:	b0 e0       	ldi	r27, 0x00	; 0
     5fe:	a8 17       	cp	r26, r24
     600:	b9 07       	cpc	r27, r25
     602:	cc f4       	brge	.+50     	; 0x636 <Modbus::process_FC3(unsigned int*, unsigned char)+0x82>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1166 (discriminator 2)
    {
        au8Buffer[ u8BufferSize ] = highByte(regs[i]);
     604:	aa 0f       	add	r26, r26
     606:	bb 1f       	adc	r27, r27
     608:	a0 0f       	add	r26, r16
     60a:	b1 1f       	adc	r27, r17
     60c:	ae 01       	movw	r20, r28
     60e:	47 0f       	add	r20, r23
     610:	51 1d       	adc	r21, r1
     612:	11 96       	adiw	r26, 0x01	; 1
     614:	6c 91       	ld	r22, X
     616:	11 97       	sbiw	r26, 0x01	; 1
     618:	fa 01       	movw	r30, r20
     61a:	66 83       	std	Z+6, r22	; 0x06
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1167 (discriminator 2)
        u8BufferSize++;
     61c:	41 e0       	ldi	r20, 0x01	; 1
     61e:	47 0f       	add	r20, r23
     620:	f9 01       	movw	r30, r18
     622:	40 83       	st	Z, r20
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1168 (discriminator 2)
        au8Buffer[ u8BufferSize ] = lowByte(regs[i]);
     624:	fe 01       	movw	r30, r28
     626:	e4 0f       	add	r30, r20
     628:	f1 1d       	adc	r31, r1
     62a:	4c 91       	ld	r20, X
     62c:	46 83       	std	Z+6, r20	; 0x06
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1169 (discriminator 2)
        u8BufferSize++;
     62e:	d9 01       	movw	r26, r18
     630:	ec 92       	st	X, r14
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1164 (discriminator 2)
    uint8_t i;

    au8Buffer[ 2 ]       = u8regsno * 2;
    u8BufferSize         = 3;

    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
     632:	f3 94       	inc	r15
     634:	dd cf       	rjmp	.-70     	; 0x5f0 <Modbus::process_FC3(unsigned int*, unsigned char)+0x3c>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1172
        u8BufferSize++;
        au8Buffer[ u8BufferSize ] = lowByte(regs[i]);
        u8BufferSize++;
    }
    u8CopyBufferSize = u8BufferSize +2;
    sendTxBuffer();
     636:	ce 01       	movw	r24, r28
     638:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Modbus::sendTxBuffer()>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1175

    return u8CopyBufferSize;
}
     63c:	8e 2d       	mov	r24, r14
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	1f 91       	pop	r17
     644:	0f 91       	pop	r16
     646:	ff 90       	pop	r15
     648:	ef 90       	pop	r14
     64a:	08 95       	ret

0000064c <Modbus::process_FC5(unsigned int*, unsigned char)>:
_ZN6Modbus11process_FC5EPjh():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1186
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t Modbus::process_FC5( uint16_t *regs, uint8_t /*u8size*/ )
{
     64c:	0f 93       	push	r16
     64e:	1f 93       	push	r17
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	ec 01       	movw	r28, r24
     656:	8b 01       	movw	r16, r22
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1189
    uint8_t u8currentRegister, u8currentBit;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( au8Buffer[ ADD_HI ], au8Buffer[ ADD_LO ] );
     658:	69 85       	ldd	r22, Y+9	; 0x09
     65a:	88 85       	ldd	r24, Y+8	; 0x08
     65c:	0e 94 99 0b 	call	0x1732	; 0x1732 <makeWord(unsigned char, unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1193

    // point to the register and its bit
    u8currentRegister = (uint8_t) (u16coil / 16);
    u8currentBit = (uint8_t) (u16coil % 16);
     660:	48 2f       	mov	r20, r24
     662:	4f 70       	andi	r20, 0x0F	; 15
     664:	23 e0       	ldi	r18, 0x03	; 3
     666:	96 95       	lsr	r25
     668:	87 95       	ror	r24
     66a:	2a 95       	dec	r18
     66c:	e1 f7       	brne	.-8      	; 0x666 <Modbus::process_FC5(unsigned int*, unsigned char)+0x1a>
     66e:	8e 7f       	andi	r24, 0xFE	; 254
     670:	91 70       	andi	r25, 0x01	; 1
     672:	f8 01       	movw	r30, r16
     674:	e8 0f       	add	r30, r24
     676:	f9 1f       	adc	r31, r25
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1196

    // write to coil
    bitWrite(
     678:	8a 85       	ldd	r24, Y+10	; 0x0a
     67a:	20 81       	ld	r18, Z
     67c:	31 81       	ldd	r19, Z+1	; 0x01
     67e:	8f 3f       	cpi	r24, 0xFF	; 255
     680:	e9 f4       	brne	.+58     	; 0x6bc <Modbus::process_FC5(unsigned int*, unsigned char)+0x70>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1196 (discriminator 1)
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	a0 e0       	ldi	r26, 0x00	; 0
     688:	b0 e0       	ldi	r27, 0x00	; 0
     68a:	04 c0       	rjmp	.+8      	; 0x694 <Modbus::process_FC5(unsigned int*, unsigned char)+0x48>
     68c:	88 0f       	add	r24, r24
     68e:	99 1f       	adc	r25, r25
     690:	aa 1f       	adc	r26, r26
     692:	bb 1f       	adc	r27, r27
     694:	4a 95       	dec	r20
     696:	d2 f7       	brpl	.-12     	; 0x68c <Modbus::process_FC5(unsigned int*, unsigned char)+0x40>
     698:	82 2b       	or	r24, r18
     69a:	93 2b       	or	r25, r19
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1196 (discriminator 2)
     69c:	91 83       	std	Z+1, r25	; 0x01
     69e:	80 83       	st	Z, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1203 (discriminator 2)
        u8currentBit,
        au8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    u8BufferSize = 6;
     6a0:	fe 01       	movw	r30, r28
     6a2:	ea 5b       	subi	r30, 0xBA	; 186
     6a4:	ff 4f       	sbci	r31, 0xFF	; 255
     6a6:	86 e0       	ldi	r24, 0x06	; 6
     6a8:	80 83       	st	Z, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1205 (discriminator 2)
    u8CopyBufferSize = u8BufferSize +2;
    sendTxBuffer();
     6aa:	ce 01       	movw	r24, r28
     6ac:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Modbus::sendTxBuffer()>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1208 (discriminator 2)

    return u8CopyBufferSize;
}
     6b0:	88 e0       	ldi	r24, 0x08	; 8
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	1f 91       	pop	r17
     6b8:	0f 91       	pop	r16
     6ba:	08 95       	ret
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1196 (discriminator 2)
    // point to the register and its bit
    u8currentRegister = (uint8_t) (u16coil / 16);
    u8currentBit = (uint8_t) (u16coil % 16);

    // write to coil
    bitWrite(
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	a0 e0       	ldi	r26, 0x00	; 0
     6c2:	b0 e0       	ldi	r27, 0x00	; 0
     6c4:	04 c0       	rjmp	.+8      	; 0x6ce <Modbus::process_FC5(unsigned int*, unsigned char)+0x82>
     6c6:	88 0f       	add	r24, r24
     6c8:	99 1f       	adc	r25, r25
     6ca:	aa 1f       	adc	r26, r26
     6cc:	bb 1f       	adc	r27, r27
     6ce:	4a 95       	dec	r20
     6d0:	d2 f7       	brpl	.-12     	; 0x6c6 <Modbus::process_FC5(unsigned int*, unsigned char)+0x7a>
     6d2:	80 95       	com	r24
     6d4:	90 95       	com	r25
     6d6:	82 23       	and	r24, r18
     6d8:	93 23       	and	r25, r19
     6da:	e0 cf       	rjmp	.-64     	; 0x69c <Modbus::process_FC5(unsigned int*, unsigned char)+0x50>

000006dc <Modbus::process_FC6(unsigned int*, unsigned char)>:
_ZN6Modbus11process_FC6EPjh():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1219
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t Modbus::process_FC6( uint16_t *regs, uint8_t /*u8size*/ )
{
     6dc:	ef 92       	push	r14
     6de:	ff 92       	push	r15
     6e0:	0f 93       	push	r16
     6e2:	1f 93       	push	r17
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	ec 01       	movw	r28, r24
     6ea:	7b 01       	movw	r14, r22
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1221

    uint8_t u8add = word( au8Buffer[ ADD_HI ], au8Buffer[ ADD_LO ] );
     6ec:	69 85       	ldd	r22, Y+9	; 0x09
     6ee:	88 85       	ldd	r24, Y+8	; 0x08
     6f0:	0e 94 99 0b 	call	0x1732	; 0x1732 <makeWord(unsigned char, unsigned char)>
     6f4:	8c 01       	movw	r16, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1223
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( au8Buffer[ NB_HI ], au8Buffer[ NB_LO ] );
     6f6:	6b 85       	ldd	r22, Y+11	; 0x0b
     6f8:	8a 85       	ldd	r24, Y+10	; 0x0a
     6fa:	0e 94 99 0b 	call	0x1732	; 0x1732 <makeWord(unsigned char, unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1225

    regs[ u8add ] = u16val;
     6fe:	11 27       	eor	r17, r17
     700:	00 0f       	add	r16, r16
     702:	11 1f       	adc	r17, r17
     704:	0e 0d       	add	r16, r14
     706:	1f 1d       	adc	r17, r15
     708:	f8 01       	movw	r30, r16
     70a:	91 83       	std	Z+1, r25	; 0x01
     70c:	80 83       	st	Z, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1228

    // keep the same header
    u8BufferSize         = RESPONSE_SIZE;
     70e:	fe 01       	movw	r30, r28
     710:	ea 5b       	subi	r30, 0xBA	; 186
     712:	ff 4f       	sbci	r31, 0xFF	; 255
     714:	86 e0       	ldi	r24, 0x06	; 6
     716:	80 83       	st	Z, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1231

    u8CopyBufferSize = u8BufferSize +2;
    sendTxBuffer();
     718:	ce 01       	movw	r24, r28
     71a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Modbus::sendTxBuffer()>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1234

    return u8CopyBufferSize;
}
     71e:	88 e0       	ldi	r24, 0x08	; 8
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	1f 91       	pop	r17
     726:	0f 91       	pop	r16
     728:	ff 90       	pop	r15
     72a:	ef 90       	pop	r14
     72c:	08 95       	ret

0000072e <Modbus::process_FC15(unsigned int*, unsigned char)>:
_ZN6Modbus12process_FC15EPjh():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1245
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t Modbus::process_FC15( uint16_t *regs, uint8_t /*u8size*/ )
{
     72e:	6f 92       	push	r6
     730:	7f 92       	push	r7
     732:	8f 92       	push	r8
     734:	9f 92       	push	r9
     736:	af 92       	push	r10
     738:	bf 92       	push	r11
     73a:	cf 92       	push	r12
     73c:	df 92       	push	r13
     73e:	ef 92       	push	r14
     740:	ff 92       	push	r15
     742:	0f 93       	push	r16
     744:	1f 93       	push	r17
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	ec 01       	movw	r28, r24
     74c:	7b 01       	movw	r14, r22
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1252
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    boolean bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( au8Buffer[ ADD_HI ], au8Buffer[ ADD_LO ] );
     74e:	69 85       	ldd	r22, Y+9	; 0x09
     750:	88 85       	ldd	r24, Y+8	; 0x08
     752:	0e 94 99 0b 	call	0x1732	; 0x1732 <makeWord(unsigned char, unsigned char)>
     756:	8c 01       	movw	r16, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1253
    uint16_t u16Coilno = word( au8Buffer[ NB_HI ], au8Buffer[ NB_LO ] );
     758:	6b 85       	ldd	r22, Y+11	; 0x0b
     75a:	8a 85       	ldd	r24, Y+10	; 0x0a
     75c:	0e 94 99 0b 	call	0x1732	; 0x1732 <makeWord(unsigned char, unsigned char)>
     760:	80 0f       	add	r24, r16
     762:	91 1f       	adc	r25, r17
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1257


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
     764:	d1 2c       	mov	r13, r1
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1258
    u8frameByte = 7;
     766:	37 e0       	ldi	r19, 0x07	; 7
     768:	c3 2e       	mov	r12, r19
     76a:	81 2c       	mov	r8, r1
     76c:	91 2c       	mov	r9, r1
     76e:	54 01       	movw	r10, r8
     770:	83 94       	inc	r8
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1259 (discriminator 1)
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
     772:	80 17       	cp	r24, r16
     774:	91 07       	cpc	r25, r17
     776:	c1 f1       	breq	.+112    	; 0x7e8 <Modbus::process_FC15(unsigned int*, unsigned char)+0xba>
     778:	f8 01       	movw	r30, r16
     77a:	23 e0       	ldi	r18, 0x03	; 3
     77c:	f6 95       	lsr	r31
     77e:	e7 95       	ror	r30
     780:	2a 95       	dec	r18
     782:	e1 f7       	brne	.-8      	; 0x77c <Modbus::process_FC15(unsigned int*, unsigned char)+0x4e>
     784:	ee 7f       	andi	r30, 0xFE	; 254
     786:	f1 70       	andi	r31, 0x01	; 1
     788:	ee 0d       	add	r30, r14
     78a:	ff 1d       	adc	r31, r15
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1264
    {

        u16coil = u16StartCoil + u16currentCoil;
        u8currentRegister = (uint8_t) (u16coil / 16);
        u8currentBit = (uint8_t) (u16coil % 16);
     78c:	20 2f       	mov	r18, r16
     78e:	2f 70       	andi	r18, 0x0F	; 15
     790:	b5 01       	movw	r22, r10
     792:	a4 01       	movw	r20, r8
     794:	04 c0       	rjmp	.+8      	; 0x79e <Modbus::process_FC15(unsigned int*, unsigned char)+0x70>
     796:	44 0f       	add	r20, r20
     798:	55 1f       	adc	r21, r21
     79a:	66 1f       	adc	r22, r22
     79c:	77 1f       	adc	r23, r23
     79e:	2a 95       	dec	r18
     7a0:	d2 f7       	brpl	.-12     	; 0x796 <Modbus::process_FC15(unsigned int*, unsigned char)+0x68>
     7a2:	60 80       	ld	r6, Z
     7a4:	71 80       	ldd	r7, Z+1	; 0x01
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1266

        bTemp = bitRead(
     7a6:	9e 01       	movw	r18, r28
     7a8:	2c 0d       	add	r18, r12
     7aa:	31 1d       	adc	r19, r1
     7ac:	d9 01       	movw	r26, r18
     7ae:	16 96       	adiw	r26, 0x06	; 6
     7b0:	2c 91       	ld	r18, X
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	0d 2c       	mov	r0, r13
     7b6:	02 c0       	rjmp	.+4      	; 0x7bc <Modbus::process_FC15(unsigned int*, unsigned char)+0x8e>
     7b8:	35 95       	asr	r19
     7ba:	27 95       	ror	r18
     7bc:	0a 94       	dec	r0
     7be:	e2 f7       	brpl	.-8      	; 0x7b8 <Modbus::process_FC15(unsigned int*, unsigned char)+0x8a>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1270
                    au8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
     7c0:	20 ff       	sbrs	r18, 0
     7c2:	0d c0       	rjmp	.+26     	; 0x7de <Modbus::process_FC15(unsigned int*, unsigned char)+0xb0>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1270 (discriminator 1)
     7c4:	46 29       	or	r20, r6
     7c6:	57 29       	or	r21, r7
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1270 (discriminator 2)
     7c8:	51 83       	std	Z+1, r21	; 0x01
     7ca:	40 83       	st	Z, r20
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1275 (discriminator 2)
            regs[ u8currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
     7cc:	d3 94       	inc	r13
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1277 (discriminator 2)

        if (u8bitsno > 7)
     7ce:	b7 e0       	ldi	r27, 0x07	; 7
     7d0:	bd 15       	cp	r27, r13
     7d2:	10 f4       	brcc	.+4      	; 0x7d8 <Modbus::process_FC15(unsigned int*, unsigned char)+0xaa>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1280
        {
            u8bitsno = 0;
            u8frameByte++;
     7d4:	c3 94       	inc	r12
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1279

        u8bitsno ++;

        if (u8bitsno > 7)
        {
            u8bitsno = 0;
     7d6:	d1 2c       	mov	r13, r1
     7d8:	0f 5f       	subi	r16, 0xFF	; 255
     7da:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1259 (discriminator 2)


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
    u8frameByte = 7;
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
     7dc:	ca cf       	rjmp	.-108    	; 0x772 <Modbus::process_FC15(unsigned int*, unsigned char)+0x44>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1270 (discriminator 2)

        bTemp = bitRead(
                    au8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
     7de:	40 95       	com	r20
     7e0:	50 95       	com	r21
     7e2:	46 21       	and	r20, r6
     7e4:	57 21       	and	r21, r7
     7e6:	f0 cf       	rjmp	.-32     	; 0x7c8 <Modbus::process_FC15(unsigned int*, unsigned char)+0x9a>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1286
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    u8BufferSize         = 6;
     7e8:	fe 01       	movw	r30, r28
     7ea:	ea 5b       	subi	r30, 0xBA	; 186
     7ec:	ff 4f       	sbci	r31, 0xFF	; 255
     7ee:	86 e0       	ldi	r24, 0x06	; 6
     7f0:	80 83       	st	Z, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1288
    u8CopyBufferSize = u8BufferSize +2;
    sendTxBuffer();
     7f2:	ce 01       	movw	r24, r28
     7f4:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Modbus::sendTxBuffer()>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1290
    return u8CopyBufferSize;
}
     7f8:	88 e0       	ldi	r24, 0x08	; 8
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	1f 91       	pop	r17
     800:	0f 91       	pop	r16
     802:	ff 90       	pop	r15
     804:	ef 90       	pop	r14
     806:	df 90       	pop	r13
     808:	cf 90       	pop	r12
     80a:	bf 90       	pop	r11
     80c:	af 90       	pop	r10
     80e:	9f 90       	pop	r9
     810:	8f 90       	pop	r8
     812:	7f 90       	pop	r7
     814:	6f 90       	pop	r6
     816:	08 95       	ret

00000818 <Modbus::process_FC16(unsigned int*, unsigned char)>:
_ZN6Modbus12process_FC16EPjh():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1301
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t Modbus::process_FC16( uint16_t *regs, uint8_t /*u8size*/ )
{
     818:	af 92       	push	r10
     81a:	bf 92       	push	r11
     81c:	cf 92       	push	r12
     81e:	df 92       	push	r13
     820:	ef 92       	push	r14
     822:	ff 92       	push	r15
     824:	0f 93       	push	r16
     826:	1f 93       	push	r17
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	ec 01       	movw	r28, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1302
    uint8_t u8StartAdd = au8Buffer[ ADD_HI ] << 8 | au8Buffer[ ADD_LO ];
     82e:	89 85       	ldd	r24, Y+9	; 0x09
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1303
    uint8_t u8regsno = au8Buffer[ NB_HI ] << 8 | au8Buffer[ NB_LO ];
     830:	ab 84       	ldd	r10, Y+11	; 0x0b
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1309
    uint8_t u8CopyBufferSize;
    uint8_t i;
    uint16_t temp;

    // build header
    au8Buffer[ NB_HI ]   = 0;
     832:	1a 86       	std	Y+10, r1	; 0x0a
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1311
    au8Buffer[ NB_LO ]   = u8regsno;
    u8BufferSize         = RESPONSE_SIZE;
     834:	7e 01       	movw	r14, r28
     836:	96 e4       	ldi	r25, 0x46	; 70
     838:	e9 0e       	add	r14, r25
     83a:	f1 1c       	adc	r15, r1
     83c:	96 e0       	ldi	r25, 0x06	; 6
     83e:	f7 01       	movw	r30, r14
     840:	90 83       	st	Z, r25
     842:	8e 01       	movw	r16, r28
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	88 0f       	add	r24, r24
     848:	99 1f       	adc	r25, r25
     84a:	6b 01       	movw	r12, r22
     84c:	c8 0e       	add	r12, r24
     84e:	d9 1e       	adc	r13, r25
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1314

    // write registers
    for (i = 0; i < u8regsno; i++)
     850:	b1 2c       	mov	r11, r1
     852:	0e 5f       	subi	r16, 0xFE	; 254
     854:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1314 (discriminator 3)
     856:	ab 14       	cp	r10, r11
     858:	59 f0       	breq	.+22     	; 0x870 <Modbus::process_FC16(unsigned int*, unsigned char)+0x58>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1316 (discriminator 2)
    {
        temp = word(
     85a:	f8 01       	movw	r30, r16
     85c:	64 85       	ldd	r22, Z+12	; 0x0c
     85e:	83 85       	ldd	r24, Z+11	; 0x0b
     860:	0e 94 99 0b 	call	0x1732	; 0x1732 <makeWord(unsigned char, unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1320 (discriminator 2)
                   au8Buffer[ (BYTE_CNT + 1) + i * 2 ],
                   au8Buffer[ (BYTE_CNT + 2) + i * 2 ]);

        regs[ u8StartAdd + i ] = temp;
     864:	f6 01       	movw	r30, r12
     866:	81 93       	st	Z+, r24
     868:	91 93       	st	Z+, r25
     86a:	6f 01       	movw	r12, r30
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1314 (discriminator 2)
    au8Buffer[ NB_HI ]   = 0;
    au8Buffer[ NB_LO ]   = u8regsno;
    u8BufferSize         = RESPONSE_SIZE;

    // write registers
    for (i = 0; i < u8regsno; i++)
     86c:	b3 94       	inc	r11
     86e:	f1 cf       	rjmp	.-30     	; 0x852 <Modbus::process_FC16(unsigned int*, unsigned char)+0x3a>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1322
                   au8Buffer[ (BYTE_CNT + 1) + i * 2 ],
                   au8Buffer[ (BYTE_CNT + 2) + i * 2 ]);

        regs[ u8StartAdd + i ] = temp;
    }
    u8CopyBufferSize = u8BufferSize +2;
     870:	f7 01       	movw	r30, r14
     872:	10 81       	ld	r17, Z
     874:	1e 5f       	subi	r17, 0xFE	; 254
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1323
    sendTxBuffer();
     876:	ce 01       	movw	r24, r28
     878:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Modbus::sendTxBuffer()>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:1326

    return u8CopyBufferSize;
}
     87c:	81 2f       	mov	r24, r17
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	1f 91       	pop	r17
     884:	0f 91       	pop	r16
     886:	ff 90       	pop	r15
     888:	ef 90       	pop	r14
     88a:	df 90       	pop	r13
     88c:	cf 90       	pop	r12
     88e:	bf 90       	pop	r11
     890:	af 90       	pop	r10
     892:	08 95       	ret

00000894 <Modbus::poll(unsigned int*, unsigned char)>:
_ZN6Modbus4pollEPjh():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:723
 * @param u8size  size of the register table
 * @return 0 if no query, 1..4 if communication error, >4 if correct query processed
 * @ingroup loop
 */
int8_t Modbus::poll( uint16_t *regs, uint8_t u8size )
{
     894:	8f 92       	push	r8
     896:	9f 92       	push	r9
     898:	af 92       	push	r10
     89a:	bf 92       	push	r11
     89c:	cf 92       	push	r12
     89e:	df 92       	push	r13
     8a0:	ef 92       	push	r14
     8a2:	ff 92       	push	r15
     8a4:	0f 93       	push	r16
     8a6:	1f 93       	push	r17
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	ec 01       	movw	r28, r24
     8ae:	8b 01       	movw	r16, r22
     8b0:	f4 2e       	mov	r15, r20
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:725

    au16regs = regs;
     8b2:	fc 01       	movw	r30, r24
     8b4:	e8 5b       	subi	r30, 0xB8	; 184
     8b6:	ff 4f       	sbci	r31, 0xFF	; 255
     8b8:	71 83       	std	Z+1, r23	; 0x01
     8ba:	60 83       	st	Z, r22
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:726
    u8regsize = u8size;
     8bc:	76 96       	adiw	r30, 0x16	; 22
     8be:	40 83       	st	Z, r20
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:731
	uint8_t u8current;


    // check if there is any incoming frame
    u8current = port->available();
     8c0:	88 81       	ld	r24, Y
     8c2:	99 81       	ldd	r25, Y+1	; 0x01
     8c4:	dc 01       	movw	r26, r24
     8c6:	ed 91       	ld	r30, X+
     8c8:	fc 91       	ld	r31, X
     8ca:	00 84       	ldd	r0, Z+8	; 0x08
     8cc:	f1 85       	ldd	r31, Z+9	; 0x09
     8ce:	e0 2d       	mov	r30, r0
     8d0:	09 95       	icall
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:733

    if (u8current == 0) return 0;
     8d2:	81 11       	cpse	r24, r1
     8d4:	0f c0       	rjmp	.+30     	; 0x8f4 <Modbus::poll(unsigned int*, unsigned char)+0x60>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:740
    // check T35 after frame end or still no frame end
    if (u8current != u8lastRec)
    {
        u8lastRec = u8current;
        u32time = millis();
        return 0;
     8d6:	e1 2c       	mov	r14, r1
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:795
        break;
    default:
        break;
    }
    return i8state;
}
     8d8:	8e 2d       	mov	r24, r14
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	1f 91       	pop	r17
     8e0:	0f 91       	pop	r16
     8e2:	ff 90       	pop	r15
     8e4:	ef 90       	pop	r14
     8e6:	df 90       	pop	r13
     8e8:	cf 90       	pop	r12
     8ea:	bf 90       	pop	r11
     8ec:	af 90       	pop	r10
     8ee:	9f 90       	pop	r9
     8f0:	8f 90       	pop	r8
     8f2:	08 95       	ret
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:736
    u8current = port->available();

    if (u8current == 0) return 0;

    // check T35 after frame end or still no frame end
    if (u8current != u8lastRec)
     8f4:	6e 01       	movw	r12, r28
     8f6:	b7 e4       	ldi	r27, 0x47	; 71
     8f8:	cb 0e       	add	r12, r27
     8fa:	d1 1c       	adc	r13, r1
     8fc:	f6 01       	movw	r30, r12
     8fe:	90 81       	ld	r25, Z
     900:	9e 01       	movw	r18, r28
     902:	2e 5a       	subi	r18, 0xAE	; 174
     904:	3f 4f       	sbci	r19, 0xFF	; 255
     906:	59 01       	movw	r10, r18
     908:	98 17       	cp	r25, r24
     90a:	51 f0       	breq	.+20     	; 0x920 <Modbus::poll(unsigned int*, unsigned char)+0x8c>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:738
    {
        u8lastRec = u8current;
     90c:	80 83       	st	Z, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:739
        u32time = millis();
     90e:	0e 94 64 08 	call	0x10c8	; 0x10c8 <millis>
     912:	d5 01       	movw	r26, r10
     914:	6d 93       	st	X+, r22
     916:	7d 93       	st	X+, r23
     918:	8d 93       	st	X+, r24
     91a:	9c 93       	st	X, r25
     91c:	13 97       	sbiw	r26, 0x03	; 3
     91e:	db cf       	rjmp	.-74     	; 0x8d6 <Modbus::poll(unsigned int*, unsigned char)+0x42>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:742
        return 0;
    }
    if ((unsigned long)(millis() -u32time) < (unsigned long)T35) return 0;
     920:	0e 94 64 08 	call	0x10c8	; 0x10c8 <millis>
     924:	f5 01       	movw	r30, r10
     926:	80 80       	ld	r8, Z
     928:	91 80       	ldd	r9, Z+1	; 0x01
     92a:	a2 80       	ldd	r10, Z+2	; 0x02
     92c:	b3 80       	ldd	r11, Z+3	; 0x03
     92e:	68 19       	sub	r22, r8
     930:	79 09       	sbc	r23, r9
     932:	8a 09       	sbc	r24, r10
     934:	9b 09       	sbc	r25, r11
     936:	65 30       	cpi	r22, 0x05	; 5
     938:	71 05       	cpc	r23, r1
     93a:	81 05       	cpc	r24, r1
     93c:	91 05       	cpc	r25, r1
     93e:	58 f2       	brcs	.-106    	; 0x8d6 <Modbus::poll(unsigned int*, unsigned char)+0x42>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:744

    u8lastRec = 0;
     940:	d6 01       	movw	r26, r12
     942:	1c 92       	st	X, r1
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:745
    int8_t i8state = getRxBuffer();
     944:	ce 01       	movw	r24, r28
     946:	0e 94 92 00 	call	0x124	; 0x124 <Modbus::getRxBuffer()>
     94a:	e8 2e       	mov	r14, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:746
    u8lastError = i8state;
     94c:	8d 83       	std	Y+5, r24	; 0x05
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:747
    if (i8state < 7) return i8state;
     94e:	b6 e0       	ldi	r27, 0x06	; 6
     950:	b8 17       	cp	r27, r24
     952:	14 f6       	brge	.-124    	; 0x8d8 <Modbus::poll(unsigned int*, unsigned char)+0x44>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:750

    // check slave id
    if (au8Buffer[ ID ] != u8id) return 0;
     954:	9e 81       	ldd	r25, Y+6	; 0x06
     956:	8a 81       	ldd	r24, Y+2	; 0x02
     958:	98 13       	cpse	r25, r24
     95a:	bd cf       	rjmp	.-134    	; 0x8d6 <Modbus::poll(unsigned int*, unsigned char)+0x42>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:753

    // validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest();
     95c:	ce 01       	movw	r24, r28
     95e:	0e 94 92 01 	call	0x324	; 0x324 <Modbus::validateRequest()>
     962:	d8 2e       	mov	r13, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:754
    if (u8exception > 0)
     964:	88 23       	and	r24, r24
     966:	69 f0       	breq	.+26     	; 0x982 <Modbus::poll(unsigned int*, unsigned char)+0xee>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:756
    {
        if (u8exception != NO_REPLY)
     968:	ef ef       	ldi	r30, 0xFF	; 255
     96a:	8e 17       	cp	r24, r30
     96c:	39 f0       	breq	.+14     	; 0x97c <Modbus::poll(unsigned int*, unsigned char)+0xe8>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:758
        {
            buildException( u8exception );
     96e:	68 2f       	mov	r22, r24
     970:	ce 01       	movw	r24, r28
     972:	0e 94 1b 02 	call	0x436	; 0x436 <Modbus::buildException(unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:759
            sendTxBuffer();
     976:	ce 01       	movw	r24, r28
     978:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Modbus::sendTxBuffer()>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:761
        }
        u8lastError = u8exception;
     97c:	dd 82       	std	Y+5, r13	; 0x05
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:762
        return u8exception;
     97e:	ed 2c       	mov	r14, r13
     980:	ab cf       	rjmp	.-170    	; 0x8d8 <Modbus::poll(unsigned int*, unsigned char)+0x44>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:765
    }

    u32timeOut = millis();
     982:	0e 94 64 08 	call	0x10c8	; 0x10c8 <millis>
     986:	fe 01       	movw	r30, r28
     988:	ea 5a       	subi	r30, 0xAA	; 170
     98a:	ff 4f       	sbci	r31, 0xFF	; 255
     98c:	60 83       	st	Z, r22
     98e:	71 83       	std	Z+1, r23	; 0x01
     990:	82 83       	std	Z+2, r24	; 0x02
     992:	93 83       	std	Z+3, r25	; 0x03
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:766
    u8lastError = 0;
     994:	1d 82       	std	Y+5, r1	; 0x05
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:769

    // process message
    switch( au8Buffer[ FUNC ] )
     996:	ef 81       	ldd	r30, Y+7	; 0x07
     998:	e1 50       	subi	r30, 0x01	; 1
     99a:	e0 31       	cpi	r30, 0x10	; 16
     99c:	08 f0       	brcs	.+2      	; 0x9a0 <Modbus::poll(unsigned int*, unsigned char)+0x10c>
     99e:	9c cf       	rjmp	.-200    	; 0x8d8 <Modbus::poll(unsigned int*, unsigned char)+0x44>
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	eb 52       	subi	r30, 0x2B	; 43
     9a4:	fb 4f       	sbci	r31, 0xFB	; 251
     9a6:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__tablejump2__>
     9aa:	e5 04       	cpc	r14, r5
     9ac:	e5 04       	cpc	r14, r5
     9ae:	f6 04       	cpc	r15, r6
     9b0:	f6 04       	cpc	r15, r6
     9b2:	07 05       	cpc	r16, r7
     9b4:	18 05       	cpc	r17, r8
     9b6:	6c 04       	cpc	r6, r12
     9b8:	6c 04       	cpc	r6, r12
     9ba:	6c 04       	cpc	r6, r12
     9bc:	6c 04       	cpc	r6, r12
     9be:	6c 04       	cpc	r6, r12
     9c0:	6c 04       	cpc	r6, r12
     9c2:	6c 04       	cpc	r6, r12
     9c4:	6c 04       	cpc	r6, r12
     9c6:	29 05       	cpc	r18, r9
     9c8:	3a 05       	cpc	r19, r10
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:773
    {
    case MB_FC_READ_COILS:
    case MB_FC_READ_DISCRETE_INPUT:
        return process_FC1( regs, u8size );
     9ca:	4f 2d       	mov	r20, r15
     9cc:	b8 01       	movw	r22, r16
     9ce:	ce 01       	movw	r24, r28
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:795
        break;
    default:
        break;
    }
    return i8state;
}
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	1f 91       	pop	r17
     9d6:	0f 91       	pop	r16
     9d8:	ff 90       	pop	r15
     9da:	ef 90       	pop	r14
     9dc:	df 90       	pop	r13
     9de:	cf 90       	pop	r12
     9e0:	bf 90       	pop	r11
     9e2:	af 90       	pop	r10
     9e4:	9f 90       	pop	r9
     9e6:	8f 90       	pop	r8
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:773
    // process message
    switch( au8Buffer[ FUNC ] )
    {
    case MB_FC_READ_COILS:
    case MB_FC_READ_DISCRETE_INPUT:
        return process_FC1( regs, u8size );
     9e8:	0c 94 27 02 	jmp	0x44e	; 0x44e <Modbus::process_FC1(unsigned int*, unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:777
        break;
    case MB_FC_READ_INPUT_REGISTER:
    case MB_FC_READ_REGISTERS :
        return process_FC3( regs, u8size );
     9ec:	4f 2d       	mov	r20, r15
     9ee:	b8 01       	movw	r22, r16
     9f0:	ce 01       	movw	r24, r28
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:795
        break;
    default:
        break;
    }
    return i8state;
}
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	1f 91       	pop	r17
     9f8:	0f 91       	pop	r16
     9fa:	ff 90       	pop	r15
     9fc:	ef 90       	pop	r14
     9fe:	df 90       	pop	r13
     a00:	cf 90       	pop	r12
     a02:	bf 90       	pop	r11
     a04:	af 90       	pop	r10
     a06:	9f 90       	pop	r9
     a08:	8f 90       	pop	r8
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:777
    case MB_FC_READ_DISCRETE_INPUT:
        return process_FC1( regs, u8size );
        break;
    case MB_FC_READ_INPUT_REGISTER:
    case MB_FC_READ_REGISTERS :
        return process_FC3( regs, u8size );
     a0a:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <Modbus::process_FC3(unsigned int*, unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:780
        break;
    case MB_FC_WRITE_COIL:
        return process_FC5( regs, u8size );
     a0e:	4f 2d       	mov	r20, r15
     a10:	b8 01       	movw	r22, r16
     a12:	ce 01       	movw	r24, r28
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:795
        break;
    default:
        break;
    }
    return i8state;
}
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	df 90       	pop	r13
     a22:	cf 90       	pop	r12
     a24:	bf 90       	pop	r11
     a26:	af 90       	pop	r10
     a28:	9f 90       	pop	r9
     a2a:	8f 90       	pop	r8
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:780
    case MB_FC_READ_INPUT_REGISTER:
    case MB_FC_READ_REGISTERS :
        return process_FC3( regs, u8size );
        break;
    case MB_FC_WRITE_COIL:
        return process_FC5( regs, u8size );
     a2c:	0c 94 26 03 	jmp	0x64c	; 0x64c <Modbus::process_FC5(unsigned int*, unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:783
        break;
    case MB_FC_WRITE_REGISTER :
        return process_FC6( regs, u8size );
     a30:	4f 2d       	mov	r20, r15
     a32:	b8 01       	movw	r22, r16
     a34:	ce 01       	movw	r24, r28
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:795
        break;
    default:
        break;
    }
    return i8state;
}
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	1f 91       	pop	r17
     a3c:	0f 91       	pop	r16
     a3e:	ff 90       	pop	r15
     a40:	ef 90       	pop	r14
     a42:	df 90       	pop	r13
     a44:	cf 90       	pop	r12
     a46:	bf 90       	pop	r11
     a48:	af 90       	pop	r10
     a4a:	9f 90       	pop	r9
     a4c:	8f 90       	pop	r8
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:783
        break;
    case MB_FC_WRITE_COIL:
        return process_FC5( regs, u8size );
        break;
    case MB_FC_WRITE_REGISTER :
        return process_FC6( regs, u8size );
     a4e:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <Modbus::process_FC6(unsigned int*, unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:786
        break;
    case MB_FC_WRITE_MULTIPLE_COILS:
        return process_FC15( regs, u8size );
     a52:	4f 2d       	mov	r20, r15
     a54:	b8 01       	movw	r22, r16
     a56:	ce 01       	movw	r24, r28
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:795
        break;
    default:
        break;
    }
    return i8state;
}
     a58:	df 91       	pop	r29
     a5a:	cf 91       	pop	r28
     a5c:	1f 91       	pop	r17
     a5e:	0f 91       	pop	r16
     a60:	ff 90       	pop	r15
     a62:	ef 90       	pop	r14
     a64:	df 90       	pop	r13
     a66:	cf 90       	pop	r12
     a68:	bf 90       	pop	r11
     a6a:	af 90       	pop	r10
     a6c:	9f 90       	pop	r9
     a6e:	8f 90       	pop	r8
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:786
        break;
    case MB_FC_WRITE_REGISTER :
        return process_FC6( regs, u8size );
        break;
    case MB_FC_WRITE_MULTIPLE_COILS:
        return process_FC15( regs, u8size );
     a70:	0c 94 97 03 	jmp	0x72e	; 0x72e <Modbus::process_FC15(unsigned int*, unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:789
        break;
    case MB_FC_WRITE_MULTIPLE_REGISTERS :
        return process_FC16( regs, u8size );
     a74:	4f 2d       	mov	r20, r15
     a76:	b8 01       	movw	r22, r16
     a78:	ce 01       	movw	r24, r28
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:795
        break;
    default:
        break;
    }
    return i8state;
}
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	1f 91       	pop	r17
     a80:	0f 91       	pop	r16
     a82:	ff 90       	pop	r15
     a84:	ef 90       	pop	r14
     a86:	df 90       	pop	r13
     a88:	cf 90       	pop	r12
     a8a:	bf 90       	pop	r11
     a8c:	af 90       	pop	r10
     a8e:	9f 90       	pop	r9
     a90:	8f 90       	pop	r8
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:789
        break;
    case MB_FC_WRITE_MULTIPLE_COILS:
        return process_FC15( regs, u8size );
        break;
    case MB_FC_WRITE_MULTIPLE_REGISTERS :
        return process_FC16( regs, u8size );
     a92:	0c 94 0c 04 	jmp	0x818	; 0x818 <Modbus::process_FC16(unsigned int*, unsigned char)>

00000a96 <setup>:
setup():
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:23

Bounce upButton = Bounce();
Bounce downButton = Bounce();

void setup() {
    pinMode(7, INPUT_PULLUP);
     a96:	62 e0       	ldi	r22, 0x02	; 2
     a98:	87 e0       	ldi	r24, 0x07	; 7
     a9a:	0e 94 1f 09 	call	0x123e	; 0x123e <pinMode>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:24
    pinMode(8, INPUT_PULLUP);
     a9e:	62 e0       	ldi	r22, 0x02	; 2
     aa0:	88 e0       	ldi	r24, 0x08	; 8
     aa2:	0e 94 1f 09 	call	0x123e	; 0x123e <pinMode>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:25
    pinMode(9, INPUT_PULLUP);
     aa6:	62 e0       	ldi	r22, 0x02	; 2
     aa8:	89 e0       	ldi	r24, 0x09	; 9
     aaa:	0e 94 1f 09 	call	0x123e	; 0x123e <pinMode>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:26
    pinMode(10, INPUT_PULLUP);
     aae:	62 e0       	ldi	r22, 0x02	; 2
     ab0:	8a e0       	ldi	r24, 0x0A	; 10
     ab2:	0e 94 1f 09 	call	0x123e	; 0x123e <pinMode>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:28

    pinMode(UP_RELAY, OUTPUT);
     ab6:	61 e0       	ldi	r22, 0x01	; 1
     ab8:	8e e0       	ldi	r24, 0x0E	; 14
     aba:	0e 94 1f 09 	call	0x123e	; 0x123e <pinMode>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:29
    pinMode(DOWN_RELAY, OUTPUT);
     abe:	61 e0       	ldi	r22, 0x01	; 1
     ac0:	8f e0       	ldi	r24, 0x0F	; 15
     ac2:	0e 94 1f 09 	call	0x123e	; 0x123e <pinMode>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:31

    digitalWrite(UP_RELAY, LOW);
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	8e e0       	ldi	r24, 0x0E	; 14
     aca:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <digitalWrite>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:32
    digitalWrite(DOWN_RELAY, LOW);
     ace:	60 e0       	ldi	r22, 0x00	; 0
     ad0:	8f e0       	ldi	r24, 0x0F	; 15
     ad2:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <digitalWrite>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:41
    //bitWrite(address, 2, digitalRead(9));
    //bitWrite(address, 3, digitalRead(10));

    //address += 50;

    upButton.attach(A2, INPUT);
     ad6:	50 e0       	ldi	r21, 0x00	; 0
     ad8:	40 e0       	ldi	r20, 0x00	; 0
     ada:	60 e1       	ldi	r22, 0x10	; 16
     adc:	70 e0       	ldi	r23, 0x00	; 0
     ade:	8b e4       	ldi	r24, 0x4B	; 75
     ae0:	91 e0       	ldi	r25, 0x01	; 1
     ae2:	0e 94 08 08 	call	0x1010	; 0x1010 <Bounce::attach(int, int)>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:42
    upButton.interval(25);
     ae6:	69 e1       	ldi	r22, 0x19	; 25
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	8b e4       	ldi	r24, 0x4B	; 75
     aec:	91 e0       	ldi	r25, 0x01	; 1
     aee:	0e 94 72 07 	call	0xee4	; 0xee4 <Debouncer::interval(unsigned int)>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:43
    downButton.attach(A3, INPUT);
     af2:	50 e0       	ldi	r21, 0x00	; 0
     af4:	40 e0       	ldi	r20, 0x00	; 0
     af6:	61 e1       	ldi	r22, 0x11	; 17
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	89 e3       	ldi	r24, 0x39	; 57
     afc:	91 e0       	ldi	r25, 0x01	; 1
     afe:	0e 94 08 08 	call	0x1010	; 0x1010 <Bounce::attach(int, int)>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:44
    downButton.interval(25);
     b02:	69 e1       	ldi	r22, 0x19	; 25
     b04:	70 e0       	ldi	r23, 0x00	; 0
     b06:	89 e3       	ldi	r24, 0x39	; 57
     b08:	91 e0       	ldi	r25, 0x01	; 1
     b0a:	0e 94 72 07 	call	0xee4	; 0xee4 <Debouncer::interval(unsigned int)>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:46

    slave = Modbus(address, Serial, RS485PIN);
     b0e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <address>
     b12:	e3 e6       	ldi	r30, 0x63	; 99
     b14:	f1 e0       	ldi	r31, 0x01	; 1
     b16:	2b ec       	ldi	r18, 0xCB	; 203
     b18:	31 e0       	ldi	r19, 0x01	; 1
     b1a:	31 83       	std	Z+1, r19	; 0x01
     b1c:	20 83       	st	Z, r18
     b1e:	82 83       	std	Z+2, r24	; 0x02
     b20:	82 e0       	ldi	r24, 0x02	; 2
     b22:	83 83       	std	Z+3, r24	; 0x03
     b24:	88 ee       	ldi	r24, 0xE8	; 232
     b26:	93 e0       	ldi	r25, 0x03	; 3
     b28:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <slave+0x51>
     b2c:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <slave+0x50>
     b30:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <slave+0x5a>
     b34:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <slave+0x5b>
     b38:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <slave+0x5c>
     b3c:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <slave+0x5d>
_ZN14HardwareSerial5beginEm():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.h:121
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     b40:	26 e0       	ldi	r18, 0x06	; 6
     b42:	40 e8       	ldi	r20, 0x80	; 128
     b44:	55 e2       	ldi	r21, 0x25	; 37
     b46:	60 e0       	ldi	r22, 0x00	; 0
     b48:	70 e0       	ldi	r23, 0x00	; 0
     b4a:	8b ec       	ldi	r24, 0xCB	; 203
     b4c:	91 e0       	ldi	r25, 0x01	; 1
     b4e:	0c 94 85 0a 	jmp	0x150a	; 0x150a <HardwareSerial::begin(unsigned long, unsigned char)>

00000b52 <stop()>:
_Z4stopv():
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:68

unsigned long lastCheckTime = 0;

void stop()
{
    digitalWrite(UP_RELAY, 0);
     b52:	60 e0       	ldi	r22, 0x00	; 0
     b54:	8e e0       	ldi	r24, 0x0E	; 14
     b56:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <digitalWrite>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:69
    digitalWrite(DOWN_RELAY, 0);
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	8f e0       	ldi	r24, 0x0F	; 15
     b5e:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <digitalWrite>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:70
    state = 0;
     b62:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <state>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:71
}
     b66:	08 95       	ret

00000b68 <goUP()>:
_Z4goUPv():
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:75

void goUP()
{
    digitalWrite(DOWN_RELAY, 0);
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	8f e0       	ldi	r24, 0x0F	; 15
     b6c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <digitalWrite>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:76
    delay(10);
     b70:	6a e0       	ldi	r22, 0x0A	; 10
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	0e 94 95 08 	call	0x112a	; 0x112a <delay>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:77
    digitalWrite(UP_RELAY, 1);
     b7c:	61 e0       	ldi	r22, 0x01	; 1
     b7e:	8e e0       	ldi	r24, 0x0E	; 14
     b80:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <digitalWrite>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:78
    state = 1;
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <state>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:79
}
     b8a:	08 95       	ret

00000b8c <goDOWN()>:
_Z6goDOWNv():
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:83

void goDOWN()
{
    digitalWrite(UP_RELAY, 0);
     b8c:	60 e0       	ldi	r22, 0x00	; 0
     b8e:	8e e0       	ldi	r24, 0x0E	; 14
     b90:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <digitalWrite>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:84
    delay(10);
     b94:	6a e0       	ldi	r22, 0x0A	; 10
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	0e 94 95 08 	call	0x112a	; 0x112a <delay>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:85
    digitalWrite(DOWN_RELAY, 1);
     ba0:	61 e0       	ldi	r22, 0x01	; 1
     ba2:	8f e0       	ldi	r24, 0x0F	; 15
     ba4:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <digitalWrite>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:86
    state = 3;
     ba8:	83 e0       	ldi	r24, 0x03	; 3
     baa:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <state>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:87
}
     bae:	08 95       	ret

00000bb0 <loop>:
loop():
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:99
bool waitFlag = false;


void loop()
{
    if (autoMove && millis() > (lastCheckTime + UP_TIME))
     bb0:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <autoMove>
     bb4:	88 23       	and	r24, r24
     bb6:	01 f1       	breq	.+64     	; 0xbf8 <loop+0x48>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:99 (discriminator 1)
     bb8:	0e 94 64 08 	call	0x10c8	; 0x10c8 <millis>
     bbc:	ab 01       	movw	r20, r22
     bbe:	bc 01       	movw	r22, r24
     bc0:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <lastCheckTime>
     bc4:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <lastCheckTime+0x1>
     bc8:	a0 91 31 01 	lds	r26, 0x0131	; 0x800131 <lastCheckTime+0x2>
     bcc:	b0 91 32 01 	lds	r27, 0x0132	; 0x800132 <lastCheckTime+0x3>
     bd0:	80 5a       	subi	r24, 0xA0	; 160
     bd2:	95 41       	sbci	r25, 0x15	; 21
     bd4:	af 4f       	sbci	r26, 0xFF	; 255
     bd6:	bf 4f       	sbci	r27, 0xFF	; 255
     bd8:	84 17       	cp	r24, r20
     bda:	95 07       	cpc	r25, r21
     bdc:	a6 07       	cpc	r26, r22
     bde:	b7 07       	cpc	r27, r23
     be0:	58 f4       	brcc	.+22     	; 0xbf8 <loop+0x48>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:101
    {
        autoMove = false;
     be2:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <autoMove>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:102
        stop();
     be6:	0e 94 a9 05 	call	0xb52	; 0xb52 <stop()>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:103
        if (lastDirection == 0)
     bea:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <lastDirection>
     bee:	81 11       	cpse	r24, r1
     bf0:	01 c1       	rjmp	.+514    	; 0xdf4 <loop+0x244>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:105
        {
            state = 2;
     bf2:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:109
        }
        else
        {
            state = 4;
     bf4:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <state>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:113
        }
    }

    upButton.update();
     bf8:	8b e4       	ldi	r24, 0x4B	; 75
     bfa:	91 e0       	ldi	r25, 0x01	; 1
     bfc:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Debouncer::update()>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:114
    downButton.update();
     c00:	89 e3       	ldi	r24, 0x39	; 57
     c02:	91 e0       	ldi	r25, 0x01	; 1
     c04:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Debouncer::update()>
_ZNK9Debouncer12getStateFlagEh():
C:\Users\Jacek\Documents\Arduino\libraries\Bounce2\src/Bounce2.h:76
private:
  inline void changeState();
  inline void setStateFlag(const uint8_t flag)       {state |= flag;}
  inline void unsetStateFlag(const uint8_t flag)     {state &= ~flag;}
  inline void toggleStateFlag(const uint8_t flag)    {state ^= flag;}
  inline bool getStateFlag(const uint8_t flag) const {return((state & flag) != 0);}
     c08:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <upButton+0x8>
loop():
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:116

    if (upButton.changed())
     c0c:	82 ff       	sbrs	r24, 2
     c0e:	09 c0       	rjmp	.+18     	; 0xc22 <loop+0x72>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:118
    {
        up = upButton.read();
     c10:	8b e4       	ldi	r24, 0x4B	; 75
     c12:	91 e0       	ldi	r25, 0x01	; 1
     c14:	0e 94 f7 07 	call	0xfee	; 0xfee <Debouncer::read() const>
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     c1e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
_ZNK9Debouncer12getStateFlagEh():
C:\Users\Jacek\Documents\Arduino\libraries\Bounce2\src/Bounce2.h:76
     c22:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <downButton+0x8>
loop():
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:121
    }

    if (downButton.changed())
     c26:	82 ff       	sbrs	r24, 2
     c28:	09 c0       	rjmp	.+18     	; 0xc3c <loop+0x8c>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:123
    {
        down = downButton.read();
     c2a:	89 e3       	ldi	r24, 0x39	; 57
     c2c:	91 e0       	ldi	r25, 0x01	; 1
     c2e:	0e 94 f7 07 	call	0xfee	; 0xfee <Debouncer::read() const>
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <down+0x1>
     c38:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <down>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:126
    }

    if (modbusChanged && modbusData[0] == 2)
     c3c:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <modbusChanged>
     c40:	88 23       	and	r24, r24
     c42:	b9 f0       	breq	.+46     	; 0xc72 <loop+0xc2>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:126 (discriminator 1)
     c44:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <modbusData>
     c48:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <modbusData+0x1>
     c4c:	02 97       	sbiw	r24, 0x02	; 2
     c4e:	89 f4       	brne	.+34     	; 0xc72 <loop+0xc2>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:128
    {
        goUP();
     c50:	0e 94 b4 05 	call	0xb68	; 0xb68 <goUP()>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:129
        autoMove = true;
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <autoMove>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:130
        lastCheckTime = millis();
     c5a:	0e 94 64 08 	call	0x10c8	; 0x10c8 <millis>
     c5e:	60 93 2f 01 	sts	0x012F, r22	; 0x80012f <lastCheckTime>
     c62:	70 93 30 01 	sts	0x0130, r23	; 0x800130 <lastCheckTime+0x1>
     c66:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <lastCheckTime+0x2>
     c6a:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <lastCheckTime+0x3>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:131
        modbusChanged = false;
     c6e:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <modbusChanged>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:134
    }

    if (modbusChanged && modbusData[0] == 0)
     c72:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <modbusChanged>
     c76:	88 23       	and	r24, r24
     c78:	61 f0       	breq	.+24     	; 0xc92 <loop+0xe2>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:134 (discriminator 1)
     c7a:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <modbusData>
     c7e:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <modbusData+0x1>
     c82:	89 2b       	or	r24, r25
     c84:	31 f4       	brne	.+12     	; 0xc92 <loop+0xe2>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:136
    {
        stop();
     c86:	0e 94 a9 05 	call	0xb52	; 0xb52 <stop()>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:137
        autoMove = false;
     c8a:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <autoMove>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:138
        modbusChanged = false;
     c8e:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <modbusChanged>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:141
    }

    if (modbusChanged && modbusData[0] == 4)
     c92:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <modbusChanged>
     c96:	88 23       	and	r24, r24
     c98:	b9 f0       	breq	.+46     	; 0xcc8 <loop+0x118>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:141 (discriminator 1)
     c9a:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <modbusData>
     c9e:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <modbusData+0x1>
     ca2:	04 97       	sbiw	r24, 0x04	; 4
     ca4:	89 f4       	brne	.+34     	; 0xcc8 <loop+0x118>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:143
    {
        goDOWN();
     ca6:	0e 94 c6 05 	call	0xb8c	; 0xb8c <goDOWN()>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:144
        autoMove = true;
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <autoMove>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:145
        lastCheckTime = millis();
     cb0:	0e 94 64 08 	call	0x10c8	; 0x10c8 <millis>
     cb4:	60 93 2f 01 	sts	0x012F, r22	; 0x80012f <lastCheckTime>
     cb8:	70 93 30 01 	sts	0x0130, r23	; 0x800130 <lastCheckTime+0x1>
     cbc:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <lastCheckTime+0x2>
     cc0:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <lastCheckTime+0x3>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:146
        modbusChanged = false;
     cc4:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <modbusChanged>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:149
    }

    if (down == HIGH && up == HIGH && !autoMove)
     cc8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <down>
     ccc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <down+0x1>
     cd0:	01 97       	sbiw	r24, 0x01	; 1
     cd2:	61 f4       	brne	.+24     	; 0xcec <loop+0x13c>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:149 (discriminator 1)
     cd4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     cd8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     cdc:	01 97       	sbiw	r24, 0x01	; 1
     cde:	31 f4       	brne	.+12     	; 0xcec <loop+0x13c>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:149 (discriminator 2)
     ce0:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <autoMove>
     ce4:	81 11       	cpse	r24, r1
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <loop+0x13c>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:151
    {
        stop();
     ce8:	0e 94 a9 05 	call	0xb52	; 0xb52 <stop()>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:154
    }

    if (down == HIGH && up == HIGH)
     cec:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <down>
     cf0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <down+0x1>
     cf4:	81 30       	cpi	r24, 0x01	; 1
     cf6:	91 05       	cpc	r25, r1
     cf8:	09 f0       	breq	.+2      	; 0xcfc <loop+0x14c>
     cfa:	7e c0       	rjmp	.+252    	; 0xdf8 <loop+0x248>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:154 (discriminator 1)
     cfc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     d00:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     d04:	01 97       	sbiw	r24, 0x01	; 1
     d06:	11 f4       	brne	.+4      	; 0xd0c <loop+0x15c>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:156
    {
        waitFlag = false;
     d08:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <__data_end>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:178
        autoMove = true;
        waitFlag = true;
        delay(500);
    }

    if (down == HIGH && up == LOW && !waitFlag)
     d0c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <down>
     d10:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <down+0x1>
     d14:	01 97       	sbiw	r24, 0x01	; 1
     d16:	e1 f4       	brne	.+56     	; 0xd50 <loop+0x1a0>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:178 (discriminator 1)
     d18:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     d1c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     d20:	89 2b       	or	r24, r25
     d22:	b1 f4       	brne	.+44     	; 0xd50 <loop+0x1a0>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:178 (discriminator 2)
     d24:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
     d28:	81 11       	cpse	r24, r1
     d2a:	12 c0       	rjmp	.+36     	; 0xd50 <loop+0x1a0>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:180
    {
        if (autoMove)
     d2c:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <autoMove>
     d30:	88 23       	and	r24, r24
     d32:	09 f4       	brne	.+2      	; 0xd36 <loop+0x186>
     d34:	93 c0       	rjmp	.+294    	; 0xe5c <loop+0x2ac>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:182
        {
            stop();
     d36:	0e 94 a9 05 	call	0xb52	; 0xb52 <stop()>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:183
            autoMove = false;
     d3a:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <autoMove>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:184
            waitFlag = true;
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:190
        }
        else
        {
            goDOWN();
        }
        delay(50);
     d44:	62 e3       	ldi	r22, 0x32	; 50
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	0e 94 95 08 	call	0x112a	; 0x112a <delay>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:193
    }

    if (down == LOW && up == HIGH && !waitFlag)
     d50:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <down>
     d54:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <down+0x1>
     d58:	89 2b       	or	r24, r25
     d5a:	e1 f4       	brne	.+56     	; 0xd94 <loop+0x1e4>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:193 (discriminator 1)
     d5c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     d60:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     d64:	01 97       	sbiw	r24, 0x01	; 1
     d66:	b1 f4       	brne	.+44     	; 0xd94 <loop+0x1e4>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:193 (discriminator 2)
     d68:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
     d6c:	81 11       	cpse	r24, r1
     d6e:	12 c0       	rjmp	.+36     	; 0xd94 <loop+0x1e4>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:195
    {
        if (autoMove)
     d70:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <autoMove>
     d74:	88 23       	and	r24, r24
     d76:	09 f4       	brne	.+2      	; 0xd7a <loop+0x1ca>
     d78:	74 c0       	rjmp	.+232    	; 0xe62 <loop+0x2b2>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:197
        {
            stop();
     d7a:	0e 94 a9 05 	call	0xb52	; 0xb52 <stop()>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:198
            autoMove = false;
     d7e:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <autoMove>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:199
            waitFlag = true;
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:205
        }
        else
        {
            goUP();
        }
        delay(50);
     d88:	62 e3       	ldi	r22, 0x32	; 50
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	0e 94 95 08 	call	0x112a	; 0x112a <delay>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:208
    }

    modbusData[2] = slave.getInCnt();
     d94:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <slave+0x4a>
     d98:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <slave+0x4b>
     d9c:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <modbusData+0x5>
     da0:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <modbusData+0x4>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:210

    lastModbusRegister1 = modbusData[0];
     da4:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <modbusData>
     da8:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <modbusData+0x1>
     dac:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <lastModbusRegister1+0x1>
     db0:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <lastModbusRegister1>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:211
    modbusData[1] = state;
     db4:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <state>
     db8:	08 2e       	mov	r0, r24
     dba:	00 0c       	add	r0, r0
     dbc:	99 0b       	sbc	r25, r25
     dbe:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <modbusData+0x3>
     dc2:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <modbusData+0x2>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:213

    slave.poll( modbusData, 3 );
     dc6:	43 e0       	ldi	r20, 0x03	; 3
     dc8:	6d e5       	ldi	r22, 0x5D	; 93
     dca:	71 e0       	ldi	r23, 0x01	; 1
     dcc:	83 e6       	ldi	r24, 0x63	; 99
     dce:	91 e0       	ldi	r25, 0x01	; 1
     dd0:	0e 94 4a 04 	call	0x894	; 0x894 <Modbus::poll(unsigned int*, unsigned char)>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:215

    if (modbusData[0] != lastModbusRegister1)
     dd4:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <modbusData>
     dd8:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <modbusData+0x1>
     ddc:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <lastModbusRegister1>
     de0:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <lastModbusRegister1+0x1>
     de4:	28 17       	cp	r18, r24
     de6:	39 07       	cpc	r19, r25
     de8:	09 f4       	brne	.+2      	; 0xdec <loop+0x23c>
     dea:	3e c0       	rjmp	.+124    	; 0xe68 <loop+0x2b8>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:217
    {
        modbusChanged = true;
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <modbusChanged>
     df2:	08 95       	ret
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:109
        {
            state = 2;
        }
        else
        {
            state = 4;
     df4:	84 e0       	ldi	r24, 0x04	; 4
     df6:	fe ce       	rjmp	.-516    	; 0xbf4 <loop+0x44>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:160
    {
        waitFlag = false;
    }

    // dwa przyciski
    if (down == LOW && up == LOW && !waitFlag)
     df8:	89 2b       	or	r24, r25
     dfa:	09 f0       	breq	.+2      	; 0xdfe <loop+0x24e>
     dfc:	87 cf       	rjmp	.-242    	; 0xd0c <loop+0x15c>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:160 (discriminator 1)
     dfe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     e02:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     e06:	89 2b       	or	r24, r25
     e08:	09 f0       	breq	.+2      	; 0xe0c <loop+0x25c>
     e0a:	80 cf       	rjmp	.-256    	; 0xd0c <loop+0x15c>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:160 (discriminator 2)
     e0c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
     e10:	81 11       	cpse	r24, r1
     e12:	7c cf       	rjmp	.-264    	; 0xd0c <loop+0x15c>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:162
    {
        if (lastDirection == 0)
     e14:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <lastDirection>
     e18:	81 11       	cpse	r24, r1
     e1a:	1b c0       	rjmp	.+54     	; 0xe52 <loop+0x2a2>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:164
        {
            lastDirection = 1;
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <lastDirection>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:165
            goDOWN();
     e22:	0e 94 c6 05 	call	0xb8c	; 0xb8c <goDOWN()>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:172
        else
        {
            lastDirection = 0;
            goUP();
        }
        lastCheckTime = millis();
     e26:	0e 94 64 08 	call	0x10c8	; 0x10c8 <millis>
     e2a:	60 93 2f 01 	sts	0x012F, r22	; 0x80012f <lastCheckTime>
     e2e:	70 93 30 01 	sts	0x0130, r23	; 0x800130 <lastCheckTime+0x1>
     e32:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <lastCheckTime+0x2>
     e36:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <lastCheckTime+0x3>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:173
        autoMove = true;
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <autoMove>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:174
        waitFlag = true;
     e40:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:175
        delay(500);
     e44:	64 ef       	ldi	r22, 0xF4	; 244
     e46:	71 e0       	ldi	r23, 0x01	; 1
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	0e 94 95 08 	call	0x112a	; 0x112a <delay>
     e50:	5d cf       	rjmp	.-326    	; 0xd0c <loop+0x15c>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:169
            lastDirection = 1;
            goDOWN();
        }
        else
        {
            lastDirection = 0;
     e52:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <lastDirection>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:170
            goUP();
     e56:	0e 94 b4 05 	call	0xb68	; 0xb68 <goUP()>
     e5a:	e5 cf       	rjmp	.-54     	; 0xe26 <loop+0x276>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:188
            autoMove = false;
            waitFlag = true;
        }
        else
        {
            goDOWN();
     e5c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <goDOWN()>
     e60:	71 cf       	rjmp	.-286    	; 0xd44 <loop+0x194>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:203
            autoMove = false;
            waitFlag = true;
        }
        else
        {
            goUP();
     e62:	0e 94 b4 05 	call	0xb68	; 0xb68 <goUP()>
     e66:	90 cf       	rjmp	.-224    	; 0xd88 <loop+0x1d8>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:221
    {
        modbusChanged = true;
    }
    else
    {
        modbusChanged = false;
     e68:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <modbusChanged>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:223
    }
}
     e6c:	08 95       	ret

00000e6e <_GLOBAL__sub_I__ZN6ModbusC2EhR6Streamh>:
_ZN6ModbusC4Ehhh():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:274
 * @ingroup setup
 * @overload Modbus::Modbus(uint8_t u8id, T_Stream& port, uint8_t u8txenpin)
 */
Modbus::Modbus(uint8_t u8id, uint8_t u8serno, uint8_t u8txenpin)
{
    this->u8id = u8id;
     e6e:	e3 e6       	ldi	r30, 0x63	; 99
     e70:	f1 e0       	ldi	r31, 0x01	; 1
     e72:	12 82       	std	Z+2, r1	; 0x02
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:275
    this->u8txenpin = u8txenpin;
     e74:	13 82       	std	Z+3, r1	; 0x03
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:276
    this->u16timeOut = 1000;
     e76:	88 ee       	ldi	r24, 0xE8	; 232
     e78:	93 e0       	ldi	r25, 0x03	; 3
     e7a:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <slave+0x51>
     e7e:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <slave+0x50>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:277
    this->u32overTime = 0;
     e82:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <slave+0x5a>
     e86:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <slave+0x5b>
     e8a:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <slave+0x5c>
     e8e:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <slave+0x5d>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Master-Slave-for-Arduino-master/ModbusRtu.h:300
        port = &Serial3;
        break;
#endif
    case 0:
    default:
        port = &Serial;
     e92:	8b ec       	ldi	r24, 0xCB	; 203
     e94:	91 e0       	ldi	r25, 0x01	; 1
     e96:	91 83       	std	Z+1, r25	; 0x01
     e98:	80 83       	st	Z, r24
_GLOBAL__sub_I__ZN6ModbusC2EhR6Streamh():
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:19
Modbus slave;

uint16_t modbusData[3];
int address = 59;

Bounce upButton = Bounce();
     e9a:	8b e4       	ldi	r24, 0x4B	; 75
     e9c:	91 e0       	ldi	r25, 0x01	; 1
     e9e:	0e 94 fb 07 	call	0xff6	; 0xff6 <Bounce::Bounce()>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023/roller_shutter_2023.ino:20
Bounce downButton = Bounce();
     ea2:	89 e3       	ldi	r24, 0x39	; 57
     ea4:	91 e0       	ldi	r25, 0x01	; 1
     ea6:	0c 94 fb 07 	jmp	0xff6	; 0xff6 <Bounce::Bounce()>

00000eaa <Bounce::readCurrentState()>:
_ZN6Bounce16readCurrentStateEv():
C:\Users\Jacek\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:146

void Bounce::attach(int pin) {
    this->pin = pin;
    
    // SET INITIAL STATE
    begin();
     eaa:	fc 01       	movw	r30, r24
     eac:	81 89       	ldd	r24, Z+17	; 0x11
     eae:	0e 94 89 09 	call	0x1312	; 0x1312 <digitalRead>
     eb2:	21 e0       	ldi	r18, 0x01	; 1
     eb4:	89 2b       	or	r24, r25
     eb6:	09 f4       	brne	.+2      	; 0xeba <Bounce::readCurrentState()+0x10>
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	82 2f       	mov	r24, r18
     ebc:	08 95       	ret

00000ebe <Bounce::setPinMode(int, int)>:
_ZN6Bounce10setPinModeEii():
     ebe:	86 2f       	mov	r24, r22
     ec0:	64 2f       	mov	r22, r20
     ec2:	0c 94 1f 09 	jmp	0x123e	; 0x123e <pinMode>

00000ec6 <Debouncer::Debouncer()>:
_ZN9DebouncerC2Ev():
     ec6:	fc 01       	movw	r30, r24
     ec8:	82 e1       	ldi	r24, 0x12	; 18
     eca:	91 e0       	ldi	r25, 0x01	; 1
     ecc:	91 83       	std	Z+1, r25	; 0x01
     ece:	80 83       	st	Z, r24
     ed0:	12 82       	std	Z+2, r1	; 0x02
     ed2:	13 82       	std	Z+3, r1	; 0x03
     ed4:	14 82       	std	Z+4, r1	; 0x04
     ed6:	15 82       	std	Z+5, r1	; 0x05
     ed8:	8a e0       	ldi	r24, 0x0A	; 10
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	97 83       	std	Z+7, r25	; 0x07
     ede:	86 83       	std	Z+6, r24	; 0x06
     ee0:	10 86       	std	Z+8, r1	; 0x08
     ee2:	08 95       	ret

00000ee4 <Debouncer::interval(unsigned int)>:
_ZN9Debouncer8intervalEj():
     ee4:	fc 01       	movw	r30, r24
     ee6:	77 83       	std	Z+7, r23	; 0x07
     ee8:	66 83       	std	Z+6, r22	; 0x06
     eea:	08 95       	ret

00000eec <Debouncer::begin()>:
_ZN9Debouncer5beginEv():
     eec:	cf 93       	push	r28
     eee:	df 93       	push	r29
     ef0:	ec 01       	movw	r28, r24
     ef2:	18 86       	std	Y+8, r1	; 0x08
     ef4:	e8 81       	ld	r30, Y
     ef6:	f9 81       	ldd	r31, Y+1	; 0x01
     ef8:	01 90       	ld	r0, Z+
     efa:	f0 81       	ld	r31, Z
     efc:	e0 2d       	mov	r30, r0
     efe:	09 95       	icall
     f00:	88 23       	and	r24, r24
     f02:	19 f0       	breq	.+6      	; 0xf0a <Debouncer::begin()+0x1e>
_ZN9Debouncer12setStateFlagEh():
     f04:	88 85       	ldd	r24, Y+8	; 0x08
     f06:	83 60       	ori	r24, 0x03	; 3
     f08:	88 87       	std	Y+8, r24	; 0x08
_ZN9Debouncer5beginEv():
     f0a:	0e 94 64 08 	call	0x10c8	; 0x10c8 <millis>
     f0e:	6a 83       	std	Y+2, r22	; 0x02
     f10:	7b 83       	std	Y+3, r23	; 0x03
     f12:	8c 83       	std	Y+4, r24	; 0x04
     f14:	9d 83       	std	Y+5, r25	; 0x05
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	08 95       	ret

00000f1c <Debouncer::update()>:
_ZN9Debouncer6updateEv():
     f1c:	cf 92       	push	r12
     f1e:	df 92       	push	r13
     f20:	ef 92       	push	r14
     f22:	ff 92       	push	r15
     f24:	0f 93       	push	r16
     f26:	1f 93       	push	r17
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	ec 01       	movw	r28, r24
_ZN9Debouncer14unsetStateFlagEh():
     f2e:	88 85       	ldd	r24, Y+8	; 0x08
     f30:	8b 7f       	andi	r24, 0xFB	; 251
     f32:	88 87       	std	Y+8, r24	; 0x08
_ZN9Debouncer6updateEv():
     f34:	e8 81       	ld	r30, Y
     f36:	f9 81       	ldd	r31, Y+1	; 0x01
     f38:	01 90       	ld	r0, Z+
     f3a:	f0 81       	ld	r31, Z
     f3c:	e0 2d       	mov	r30, r0
     f3e:	ce 01       	movw	r24, r28
     f40:	09 95       	icall
     f42:	18 2f       	mov	r17, r24
_ZNK9Debouncer12getStateFlagEh():
     f44:	88 85       	ldd	r24, Y+8	; 0x08
     f46:	86 95       	lsr	r24
     f48:	81 70       	andi	r24, 0x01	; 1
_ZN9Debouncer6updateEv():
     f4a:	18 17       	cp	r17, r24
     f4c:	b9 f0       	breq	.+46     	; 0xf7c <Debouncer::update()+0x60>
     f4e:	0e 94 64 08 	call	0x10c8	; 0x10c8 <millis>
     f52:	6a 83       	std	Y+2, r22	; 0x02
     f54:	7b 83       	std	Y+3, r23	; 0x03
     f56:	8c 83       	std	Y+4, r24	; 0x04
     f58:	9d 83       	std	Y+5, r25	; 0x05
_ZN9Debouncer15toggleStateFlagEh():
     f5a:	88 85       	ldd	r24, Y+8	; 0x08
     f5c:	92 e0       	ldi	r25, 0x02	; 2
     f5e:	89 27       	eor	r24, r25
     f60:	88 87       	std	Y+8, r24	; 0x08
_ZNK9Debouncer12getStateFlagEh():
     f62:	88 85       	ldd	r24, Y+8	; 0x08
_ZN9Debouncer6updateEv():
     f64:	82 fb       	bst	r24, 2
     f66:	88 27       	eor	r24, r24
     f68:	80 f9       	bld	r24, 0
     f6a:	df 91       	pop	r29
     f6c:	cf 91       	pop	r28
     f6e:	1f 91       	pop	r17
     f70:	0f 91       	pop	r16
     f72:	ff 90       	pop	r15
     f74:	ef 90       	pop	r14
     f76:	df 90       	pop	r13
     f78:	cf 90       	pop	r12
     f7a:	08 95       	ret
     f7c:	0e 94 64 08 	call	0x10c8	; 0x10c8 <millis>
     f80:	ca 80       	ldd	r12, Y+2	; 0x02
     f82:	db 80       	ldd	r13, Y+3	; 0x03
     f84:	ec 80       	ldd	r14, Y+4	; 0x04
     f86:	fd 80       	ldd	r15, Y+5	; 0x05
     f88:	ab 01       	movw	r20, r22
     f8a:	bc 01       	movw	r22, r24
     f8c:	4c 19       	sub	r20, r12
     f8e:	5d 09       	sbc	r21, r13
     f90:	6e 09       	sbc	r22, r14
     f92:	7f 09       	sbc	r23, r15
     f94:	8e 81       	ldd	r24, Y+6	; 0x06
     f96:	9f 81       	ldd	r25, Y+7	; 0x07
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	a0 e0       	ldi	r26, 0x00	; 0
     f9c:	48 17       	cp	r20, r24
     f9e:	59 07       	cpc	r21, r25
     fa0:	6a 07       	cpc	r22, r26
     fa2:	7b 07       	cpc	r23, r27
     fa4:	f0 f2       	brcs	.-68     	; 0xf62 <Debouncer::update()+0x46>
_ZNK9Debouncer12getStateFlagEh():
     fa6:	88 85       	ldd	r24, Y+8	; 0x08
     fa8:	81 70       	andi	r24, 0x01	; 1
_ZN9Debouncer6updateEv():
     faa:	18 17       	cp	r17, r24
     fac:	d1 f2       	breq	.-76     	; 0xf62 <Debouncer::update()+0x46>
     fae:	0e 94 64 08 	call	0x10c8	; 0x10c8 <millis>
     fb2:	6a 83       	std	Y+2, r22	; 0x02
     fb4:	7b 83       	std	Y+3, r23	; 0x03
     fb6:	8c 83       	std	Y+4, r24	; 0x04
     fb8:	9d 83       	std	Y+5, r25	; 0x05
_ZN9Debouncer15toggleStateFlagEh():
     fba:	88 85       	ldd	r24, Y+8	; 0x08
     fbc:	91 e0       	ldi	r25, 0x01	; 1
     fbe:	89 27       	eor	r24, r25
_ZN9Debouncer12setStateFlagEh():
     fc0:	84 60       	ori	r24, 0x04	; 4
     fc2:	88 87       	std	Y+8, r24	; 0x08
_ZN9Debouncer11changeStateEv():
     fc4:	0e 94 64 08 	call	0x10c8	; 0x10c8 <millis>
     fc8:	09 85       	ldd	r16, Y+9	; 0x09
     fca:	1a 85       	ldd	r17, Y+10	; 0x0a
     fcc:	2b 85       	ldd	r18, Y+11	; 0x0b
     fce:	3c 85       	ldd	r19, Y+12	; 0x0c
     fd0:	60 1b       	sub	r22, r16
     fd2:	71 0b       	sbc	r23, r17
     fd4:	82 0b       	sbc	r24, r18
     fd6:	93 0b       	sbc	r25, r19
     fd8:	6d 87       	std	Y+13, r22	; 0x0d
     fda:	7e 87       	std	Y+14, r23	; 0x0e
     fdc:	8f 87       	std	Y+15, r24	; 0x0f
     fde:	98 8b       	std	Y+16, r25	; 0x10
     fe0:	0e 94 64 08 	call	0x10c8	; 0x10c8 <millis>
     fe4:	69 87       	std	Y+9, r22	; 0x09
     fe6:	7a 87       	std	Y+10, r23	; 0x0a
     fe8:	8b 87       	std	Y+11, r24	; 0x0b
     fea:	9c 87       	std	Y+12, r25	; 0x0c
     fec:	ba cf       	rjmp	.-140    	; 0xf62 <Debouncer::update()+0x46>

00000fee <Debouncer::read() const>:
_ZNK9Debouncer12getStateFlagEh():
     fee:	fc 01       	movw	r30, r24
     ff0:	80 85       	ldd	r24, Z+8	; 0x08
_ZNK9Debouncer4readEv():
     ff2:	81 70       	andi	r24, 0x01	; 1
     ff4:	08 95       	ret

00000ff6 <Bounce::Bounce()>:
_ZN6BounceC2Ev():
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
     ffa:	ec 01       	movw	r28, r24
     ffc:	0e 94 63 07 	call	0xec6	; 0xec6 <Debouncer::Debouncer()>
    1000:	88 e1       	ldi	r24, 0x18	; 24
    1002:	91 e0       	ldi	r25, 0x01	; 1
    1004:	99 83       	std	Y+1, r25	; 0x01
    1006:	88 83       	st	Y, r24
    1008:	19 8a       	std	Y+17, r1	; 0x11
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	08 95       	ret

00001010 <Bounce::attach(int, int)>:
_ZN6Bounce6attachEii():
C:\Users\Jacek\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:149
}

void Bounce::attach(int pin, int mode){
    1010:	1f 93       	push	r17
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
    1016:	ec 01       	movw	r28, r24
    1018:	16 2f       	mov	r17, r22
C:\Users\Jacek\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:150
    setPinMode(pin, mode);
    101a:	e8 81       	ld	r30, Y
    101c:	f9 81       	ldd	r31, Y+1	; 0x01
    101e:	02 80       	ldd	r0, Z+2	; 0x02
    1020:	f3 81       	ldd	r31, Z+3	; 0x03
    1022:	e0 2d       	mov	r30, r0
    1024:	09 95       	icall
_ZN6Bounce6attachEi():
C:\Users\Jacek\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:143
Bounce::Bounce()
    : pin(0)
{}

void Bounce::attach(int pin) {
    this->pin = pin;
    1026:	19 8b       	std	Y+17, r17	; 0x11
C:\Users\Jacek\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:146
    
    // SET INITIAL STATE
    begin();
    1028:	ce 01       	movw	r24, r28
_ZN6Bounce6attachEii():
C:\Users\Jacek\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:152
}

void Bounce::attach(int pin, int mode){
    setPinMode(pin, mode);
    this->attach(pin);
}
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	1f 91       	pop	r17
_ZN6Bounce6attachEi():
C:\Users\Jacek\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:146

void Bounce::attach(int pin) {
    this->pin = pin;
    
    // SET INITIAL STATE
    begin();
    1030:	0c 94 76 07 	jmp	0xeec	; 0xeec <Debouncer::begin()>

00001034 <__vector_16>:
__vector_16():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    1034:	1f 92       	push	r1
    1036:	0f 92       	push	r0
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	0f 92       	push	r0
    103c:	11 24       	eor	r1, r1
    103e:	2f 93       	push	r18
    1040:	3f 93       	push	r19
    1042:	8f 93       	push	r24
    1044:	9f 93       	push	r25
    1046:	af 93       	push	r26
    1048:	bf 93       	push	r27
    104a:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <timer0_millis>
    104e:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <timer0_millis+0x1>
    1052:	a0 91 c9 01 	lds	r26, 0x01C9	; 0x8001c9 <timer0_millis+0x2>
    1056:	b0 91 ca 01 	lds	r27, 0x01CA	; 0x8001ca <timer0_millis+0x3>
    105a:	30 91 c6 01 	lds	r19, 0x01C6	; 0x8001c6 <timer0_fract>
    105e:	23 e0       	ldi	r18, 0x03	; 3
    1060:	23 0f       	add	r18, r19
    1062:	2d 37       	cpi	r18, 0x7D	; 125
    1064:	68 f1       	brcs	.+90     	; 0x10c0 <__vector_16+0x8c>
    1066:	26 e8       	ldi	r18, 0x86	; 134
    1068:	23 0f       	add	r18, r19
    106a:	02 96       	adiw	r24, 0x02	; 2
    106c:	a1 1d       	adc	r26, r1
    106e:	b1 1d       	adc	r27, r1
    1070:	20 93 c6 01 	sts	0x01C6, r18	; 0x8001c6 <timer0_fract>
    1074:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <timer0_millis>
    1078:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <timer0_millis+0x1>
    107c:	a0 93 c9 01 	sts	0x01C9, r26	; 0x8001c9 <timer0_millis+0x2>
    1080:	b0 93 ca 01 	sts	0x01CA, r27	; 0x8001ca <timer0_millis+0x3>
    1084:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <timer0_overflow_count>
    1088:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <timer0_overflow_count+0x1>
    108c:	a0 91 c4 01 	lds	r26, 0x01C4	; 0x8001c4 <timer0_overflow_count+0x2>
    1090:	b0 91 c5 01 	lds	r27, 0x01C5	; 0x8001c5 <timer0_overflow_count+0x3>
    1094:	01 96       	adiw	r24, 0x01	; 1
    1096:	a1 1d       	adc	r26, r1
    1098:	b1 1d       	adc	r27, r1
    109a:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <timer0_overflow_count>
    109e:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <timer0_overflow_count+0x1>
    10a2:	a0 93 c4 01 	sts	0x01C4, r26	; 0x8001c4 <timer0_overflow_count+0x2>
    10a6:	b0 93 c5 01 	sts	0x01C5, r27	; 0x8001c5 <timer0_overflow_count+0x3>
    10aa:	bf 91       	pop	r27
    10ac:	af 91       	pop	r26
    10ae:	9f 91       	pop	r25
    10b0:	8f 91       	pop	r24
    10b2:	3f 91       	pop	r19
    10b4:	2f 91       	pop	r18
    10b6:	0f 90       	pop	r0
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	0f 90       	pop	r0
    10bc:	1f 90       	pop	r1
    10be:	18 95       	reti
    10c0:	01 96       	adiw	r24, 0x01	; 1
    10c2:	a1 1d       	adc	r26, r1
    10c4:	b1 1d       	adc	r27, r1
    10c6:	d4 cf       	rjmp	.-88     	; 0x1070 <__vector_16+0x3c>

000010c8 <millis>:
millis():
    10c8:	2f b7       	in	r18, 0x3f	; 63
    10ca:	f8 94       	cli
    10cc:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <timer0_millis>
    10d0:	70 91 c8 01 	lds	r23, 0x01C8	; 0x8001c8 <timer0_millis+0x1>
    10d4:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <timer0_millis+0x2>
    10d8:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <timer0_millis+0x3>
    10dc:	2f bf       	out	0x3f, r18	; 63
    10de:	08 95       	ret

000010e0 <micros>:
micros():
    10e0:	3f b7       	in	r19, 0x3f	; 63
    10e2:	f8 94       	cli
    10e4:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <timer0_overflow_count>
    10e8:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <timer0_overflow_count+0x1>
    10ec:	a0 91 c4 01 	lds	r26, 0x01C4	; 0x8001c4 <timer0_overflow_count+0x2>
    10f0:	b0 91 c5 01 	lds	r27, 0x01C5	; 0x8001c5 <timer0_overflow_count+0x3>
    10f4:	26 b5       	in	r18, 0x26	; 38
    10f6:	a8 9b       	sbis	0x15, 0	; 21
    10f8:	05 c0       	rjmp	.+10     	; 0x1104 <micros+0x24>
    10fa:	2f 3f       	cpi	r18, 0xFF	; 255
    10fc:	19 f0       	breq	.+6      	; 0x1104 <micros+0x24>
    10fe:	01 96       	adiw	r24, 0x01	; 1
    1100:	a1 1d       	adc	r26, r1
    1102:	b1 1d       	adc	r27, r1
    1104:	3f bf       	out	0x3f, r19	; 63
    1106:	ba 2f       	mov	r27, r26
    1108:	a9 2f       	mov	r26, r25
    110a:	98 2f       	mov	r25, r24
    110c:	88 27       	eor	r24, r24
    110e:	bc 01       	movw	r22, r24
    1110:	cd 01       	movw	r24, r26
    1112:	62 0f       	add	r22, r18
    1114:	71 1d       	adc	r23, r1
    1116:	81 1d       	adc	r24, r1
    1118:	91 1d       	adc	r25, r1
    111a:	42 e0       	ldi	r20, 0x02	; 2
    111c:	66 0f       	add	r22, r22
    111e:	77 1f       	adc	r23, r23
    1120:	88 1f       	adc	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	4a 95       	dec	r20
    1126:	d1 f7       	brne	.-12     	; 0x111c <micros+0x3c>
    1128:	08 95       	ret

0000112a <delay>:
delay():
    112a:	8f 92       	push	r8
    112c:	9f 92       	push	r9
    112e:	af 92       	push	r10
    1130:	bf 92       	push	r11
    1132:	cf 92       	push	r12
    1134:	df 92       	push	r13
    1136:	ef 92       	push	r14
    1138:	ff 92       	push	r15
    113a:	6b 01       	movw	r12, r22
    113c:	7c 01       	movw	r14, r24
    113e:	0e 94 70 08 	call	0x10e0	; 0x10e0 <micros>
    1142:	4b 01       	movw	r8, r22
    1144:	5c 01       	movw	r10, r24
    1146:	c1 14       	cp	r12, r1
    1148:	d1 04       	cpc	r13, r1
    114a:	e1 04       	cpc	r14, r1
    114c:	f1 04       	cpc	r15, r1
    114e:	e9 f0       	breq	.+58     	; 0x118a <delay+0x60>
    1150:	0e 94 ae 0b 	call	0x175c	; 0x175c <yield>
    1154:	0e 94 70 08 	call	0x10e0	; 0x10e0 <micros>
    1158:	68 19       	sub	r22, r8
    115a:	79 09       	sbc	r23, r9
    115c:	8a 09       	sbc	r24, r10
    115e:	9b 09       	sbc	r25, r11
    1160:	68 3e       	cpi	r22, 0xE8	; 232
    1162:	73 40       	sbci	r23, 0x03	; 3
    1164:	81 05       	cpc	r24, r1
    1166:	91 05       	cpc	r25, r1
    1168:	70 f3       	brcs	.-36     	; 0x1146 <delay+0x1c>
    116a:	21 e0       	ldi	r18, 0x01	; 1
    116c:	c2 1a       	sub	r12, r18
    116e:	d1 08       	sbc	r13, r1
    1170:	e1 08       	sbc	r14, r1
    1172:	f1 08       	sbc	r15, r1
    1174:	88 ee       	ldi	r24, 0xE8	; 232
    1176:	88 0e       	add	r8, r24
    1178:	83 e0       	ldi	r24, 0x03	; 3
    117a:	98 1e       	adc	r9, r24
    117c:	a1 1c       	adc	r10, r1
    117e:	b1 1c       	adc	r11, r1
    1180:	c1 14       	cp	r12, r1
    1182:	d1 04       	cpc	r13, r1
    1184:	e1 04       	cpc	r14, r1
    1186:	f1 04       	cpc	r15, r1
    1188:	29 f7       	brne	.-54     	; 0x1154 <delay+0x2a>
    118a:	ff 90       	pop	r15
    118c:	ef 90       	pop	r14
    118e:	df 90       	pop	r13
    1190:	cf 90       	pop	r12
    1192:	bf 90       	pop	r11
    1194:	af 90       	pop	r10
    1196:	9f 90       	pop	r9
    1198:	8f 90       	pop	r8
    119a:	08 95       	ret

0000119c <init>:
init():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    119c:	78 94       	sei
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    119e:	84 b5       	in	r24, 0x24	; 36
    11a0:	83 60       	ori	r24, 0x03	; 3
    11a2:	84 bd       	out	0x24, r24	; 36
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    11a4:	85 b5       	in	r24, 0x25	; 37
    11a6:	83 60       	ori	r24, 0x03	; 3
    11a8:	85 bd       	out	0x25, r24	; 37
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    11aa:	ee e6       	ldi	r30, 0x6E	; 110
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	81 60       	ori	r24, 0x01	; 1
    11b2:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    11b4:	e1 e8       	ldi	r30, 0x81	; 129
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	82 e0       	ldi	r24, 0x02	; 2
    11ba:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    11bc:	80 81       	ld	r24, Z
    11be:	81 60       	ori	r24, 0x01	; 1
    11c0:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    11c2:	e0 e8       	ldi	r30, 0x80	; 128
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	81 60       	ori	r24, 0x01	; 1
    11ca:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    11cc:	e1 eb       	ldi	r30, 0xB1	; 177
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	84 60       	ori	r24, 0x04	; 4
    11d4:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    11d6:	e0 eb       	ldi	r30, 0xB0	; 176
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	81 60       	ori	r24, 0x01	; 1
    11de:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    11e0:	87 e8       	ldi	r24, 0x87	; 135
    11e2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    11e6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    11ea:	08 95       	ret

000011ec <turnOffPWM>:
turnOffPWM():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    11ec:	84 30       	cpi	r24, 0x04	; 4
    11ee:	81 f0       	breq	.+32     	; 0x1210 <turnOffPWM+0x24>
    11f0:	28 f4       	brcc	.+10     	; 0x11fc <turnOffPWM+0x10>
    11f2:	82 30       	cpi	r24, 0x02	; 2
    11f4:	e9 f0       	breq	.+58     	; 0x1230 <turnOffPWM+0x44>
    11f6:	83 30       	cpi	r24, 0x03	; 3
    11f8:	f9 f0       	breq	.+62     	; 0x1238 <turnOffPWM+0x4c>
    11fa:	08 95       	ret
    11fc:	88 30       	cpi	r24, 0x08	; 8
    11fe:	71 f0       	breq	.+28     	; 0x121c <turnOffPWM+0x30>
    1200:	89 30       	cpi	r24, 0x09	; 9
    1202:	91 f0       	breq	.+36     	; 0x1228 <turnOffPWM+0x3c>
    1204:	85 30       	cpi	r24, 0x05	; 5
    1206:	b9 f4       	brne	.+46     	; 0x1236 <turnOffPWM+0x4a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    1208:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    120c:	8f 7d       	andi	r24, 0xDF	; 223
    120e:	03 c0       	rjmp	.+6      	; 0x1216 <turnOffPWM+0x2a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    1210:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1214:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    1216:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    121a:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    121c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1220:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    1222:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
    1226:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    1228:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    122c:	8f 7d       	andi	r24, 0xDF	; 223
    122e:	f9 cf       	rjmp	.-14     	; 0x1222 <turnOffPWM+0x36>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    1230:	84 b5       	in	r24, 0x24	; 36
    1232:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    1234:	84 bd       	out	0x24, r24	; 36
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    1236:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    1238:	84 b5       	in	r24, 0x24	; 36
    123a:	8f 7d       	andi	r24, 0xDF	; 223
    123c:	fb cf       	rjmp	.-10     	; 0x1234 <turnOffPWM+0x48>

0000123e <pinMode>:
pinMode():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    123e:	cf 93       	push	r28
    1240:	df 93       	push	r29
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	fc 01       	movw	r30, r24
    1246:	e1 58       	subi	r30, 0x81	; 129
    1248:	ff 4f       	sbci	r31, 0xFF	; 255
    124a:	24 91       	lpm	r18, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    124c:	8a 56       	subi	r24, 0x6A	; 106
    124e:	9f 4f       	sbci	r25, 0xFF	; 255
    1250:	fc 01       	movw	r30, r24
    1252:	84 91       	lpm	r24, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    1254:	88 23       	and	r24, r24
    1256:	c9 f0       	breq	.+50     	; 0x128a <pinMode+0x4c>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	fc 01       	movw	r30, r24
    1260:	ef 53       	subi	r30, 0x3F	; 63
    1262:	ff 4f       	sbci	r31, 0xFF	; 255
    1264:	a5 91       	lpm	r26, Z+
    1266:	b4 91       	lpm	r27, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    1268:	fc 01       	movw	r30, r24
    126a:	e9 54       	subi	r30, 0x49	; 73
    126c:	ff 4f       	sbci	r31, 0xFF	; 255
    126e:	c5 91       	lpm	r28, Z+
    1270:	d4 91       	lpm	r29, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    1272:	61 11       	cpse	r22, r1
    1274:	0d c0       	rjmp	.+26     	; 0x1290 <pinMode+0x52>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    1276:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    1278:	f8 94       	cli
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    127a:	8c 91       	ld	r24, X
    127c:	20 95       	com	r18
    127e:	82 23       	and	r24, r18
    1280:	8c 93       	st	X, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    1282:	88 81       	ld	r24, Y
    1284:	28 23       	and	r18, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    1286:	28 83       	st	Y, r18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    1288:	9f bf       	out	0x3f, r25	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    1290:	62 30       	cpi	r22, 0x02	; 2
    1292:	51 f4       	brne	.+20     	; 0x12a8 <pinMode+0x6a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    1294:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    1296:	f8 94       	cli
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    1298:	3c 91       	ld	r19, X
    129a:	82 2f       	mov	r24, r18
    129c:	80 95       	com	r24
    129e:	83 23       	and	r24, r19
    12a0:	8c 93       	st	X, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    12a2:	e8 81       	ld	r30, Y
    12a4:	2e 2b       	or	r18, r30
    12a6:	ef cf       	rjmp	.-34     	; 0x1286 <pinMode+0x48>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    12a8:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    12aa:	f8 94       	cli
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    12ac:	ec 91       	ld	r30, X
    12ae:	2e 2b       	or	r18, r30
    12b0:	2c 93       	st	X, r18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    12b2:	8f bf       	out	0x3f, r24	; 63
    12b4:	ea cf       	rjmp	.-44     	; 0x128a <pinMode+0x4c>

000012b6 <digitalWrite>:
digitalWrite():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    12b6:	1f 93       	push	r17
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	f9 01       	movw	r30, r18
    12c2:	e8 59       	subi	r30, 0x98	; 152
    12c4:	ff 4f       	sbci	r31, 0xFF	; 255
    12c6:	84 91       	lpm	r24, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    12c8:	f9 01       	movw	r30, r18
    12ca:	e1 58       	subi	r30, 0x81	; 129
    12cc:	ff 4f       	sbci	r31, 0xFF	; 255
    12ce:	d4 91       	lpm	r29, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    12d0:	f9 01       	movw	r30, r18
    12d2:	ea 56       	subi	r30, 0x6A	; 106
    12d4:	ff 4f       	sbci	r31, 0xFF	; 255
    12d6:	c4 91       	lpm	r28, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    12d8:	cc 23       	and	r28, r28
    12da:	a9 f0       	breq	.+42     	; 0x1306 <digitalWrite+0x50>
    12dc:	16 2f       	mov	r17, r22
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    12de:	81 11       	cpse	r24, r1
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    12e0:	0e 94 f6 08 	call	0x11ec	; 0x11ec <turnOffPWM>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    12e4:	ec 2f       	mov	r30, r28
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	ee 0f       	add	r30, r30
    12ea:	ff 1f       	adc	r31, r31
    12ec:	e9 54       	subi	r30, 0x49	; 73
    12ee:	ff 4f       	sbci	r31, 0xFF	; 255
    12f0:	a5 91       	lpm	r26, Z+
    12f2:	b4 91       	lpm	r27, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    12f4:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    12f6:	f8 94       	cli
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    12f8:	ec 91       	ld	r30, X
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    12fa:	11 11       	cpse	r17, r1
    12fc:	08 c0       	rjmp	.+16     	; 0x130e <digitalWrite+0x58>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    12fe:	d0 95       	com	r29
    1300:	de 23       	and	r29, r30
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    1302:	dc 93       	st	X, r29
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    1304:	8f bf       	out	0x3f, r24	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
    1306:	df 91       	pop	r29
    1308:	cf 91       	pop	r28
    130a:	1f 91       	pop	r17
    130c:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    130e:	de 2b       	or	r29, r30
    1310:	f8 cf       	rjmp	.-16     	; 0x1302 <digitalWrite+0x4c>

00001312 <digitalRead>:
digitalRead():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    1312:	cf 93       	push	r28
    1314:	df 93       	push	r29
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	f9 01       	movw	r30, r18
    131c:	e8 59       	subi	r30, 0x98	; 152
    131e:	ff 4f       	sbci	r31, 0xFF	; 255
    1320:	84 91       	lpm	r24, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    1322:	f9 01       	movw	r30, r18
    1324:	e1 58       	subi	r30, 0x81	; 129
    1326:	ff 4f       	sbci	r31, 0xFF	; 255
    1328:	d4 91       	lpm	r29, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    132a:	f9 01       	movw	r30, r18
    132c:	ea 56       	subi	r30, 0x6A	; 106
    132e:	ff 4f       	sbci	r31, 0xFF	; 255
    1330:	c4 91       	lpm	r28, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    1332:	cc 23       	and	r28, r28
    1334:	a1 f0       	breq	.+40     	; 0x135e <digitalRead+0x4c>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1336:	81 11       	cpse	r24, r1
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    1338:	0e 94 f6 08 	call	0x11ec	; 0x11ec <turnOffPWM>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    133c:	ec 2f       	mov	r30, r28
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	ee 0f       	add	r30, r30
    1342:	ff 1f       	adc	r31, r31
    1344:	e3 55       	subi	r30, 0x53	; 83
    1346:	ff 4f       	sbci	r31, 0xFF	; 255
    1348:	a5 91       	lpm	r26, Z+
    134a:	b4 91       	lpm	r27, Z
    134c:	ec 91       	ld	r30, X
    134e:	ed 23       	and	r30, r29
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	09 f4       	brne	.+2      	; 0x1358 <digitalRead+0x46>
    1356:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    1358:	df 91       	pop	r29
    135a:	cf 91       	pop	r28
    135c:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	fa cf       	rjmp	.-12     	; 0x1358 <digitalRead+0x46>

00001364 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1364:	fc 01       	movw	r30, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1366:	91 8d       	ldd	r25, Z+25	; 0x19
    1368:	22 8d       	ldd	r18, Z+26	; 0x1a
    136a:	89 2f       	mov	r24, r25
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	80 5c       	subi	r24, 0xC0	; 192
    1370:	9f 4f       	sbci	r25, 0xFF	; 255
    1372:	82 1b       	sub	r24, r18
    1374:	91 09       	sbc	r25, r1
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:152
}
    1376:	8f 73       	andi	r24, 0x3F	; 63
    1378:	99 27       	eor	r25, r25
    137a:	08 95       	ret

0000137c <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
    137c:	fc 01       	movw	r30, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
    137e:	91 8d       	ldd	r25, Z+25	; 0x19
    1380:	82 8d       	ldd	r24, Z+26	; 0x1a
    1382:	98 17       	cp	r25, r24
    1384:	31 f0       	breq	.+12     	; 0x1392 <HardwareSerial::peek()+0x16>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1386:	82 8d       	ldd	r24, Z+26	; 0x1a
    1388:	e8 0f       	add	r30, r24
    138a:	f1 1d       	adc	r31, r1
    138c:	85 8d       	ldd	r24, Z+29	; 0x1d
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1392:	8f ef       	ldi	r24, 0xFF	; 255
    1394:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1396:	08 95       	ret

00001398 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
    1398:	fc 01       	movw	r30, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    139a:	91 8d       	ldd	r25, Z+25	; 0x19
    139c:	82 8d       	ldd	r24, Z+26	; 0x1a
    139e:	98 17       	cp	r25, r24
    13a0:	61 f0       	breq	.+24     	; 0x13ba <HardwareSerial::read()+0x22>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    13a2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    13a4:	ae 0f       	add	r26, r30
    13a6:	bf 2f       	mov	r27, r31
    13a8:	b1 1d       	adc	r27, r1
    13aa:	5d 96       	adiw	r26, 0x1d	; 29
    13ac:	8c 91       	ld	r24, X
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    13ae:	92 8d       	ldd	r25, Z+26	; 0x1a
    13b0:	9f 5f       	subi	r25, 0xFF	; 255
    13b2:	9f 73       	andi	r25, 0x3F	; 63
    13b4:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    13ba:	8f ef       	ldi	r24, 0xFF	; 255
    13bc:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    13be:	08 95       	ret

000013c0 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    13c0:	fc 01       	movw	r30, r24
    13c2:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
    13c4:	44 8d       	ldd	r20, Z+28	; 0x1c
    13c6:	25 2f       	mov	r18, r21
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	84 2f       	mov	r24, r20
    13cc:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    13ce:	82 1b       	sub	r24, r18
    13d0:	93 0b       	sbc	r25, r19
    13d2:	54 17       	cp	r21, r20
    13d4:	10 f0       	brcs	.+4      	; 0x13da <HardwareSerial::availableForWrite()+0x1a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
    13d6:	cf 96       	adiw	r24, 0x3f	; 63
    13d8:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
    13da:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:188
}
    13dc:	08 95       	ret

000013de <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    13de:	85 e3       	ldi	r24, 0x35	; 53
    13e0:	9b e0       	ldi	r25, 0x0B	; 11
    13e2:	89 2b       	or	r24, r25
    13e4:	49 f0       	breq	.+18     	; 0x13f8 <serialEventRun()+0x1a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	89 2b       	or	r24, r25
    13ec:	29 f0       	breq	.+10     	; 0x13f8 <serialEventRun()+0x1a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
    13ee:	0e 94 35 0b 	call	0x166a	; 0x166a <Serial0_available()>
    13f2:	81 11       	cpse	r24, r1
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
    13f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    13f8:	08 95       	ret

000013fa <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    13fa:	fc 01       	movw	r30, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    13fc:	a4 8d       	ldd	r26, Z+28	; 0x1c
    13fe:	a8 0f       	add	r26, r24
    1400:	b9 2f       	mov	r27, r25
    1402:	b1 1d       	adc	r27, r1
    1404:	a3 5a       	subi	r26, 0xA3	; 163
    1406:	bf 4f       	sbci	r27, 0xFF	; 255
    1408:	2c 91       	ld	r18, X
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    140a:	84 8d       	ldd	r24, Z+28	; 0x1c
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	01 96       	adiw	r24, 0x01	; 1
    1410:	8f 73       	andi	r24, 0x3F	; 63
    1412:	99 27       	eor	r25, r25
    1414:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
    1416:	a6 89       	ldd	r26, Z+22	; 0x16
    1418:	b7 89       	ldd	r27, Z+23	; 0x17
    141a:	2c 93       	st	X, r18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
    141c:	a0 89       	ldd	r26, Z+16	; 0x10
    141e:	b1 89       	ldd	r27, Z+17	; 0x11
    1420:	8c 91       	ld	r24, X
    1422:	80 64       	ori	r24, 0x40	; 64
    1424:	8c 93       	st	X, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
    1426:	93 8d       	ldd	r25, Z+27	; 0x1b
    1428:	84 8d       	ldd	r24, Z+28	; 0x1c
    142a:	98 13       	cpse	r25, r24
    142c:	06 c0       	rjmp	.+12     	; 0x143a <HardwareSerial::_tx_udr_empty_irq()+0x40>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    142e:	02 88       	ldd	r0, Z+18	; 0x12
    1430:	f3 89       	ldd	r31, Z+19	; 0x13
    1432:	e0 2d       	mov	r30, r0
    1434:	80 81       	ld	r24, Z
    1436:	8f 7d       	andi	r24, 0xDF	; 223
    1438:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
    143a:	08 95       	ret

0000143c <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    143c:	cf 93       	push	r28
    143e:	df 93       	push	r29
    1440:	ec 01       	movw	r28, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1442:	88 8d       	ldd	r24, Y+24	; 0x18
    1444:	88 23       	and	r24, r24
    1446:	b9 f0       	breq	.+46     	; 0x1476 <HardwareSerial::flush()+0x3a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1448:	aa 89       	ldd	r26, Y+18	; 0x12
    144a:	bb 89       	ldd	r27, Y+19	; 0x13
    144c:	e8 89       	ldd	r30, Y+16	; 0x10
    144e:	f9 89       	ldd	r31, Y+17	; 0x11
    1450:	8c 91       	ld	r24, X
    1452:	85 fd       	sbrc	r24, 5
    1454:	03 c0       	rjmp	.+6      	; 0x145c <HardwareSerial::flush()+0x20>
    1456:	80 81       	ld	r24, Z
    1458:	86 fd       	sbrc	r24, 6
    145a:	0d c0       	rjmp	.+26     	; 0x1476 <HardwareSerial::flush()+0x3a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    145c:	0f b6       	in	r0, 0x3f	; 63
    145e:	07 fc       	sbrc	r0, 7
    1460:	f7 cf       	rjmp	.-18     	; 0x1450 <HardwareSerial::flush()+0x14>
    1462:	8c 91       	ld	r24, X
    1464:	85 ff       	sbrs	r24, 5
    1466:	f2 cf       	rjmp	.-28     	; 0x144c <HardwareSerial::flush()+0x10>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    1468:	80 81       	ld	r24, Z
    146a:	85 ff       	sbrs	r24, 5
    146c:	ed cf       	rjmp	.-38     	; 0x1448 <HardwareSerial::flush()+0xc>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
    146e:	ce 01       	movw	r24, r28
    1470:	0e 94 fd 09 	call	0x13fa	; 0x13fa <HardwareSerial::_tx_udr_empty_irq()>
    1474:	e9 cf       	rjmp	.-46     	; 0x1448 <HardwareSerial::flush()+0xc>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1476:	df 91       	pop	r29
    1478:	cf 91       	pop	r28
    147a:	08 95       	ret

0000147c <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
    147c:	ef 92       	push	r14
    147e:	ff 92       	push	r15
    1480:	0f 93       	push	r16
    1482:	1f 93       	push	r17
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	ec 01       	movw	r28, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    148e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1490:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1492:	98 13       	cpse	r25, r24
    1494:	16 c0       	rjmp	.+44     	; 0x14c2 <HardwareSerial::write(unsigned char)+0x46>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
    1496:	e8 89       	ldd	r30, Y+16	; 0x10
    1498:	f9 89       	ldd	r31, Y+17	; 0x11
    149a:	80 81       	ld	r24, Z
    149c:	85 ff       	sbrs	r24, 5
    149e:	11 c0       	rjmp	.+34     	; 0x14c2 <HardwareSerial::write(unsigned char)+0x46>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
    14a0:	ee 89       	ldd	r30, Y+22	; 0x16
    14a2:	ff 89       	ldd	r31, Y+23	; 0x17
    14a4:	60 83       	st	Z, r22
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
    14a6:	e8 89       	ldd	r30, Y+16	; 0x10
    14a8:	f9 89       	ldd	r31, Y+17	; 0x11
    14aa:	80 81       	ld	r24, Z
    14ac:	80 64       	ori	r24, 0x40	; 64
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
    14ae:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	df 91       	pop	r29
    14b6:	cf 91       	pop	r28
    14b8:	1f 91       	pop	r17
    14ba:	0f 91       	pop	r16
    14bc:	ff 90       	pop	r15
    14be:	ef 90       	pop	r14
    14c0:	08 95       	ret
    14c2:	f6 2e       	mov	r15, r22
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    14c4:	0b 8d       	ldd	r16, Y+27	; 0x1b
    14c6:	10 e0       	ldi	r17, 0x00	; 0
    14c8:	0f 5f       	subi	r16, 0xFF	; 255
    14ca:	1f 4f       	sbci	r17, 0xFF	; 255
    14cc:	0f 73       	andi	r16, 0x3F	; 63
    14ce:	11 27       	eor	r17, r17
    14d0:	e0 2e       	mov	r14, r16
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    14d2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    14d4:	8e 11       	cpse	r24, r14
    14d6:	0c c0       	rjmp	.+24     	; 0x14f0 <HardwareSerial::write(unsigned char)+0x74>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	07 fc       	sbrc	r0, 7
    14dc:	fa cf       	rjmp	.-12     	; 0x14d2 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    14de:	e8 89       	ldd	r30, Y+16	; 0x10
    14e0:	f9 89       	ldd	r31, Y+17	; 0x11
    14e2:	80 81       	ld	r24, Z
    14e4:	85 ff       	sbrs	r24, 5
    14e6:	f5 cf       	rjmp	.-22     	; 0x14d2 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
    14e8:	ce 01       	movw	r24, r28
    14ea:	0e 94 fd 09 	call	0x13fa	; 0x13fa <HardwareSerial::_tx_udr_empty_irq()>
    14ee:	f1 cf       	rjmp	.-30     	; 0x14d2 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    14f0:	eb 8d       	ldd	r30, Y+27	; 0x1b
    14f2:	ec 0f       	add	r30, r28
    14f4:	fd 2f       	mov	r31, r29
    14f6:	f1 1d       	adc	r31, r1
    14f8:	e3 5a       	subi	r30, 0xA3	; 163
    14fa:	ff 4f       	sbci	r31, 0xFF	; 255
    14fc:	f0 82       	st	Z, r15
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
    14fe:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
    1500:	ea 89       	ldd	r30, Y+18	; 0x12
    1502:	fb 89       	ldd	r31, Y+19	; 0x13
    1504:	80 81       	ld	r24, Z
    1506:	80 62       	ori	r24, 0x20	; 32
    1508:	d2 cf       	rjmp	.-92     	; 0x14ae <HardwareSerial::write(unsigned char)+0x32>

0000150a <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:104
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    150a:	cf 92       	push	r12
    150c:	df 92       	push	r13
    150e:	ef 92       	push	r14
    1510:	ff 92       	push	r15
    1512:	1f 93       	push	r17
    1514:	cf 93       	push	r28
    1516:	df 93       	push	r29
    1518:	ec 01       	movw	r28, r24
    151a:	6a 01       	movw	r12, r20
    151c:	7b 01       	movw	r14, r22
    151e:	12 2f       	mov	r17, r18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:107
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1520:	e8 89       	ldd	r30, Y+16	; 0x10
    1522:	f9 89       	ldd	r31, Y+17	; 0x11
    1524:	82 e0       	ldi	r24, 0x02	; 2
    1526:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1528:	c1 14       	cp	r12, r1
    152a:	81 ee       	ldi	r24, 0xE1	; 225
    152c:	d8 06       	cpc	r13, r24
    152e:	e1 04       	cpc	r14, r1
    1530:	f1 04       	cpc	r15, r1
    1532:	a1 f0       	breq	.+40     	; 0x155c <HardwareSerial::begin(unsigned long, unsigned char)+0x52>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:106 (discriminator 1)
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1534:	60 e0       	ldi	r22, 0x00	; 0
    1536:	79 e0       	ldi	r23, 0x09	; 9
    1538:	8d e3       	ldi	r24, 0x3D	; 61
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	a7 01       	movw	r20, r14
    153e:	96 01       	movw	r18, r12
    1540:	0e 94 af 0b 	call	0x175e	; 0x175e <__udivmodsi4>
    1544:	21 50       	subi	r18, 0x01	; 1
    1546:	31 09       	sbc	r19, r1
    1548:	41 09       	sbc	r20, r1
    154a:	51 09       	sbc	r21, r1
    154c:	56 95       	lsr	r21
    154e:	47 95       	ror	r20
    1550:	37 95       	ror	r19
    1552:	27 95       	ror	r18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114 (discriminator 1)
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1554:	21 15       	cp	r18, r1
    1556:	80 e1       	ldi	r24, 0x10	; 16
    1558:	38 07       	cpc	r19, r24
    155a:	98 f0       	brcs	.+38     	; 0x1582 <HardwareSerial::begin(unsigned long, unsigned char)+0x78>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:116
  {
    *_ucsra = 0;
    155c:	e8 89       	ldd	r30, Y+16	; 0x10
    155e:	f9 89       	ldd	r31, Y+17	; 0x11
    1560:	10 82       	st	Z, r1
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:117
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1562:	60 e8       	ldi	r22, 0x80	; 128
    1564:	74 e8       	ldi	r23, 0x84	; 132
    1566:	8e e1       	ldi	r24, 0x1E	; 30
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	a7 01       	movw	r20, r14
    156c:	96 01       	movw	r18, r12
    156e:	0e 94 af 0b 	call	0x175e	; 0x175e <__udivmodsi4>
    1572:	21 50       	subi	r18, 0x01	; 1
    1574:	31 09       	sbc	r19, r1
    1576:	41 09       	sbc	r20, r1
    1578:	51 09       	sbc	r21, r1
    157a:	56 95       	lsr	r21
    157c:	47 95       	ror	r20
    157e:	37 95       	ror	r19
    1580:	27 95       	ror	r18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1582:	ec 85       	ldd	r30, Y+12	; 0x0c
    1584:	fd 85       	ldd	r31, Y+13	; 0x0d
    1586:	30 83       	st	Z, r19
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
    1588:	ee 85       	ldd	r30, Y+14	; 0x0e
    158a:	ff 85       	ldd	r31, Y+15	; 0x0f
    158c:	20 83       	st	Z, r18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:124

  _written = false;
    158e:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:132
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1590:	ec 89       	ldd	r30, Y+20	; 0x14
    1592:	fd 89       	ldd	r31, Y+21	; 0x15
    1594:	10 83       	st	Z, r17
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:134
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    1596:	ea 89       	ldd	r30, Y+18	; 0x12
    1598:	fb 89       	ldd	r31, Y+19	; 0x13
    159a:	80 81       	ld	r24, Z
    159c:	88 69       	ori	r24, 0x98	; 152
    159e:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  *_ucsrb &= ~_BV(UDRIE0);
    15a0:	ea 89       	ldd	r30, Y+18	; 0x12
    15a2:	fb 89       	ldd	r31, Y+19	; 0x13
    15a4:	80 81       	ld	r24, Z
    15a6:	8f 7d       	andi	r24, 0xDF	; 223
    15a8:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:136
}
    15aa:	df 91       	pop	r29
    15ac:	cf 91       	pop	r28
    15ae:	1f 91       	pop	r17
    15b0:	ff 90       	pop	r15
    15b2:	ef 90       	pop	r14
    15b4:	df 90       	pop	r13
    15b6:	cf 90       	pop	r12
    15b8:	08 95       	ret

000015ba <__vector_18>:
__vector_18():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    15ba:	1f 92       	push	r1
    15bc:	0f 92       	push	r0
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	0f 92       	push	r0
    15c2:	11 24       	eor	r1, r1
    15c4:	2f 93       	push	r18
    15c6:	8f 93       	push	r24
    15c8:	9f 93       	push	r25
    15ca:	ef 93       	push	r30
    15cc:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    15ce:	e0 91 db 01 	lds	r30, 0x01DB	; 0x8001db <Serial+0x10>
    15d2:	f0 91 dc 01 	lds	r31, 0x01DC	; 0x8001dc <Serial+0x11>
    15d6:	80 81       	ld	r24, Z
    15d8:	e0 91 e1 01 	lds	r30, 0x01E1	; 0x8001e1 <Serial+0x16>
    15dc:	f0 91 e2 01 	lds	r31, 0x01E2	; 0x8001e2 <Serial+0x17>
    15e0:	82 fd       	sbrc	r24, 2
    15e2:	1b c0       	rjmp	.+54     	; 0x161a <__vector_18+0x60>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    15e4:	90 81       	ld	r25, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    15e6:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <Serial+0x19>
    15ea:	8f 5f       	subi	r24, 0xFF	; 255
    15ec:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    15ee:	20 91 e5 01 	lds	r18, 0x01E5	; 0x8001e5 <Serial+0x1a>
    15f2:	82 17       	cp	r24, r18
    15f4:	41 f0       	breq	.+16     	; 0x1606 <__vector_18+0x4c>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
    15f6:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <Serial+0x19>
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	e5 53       	subi	r30, 0x35	; 53
    15fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1600:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
    1602:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <Serial+0x19>
__vector_18():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    1606:	ff 91       	pop	r31
    1608:	ef 91       	pop	r30
    160a:	9f 91       	pop	r25
    160c:	8f 91       	pop	r24
    160e:	2f 91       	pop	r18
    1610:	0f 90       	pop	r0
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	0f 90       	pop	r0
    1616:	1f 90       	pop	r1
    1618:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    161a:	80 81       	ld	r24, Z
__vector_18():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    161c:	f4 cf       	rjmp	.-24     	; 0x1606 <__vector_18+0x4c>

0000161e <__vector_19>:
__vector_19():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    161e:	1f 92       	push	r1
    1620:	0f 92       	push	r0
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	0f 92       	push	r0
    1626:	11 24       	eor	r1, r1
    1628:	2f 93       	push	r18
    162a:	3f 93       	push	r19
    162c:	4f 93       	push	r20
    162e:	5f 93       	push	r21
    1630:	6f 93       	push	r22
    1632:	7f 93       	push	r23
    1634:	8f 93       	push	r24
    1636:	9f 93       	push	r25
    1638:	af 93       	push	r26
    163a:	bf 93       	push	r27
    163c:	ef 93       	push	r30
    163e:	ff 93       	push	r31
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    1640:	8b ec       	ldi	r24, 0xCB	; 203
    1642:	91 e0       	ldi	r25, 0x01	; 1
    1644:	0e 94 fd 09 	call	0x13fa	; 0x13fa <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    1648:	ff 91       	pop	r31
    164a:	ef 91       	pop	r30
    164c:	bf 91       	pop	r27
    164e:	af 91       	pop	r26
    1650:	9f 91       	pop	r25
    1652:	8f 91       	pop	r24
    1654:	7f 91       	pop	r23
    1656:	6f 91       	pop	r22
    1658:	5f 91       	pop	r21
    165a:	4f 91       	pop	r20
    165c:	3f 91       	pop	r19
    165e:	2f 91       	pop	r18
    1660:	0f 90       	pop	r0
    1662:	0f be       	out	0x3f, r0	; 63
    1664:	0f 90       	pop	r0
    1666:	1f 90       	pop	r1
    1668:	18 95       	reti

0000166a <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    166a:	8b ec       	ldi	r24, 0xCB	; 203
    166c:	91 e0       	ldi	r25, 0x01	; 1
    166e:	0e 94 b2 09 	call	0x1364	; 0x1364 <HardwareSerial::available()>
    1672:	21 e0       	ldi	r18, 0x01	; 1
    1674:	89 2b       	or	r24, r25
    1676:	09 f4       	brne	.+2      	; 0x167a <Serial0_available()+0x10>
    1678:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
    167a:	82 2f       	mov	r24, r18
    167c:	08 95       	ret

0000167e <_GLOBAL__sub_I___vector_18>:
_ZN5PrintC4Ev():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    167e:	eb ec       	ldi	r30, 0xCB	; 203
    1680:	f1 e0       	ldi	r31, 0x01	; 1
    1682:	13 82       	std	Z+3, r1	; 0x03
    1684:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1686:	88 ee       	ldi	r24, 0xE8	; 232
    1688:	93 e0       	ldi	r25, 0x03	; 3
    168a:	a0 e0       	ldi	r26, 0x00	; 0
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	84 83       	std	Z+4, r24	; 0x04
    1690:	95 83       	std	Z+5, r25	; 0x05
    1692:	a6 83       	std	Z+6, r26	; 0x06
    1694:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1696:	80 e2       	ldi	r24, 0x20	; 32
    1698:	91 e0       	ldi	r25, 0x01	; 1
    169a:	91 83       	std	Z+1, r25	; 0x01
    169c:	80 83       	st	Z, r24
    169e:	85 ec       	ldi	r24, 0xC5	; 197
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	95 87       	std	Z+13, r25	; 0x0d
    16a4:	84 87       	std	Z+12, r24	; 0x0c
    16a6:	84 ec       	ldi	r24, 0xC4	; 196
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	97 87       	std	Z+15, r25	; 0x0f
    16ac:	86 87       	std	Z+14, r24	; 0x0e
    16ae:	80 ec       	ldi	r24, 0xC0	; 192
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	91 8b       	std	Z+17, r25	; 0x11
    16b4:	80 8b       	std	Z+16, r24	; 0x10
    16b6:	81 ec       	ldi	r24, 0xC1	; 193
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	93 8b       	std	Z+19, r25	; 0x13
    16bc:	82 8b       	std	Z+18, r24	; 0x12
    16be:	82 ec       	ldi	r24, 0xC2	; 194
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	95 8b       	std	Z+21, r25	; 0x15
    16c4:	84 8b       	std	Z+20, r24	; 0x14
    16c6:	86 ec       	ldi	r24, 0xC6	; 198
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	97 8b       	std	Z+23, r25	; 0x17
    16cc:	86 8b       	std	Z+22, r24	; 0x16
    16ce:	11 8e       	std	Z+25, r1	; 0x19
    16d0:	12 8e       	std	Z+26, r1	; 0x1a
    16d2:	13 8e       	std	Z+27, r1	; 0x1b
    16d4:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_18():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
    16d6:	08 95       	ret

000016d8 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    16d8:	af 92       	push	r10
    16da:	bf 92       	push	r11
    16dc:	cf 92       	push	r12
    16de:	df 92       	push	r13
    16e0:	ef 92       	push	r14
    16e2:	ff 92       	push	r15
    16e4:	0f 93       	push	r16
    16e6:	1f 93       	push	r17
    16e8:	cf 93       	push	r28
    16ea:	df 93       	push	r29
    16ec:	6c 01       	movw	r12, r24
    16ee:	7b 01       	movw	r14, r22
    16f0:	8b 01       	movw	r16, r22
    16f2:	04 0f       	add	r16, r20
    16f4:	15 1f       	adc	r17, r21
    16f6:	eb 01       	movw	r28, r22
    16f8:	5e 01       	movw	r10, r28
    16fa:	ae 18       	sub	r10, r14
    16fc:	bf 08       	sbc	r11, r15
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
    16fe:	c0 17       	cp	r28, r16
    1700:	d1 07       	cpc	r29, r17
    1702:	59 f0       	breq	.+22     	; 0x171a <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
    1704:	69 91       	ld	r22, Y+
    1706:	d6 01       	movw	r26, r12
    1708:	ed 91       	ld	r30, X+
    170a:	fc 91       	ld	r31, X
    170c:	01 90       	ld	r0, Z+
    170e:	f0 81       	ld	r31, Z
    1710:	e0 2d       	mov	r30, r0
    1712:	c6 01       	movw	r24, r12
    1714:	09 95       	icall
    1716:	89 2b       	or	r24, r25
    1718:	79 f7       	brne	.-34     	; 0x16f8 <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
    171a:	c5 01       	movw	r24, r10
    171c:	df 91       	pop	r29
    171e:	cf 91       	pop	r28
    1720:	1f 91       	pop	r17
    1722:	0f 91       	pop	r16
    1724:	ff 90       	pop	r15
    1726:	ef 90       	pop	r14
    1728:	df 90       	pop	r13
    172a:	cf 90       	pop	r12
    172c:	bf 90       	pop	r11
    172e:	af 90       	pop	r10
    1730:	08 95       	ret

00001732 <makeWord(unsigned char, unsigned char)>:
_Z8makeWordhh():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:58
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

unsigned int makeWord(unsigned int w) { return w; }
unsigned int makeWord(unsigned char h, unsigned char l) { return (h << 8) | l; }
    1732:	98 2f       	mov	r25, r24
    1734:	86 2f       	mov	r24, r22
    1736:	08 95       	ret

00001738 <__cxa_pure_virtual>:
__cxa_pure_virtual():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/abi.cpp:27
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    1738:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <abort>

0000173c <initVariant>:
initVariant():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    173c:	08 95       	ret

0000173e <main>:
main():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    173e:	0e 94 ce 08 	call	0x119c	; 0x119c <init>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    1742:	0e 94 9e 0b 	call	0x173c	; 0x173c <initVariant>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    1746:	0e 94 4b 05 	call	0xa96	; 0xa96 <setup>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    174a:	cf ee       	ldi	r28, 0xEF	; 239
    174c:	d9 e0       	ldi	r29, 0x09	; 9
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    174e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <loop>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    1752:	20 97       	sbiw	r28, 0x00	; 0
    1754:	e1 f3       	breq	.-8      	; 0x174e <main+0x10>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    1756:	0e 94 ef 09 	call	0x13de	; 0x13de <serialEventRun()>
    175a:	f9 cf       	rjmp	.-14     	; 0x174e <main+0x10>

0000175c <yield>:
__empty():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    175c:	08 95       	ret

0000175e <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    175e:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1760:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    1762:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    1764:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    1766:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    1768:	0d c0       	rjmp	.+26     	; 0x1784 <__udivmodsi4_ep>

0000176a <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    176a:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    176c:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    176e:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1770:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1772:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    1774:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    1776:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    1778:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    177a:	20 f0       	brcs	.+8      	; 0x1784 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    177c:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    177e:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1780:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1782:	f5 0b       	sbc	r31, r21

00001784 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1784:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    1786:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    1788:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    178a:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    178c:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    178e:	69 f7       	brne	.-38     	; 0x176a <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1790:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1792:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1794:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    1796:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    1798:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    179a:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    179c:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    179e:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    17a0:	08 95       	ret

000017a2 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    17a2:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    17a4:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    17a6:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    17a8:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    17aa:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    17ac:	09 94       	ijmp

000017ae <abort>:
abort():
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	f8 94       	cli
    17b4:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <_exit>

000017b8 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    17b8:	f8 94       	cli

000017ba <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    17ba:	ff cf       	rjmp	.-2      	; 0x17ba <__stop_program>
