
C:\Users\Jacek\AppData\Local\Temp\arduino_build_398545/roller_shutter_2023_v2.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__ctors_end>
       4:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       8:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      10:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      14:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      18:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      1c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      20:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      24:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      28:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      2c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      30:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      34:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      38:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      3c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      40:	0c 94 72 0c 	jmp	0x18e4	; 0x18e4 <__vector_16>
      44:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      48:	0c 94 40 0f 	jmp	0x1e80	; 0x1e80 <__vector_18>
      4c:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__vector_19>
      50:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      54:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      58:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      5c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      60:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      64:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	00 00       	nop
      6a:	00 09       	sbc	r16, r0
      6c:	00 03       	mulsu	r16, r16
      6e:	02 00       	.word	0x0002	; ????
      70:	00 04       	cpc	r0, r0
      72:	05 08       	sbc	r0, r5
	...

0000007f <digital_pin_to_bit_mask_PGM>:
      7f:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8f:	04 08 10 20 40 80 40                                ... @.@

00000096 <digital_pin_to_port_PGM>:
      96:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a6:	03 03 03 03 02 02 03                                .......

000000ad <port_to_input_PGM>:
      ad:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000b7 <port_to_output_PGM>:
      b7:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000c1 <port_to_mode_PGM>:
      c1:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000cc <__ctors_start>:
__ctors_start():
      cc:	9b 04       	cpc	r9, r11
      ce:	a2 0f       	add	r26, r18

000000d0 <__ctors_end>:
__dtors_end():
      d0:	11 24       	eor	r1, r1
      d2:	1f be       	out	0x3f, r1	; 63
      d4:	cf ef       	ldi	r28, 0xFF	; 255
      d6:	d8 e0       	ldi	r29, 0x08	; 8
      d8:	de bf       	out	0x3e, r29	; 62
      da:	cd bf       	out	0x3d, r28	; 61

000000dc <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      dc:	13 e0       	ldi	r17, 0x03	; 3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      de:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      e0:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      e2:	ee ea       	ldi	r30, 0xAE	; 174
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      e4:	f4 e2       	ldi	r31, 0x24	; 36
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      e8:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      ea:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      ec:	aa 33       	cpi	r26, 0x3A	; 58
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      ee:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0xc>

000000f2 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      f2:	24 e0       	ldi	r18, 0x04	; 4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      f4:	aa e3       	ldi	r26, 0x3A	; 58
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      f6:	b3 e0       	ldi	r27, 0x03	; 3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      fc:	a5 34       	cpi	r26, 0x45	; 69
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      fe:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>

00000102 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     102:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     104:	c8 e6       	ldi	r28, 0x68	; 104
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     106:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     108:	04 c0       	rjmp	.+8      	; 0x112 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     10a:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     10c:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     10e:	0e 94 00 11 	call	0x2200	; 0x2200 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     112:	c6 36       	cpi	r28, 0x66	; 102
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     114:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     116:	c9 f7       	brne	.-14     	; 0x10a <__do_global_ctors+0x8>
     118:	0e 94 ce 10 	call	0x219c	; 0x219c <main>
     11c:	0c 94 55 12 	jmp	0x24aa	; 0x24aa <_exit>

00000120 <__bad_interrupt>:
__vector_22():
     120:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000124 <setup>:
setup():
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:73
*/
unsigned long currentWorkTime = 0;

void setup() {

    pinMode(7, INPUT);
     124:	60 e0       	ldi	r22, 0x00	; 0
     126:	87 e0       	ldi	r24, 0x07	; 7
     128:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <pinMode>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:74
    pinMode(8, INPUT);
     12c:	60 e0       	ldi	r22, 0x00	; 0
     12e:	88 e0       	ldi	r24, 0x08	; 8
     130:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <pinMode>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:75
    pinMode(9, INPUT);
     134:	60 e0       	ldi	r22, 0x00	; 0
     136:	89 e0       	ldi	r24, 0x09	; 9
     138:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <pinMode>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:76
    pinMode(10, INPUT);
     13c:	60 e0       	ldi	r22, 0x00	; 0
     13e:	8a e0       	ldi	r24, 0x0A	; 10
     140:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <pinMode>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:78

    digitalWrite(7, LOW);
     144:	60 e0       	ldi	r22, 0x00	; 0
     146:	87 e0       	ldi	r24, 0x07	; 7
     148:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <digitalWrite>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:79
    digitalWrite(8, LOW);
     14c:	60 e0       	ldi	r22, 0x00	; 0
     14e:	88 e0       	ldi	r24, 0x08	; 8
     150:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <digitalWrite>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:80
    digitalWrite(9, LOW);
     154:	60 e0       	ldi	r22, 0x00	; 0
     156:	89 e0       	ldi	r24, 0x09	; 9
     158:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <digitalWrite>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:81
    digitalWrite(10, LOW);
     15c:	60 e0       	ldi	r22, 0x00	; 0
     15e:	8a e0       	ldi	r24, 0x0A	; 10
     160:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <digitalWrite>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:84


    pinMode(UP_RELAY, OUTPUT);
     164:	61 e0       	ldi	r22, 0x01	; 1
     166:	8e e0       	ldi	r24, 0x0E	; 14
     168:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <pinMode>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:85
    pinMode(DOWN_RELAY, OUTPUT);
     16c:	61 e0       	ldi	r22, 0x01	; 1
     16e:	8f e0       	ldi	r24, 0x0F	; 15
     170:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <pinMode>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:87

    digitalWrite(UP_RELAY, LOW);
     174:	60 e0       	ldi	r22, 0x00	; 0
     176:	8e e0       	ldi	r24, 0x0E	; 14
     178:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <digitalWrite>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:88
    digitalWrite(DOWN_RELAY, LOW);
     17c:	60 e0       	ldi	r22, 0x00	; 0
     17e:	8f e0       	ldi	r24, 0x0F	; 15
     180:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <digitalWrite>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:90

    bitWrite(address, 0, digitalRead(10));
     184:	8a e0       	ldi	r24, 0x0A	; 10
     186:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <digitalRead>
     18a:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <address>
     18e:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <address+0x1>
     192:	89 2b       	or	r24, r25
     194:	09 f4       	brne	.+2      	; 0x198 <setup+0x74>
     196:	ad c0       	rjmp	.+346    	; 0x2f2 <setup+0x1ce>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:90 (discriminator 1)
     198:	21 60       	ori	r18, 0x01	; 1
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:90 (discriminator 2)
     19a:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <address+0x1>
     19e:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <address>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:91 (discriminator 2)
    bitWrite(address, 1, digitalRead(9));
     1a2:	89 e0       	ldi	r24, 0x09	; 9
     1a4:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <digitalRead>
     1a8:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <address>
     1ac:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <address+0x1>
     1b0:	89 2b       	or	r24, r25
     1b2:	09 f4       	brne	.+2      	; 0x1b6 <setup+0x92>
     1b4:	a0 c0       	rjmp	.+320    	; 0x2f6 <setup+0x1d2>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:91 (discriminator 1)
     1b6:	22 60       	ori	r18, 0x02	; 2
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:91 (discriminator 2)
     1b8:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <address+0x1>
     1bc:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <address>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:92 (discriminator 2)
    bitWrite(address, 2, digitalRead(8));
     1c0:	88 e0       	ldi	r24, 0x08	; 8
     1c2:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <digitalRead>
     1c6:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <address>
     1ca:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <address+0x1>
     1ce:	89 2b       	or	r24, r25
     1d0:	09 f4       	brne	.+2      	; 0x1d4 <setup+0xb0>
     1d2:	93 c0       	rjmp	.+294    	; 0x2fa <setup+0x1d6>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:92 (discriminator 1)
     1d4:	24 60       	ori	r18, 0x04	; 4
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:92 (discriminator 2)
     1d6:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <address+0x1>
     1da:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <address>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:93 (discriminator 2)
    bitWrite(address, 3, digitalRead(7));
     1de:	87 e0       	ldi	r24, 0x07	; 7
     1e0:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <digitalRead>
     1e4:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <address>
     1e8:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <address+0x1>
     1ec:	89 2b       	or	r24, r25
     1ee:	09 f4       	brne	.+2      	; 0x1f2 <setup+0xce>
     1f0:	86 c0       	rjmp	.+268    	; 0x2fe <setup+0x1da>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:93 (discriminator 1)
     1f2:	28 60       	ori	r18, 0x08	; 8
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:93 (discriminator 2)
     1f4:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <address+0x1>
     1f8:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <address>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:95 (discriminator 2)

    address += 50;
     1fc:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <address>
     200:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <address+0x1>
     204:	6e 5c       	subi	r22, 0xCE	; 206
     206:	7f 4f       	sbci	r23, 0xFF	; 255
     208:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <address+0x1>
     20c:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <address>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:97 (discriminator 2)

    slave.setSlaveId(address);
     210:	8a e7       	ldi	r24, 0x7A	; 122
     212:	93 e0       	ldi	r25, 0x03	; 3
     214:	0e 94 06 05 	call	0xa0c	; 0xa0c <ModbusSerial::setSlaveId(unsigned char)>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:99 (discriminator 2)

    upButton.attach(A2, INPUT);
     218:	50 e0       	ldi	r21, 0x00	; 0
     21a:	40 e0       	ldi	r20, 0x00	; 0
     21c:	60 e1       	ldi	r22, 0x10	; 16
     21e:	70 e0       	ldi	r23, 0x00	; 0
     220:	88 e6       	ldi	r24, 0x68	; 104
     222:	93 e0       	ldi	r25, 0x03	; 3
     224:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <Bounce::attach(int, int)>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:100 (discriminator 2)
    upButton.interval(25);
     228:	69 e1       	ldi	r22, 0x19	; 25
     22a:	70 e0       	ldi	r23, 0x00	; 0
     22c:	88 e6       	ldi	r24, 0x68	; 104
     22e:	93 e0       	ldi	r25, 0x03	; 3
     230:	0e 94 ca 0b 	call	0x1794	; 0x1794 <Debouncer::interval(unsigned int)>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:101 (discriminator 2)
    downButton.attach(A3, INPUT);
     234:	50 e0       	ldi	r21, 0x00	; 0
     236:	40 e0       	ldi	r20, 0x00	; 0
     238:	61 e1       	ldi	r22, 0x11	; 17
     23a:	70 e0       	ldi	r23, 0x00	; 0
     23c:	86 e5       	ldi	r24, 0x56	; 86
     23e:	93 e0       	ldi	r25, 0x03	; 3
     240:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <Bounce::attach(int, int)>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:102 (discriminator 2)
    downButton.interval(25);
     244:	69 e1       	ldi	r22, 0x19	; 25
     246:	70 e0       	ldi	r23, 0x00	; 0
     248:	86 e5       	ldi	r24, 0x56	; 86
     24a:	93 e0       	ldi	r25, 0x03	; 3
     24c:	0e 94 ca 0b 	call	0x1794	; 0x1794 <Debouncer::interval(unsigned int)>
_ZN14HardwareSerial5beginEm():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.h:121 (discriminator 2)
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     250:	26 e0       	ldi	r18, 0x06	; 6
     252:	40 e8       	ldi	r20, 0x80	; 128
     254:	55 e2       	ldi	r21, 0x25	; 37
     256:	60 e0       	ldi	r22, 0x00	; 0
     258:	70 e0       	ldi	r23, 0x00	; 0
     25a:	84 ea       	ldi	r24, 0xA4	; 164
     25c:	93 e0       	ldi	r25, 0x03	; 3
     25e:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <HardwareSerial::begin(unsigned long, unsigned char)>
setup():
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:108 (discriminator 2)

    Serial.begin(9600);
    while (! Serial)
    ;

    Serial.print("Address: ");
     262:	6c e0       	ldi	r22, 0x0C	; 12
     264:	71 e0       	ldi	r23, 0x01	; 1
     266:	84 ea       	ldi	r24, 0xA4	; 164
     268:	93 e0       	ldi	r25, 0x03	; 3
     26a:	0e 94 0b 10 	call	0x2016	; 0x2016 <Print::print(char const*)>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:109 (discriminator 2)
    Serial.println(address);
     26e:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <address>
     272:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <address+0x1>
     276:	4a e0       	ldi	r20, 0x0A	; 10
     278:	50 e0       	ldi	r21, 0x00	; 0
     27a:	84 ea       	ldi	r24, 0xA4	; 164
     27c:	93 e0       	ldi	r25, 0x03	; 3
     27e:	0e 94 b9 10 	call	0x2172	; 0x2172 <Print::println(int, int)>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:111 (discriminator 2)

    slave.config(9600);
     282:	40 e8       	ldi	r20, 0x80	; 128
     284:	55 e2       	ldi	r21, 0x25	; 37
     286:	60 e0       	ldi	r22, 0x00	; 0
     288:	70 e0       	ldi	r23, 0x00	; 0
     28a:	8a e7       	ldi	r24, 0x7A	; 122
     28c:	93 e0       	ldi	r25, 0x03	; 3
     28e:	0e 94 c7 04 	call	0x98e	; 0x98e <ModbusSerial::config(unsigned long)>
_ZN6Modbus7addHregEjj():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.h:121 (discriminator 2)
      @brief Add a holding register to the list
      @param offset register offset (PDU addressing: 0-9999)
      @param value default value
    */
    inline void addHreg (word offset, word value = 0) {
      this->addReg (offset + TRegister::HregOffset, value);
     292:	50 e0       	ldi	r21, 0x00	; 0
     294:	40 e0       	ldi	r20, 0x00	; 0
     296:	61 e4       	ldi	r22, 0x41	; 65
     298:	7c e9       	ldi	r23, 0x9C	; 156
     29a:	8a e7       	ldi	r24, 0x7A	; 122
     29c:	93 e0       	ldi	r25, 0x03	; 3
     29e:	0e 94 83 06 	call	0xd06	; 0xd06 <Modbus::addReg(unsigned int, unsigned int)>
     2a2:	50 e0       	ldi	r21, 0x00	; 0
     2a4:	40 e0       	ldi	r20, 0x00	; 0
     2a6:	62 e4       	ldi	r22, 0x42	; 66
     2a8:	7c e9       	ldi	r23, 0x9C	; 156
     2aa:	8a e7       	ldi	r24, 0x7A	; 122
     2ac:	93 e0       	ldi	r25, 0x03	; 3
     2ae:	0e 94 83 06 	call	0xd06	; 0xd06 <Modbus::addReg(unsigned int, unsigned int)>
     2b2:	50 e0       	ldi	r21, 0x00	; 0
     2b4:	40 e0       	ldi	r20, 0x00	; 0
     2b6:	63 e4       	ldi	r22, 0x43	; 67
     2b8:	7c e9       	ldi	r23, 0x9C	; 156
     2ba:	8a e7       	ldi	r24, 0x7A	; 122
     2bc:	93 e0       	ldi	r25, 0x03	; 3
     2be:	0e 94 83 06 	call	0xd06	; 0xd06 <Modbus::addReg(unsigned int, unsigned int)>
     2c2:	50 e0       	ldi	r21, 0x00	; 0
     2c4:	40 e0       	ldi	r20, 0x00	; 0
     2c6:	64 e4       	ldi	r22, 0x44	; 68
     2c8:	7c e9       	ldi	r23, 0x9C	; 156
     2ca:	8a e7       	ldi	r24, 0x7A	; 122
     2cc:	93 e0       	ldi	r25, 0x03	; 3
     2ce:	0e 94 83 06 	call	0xd06	; 0xd06 <Modbus::addReg(unsigned int, unsigned int)>
     2d2:	50 e0       	ldi	r21, 0x00	; 0
     2d4:	40 e0       	ldi	r20, 0x00	; 0
     2d6:	65 e4       	ldi	r22, 0x45	; 69
     2d8:	7c e9       	ldi	r23, 0x9C	; 156
     2da:	8a e7       	ldi	r24, 0x7A	; 122
     2dc:	93 e0       	ldi	r25, 0x03	; 3
     2de:	0e 94 83 06 	call	0xd06	; 0xd06 <Modbus::addReg(unsigned int, unsigned int)>
     2e2:	50 e0       	ldi	r21, 0x00	; 0
     2e4:	40 e0       	ldi	r20, 0x00	; 0
     2e6:	66 e4       	ldi	r22, 0x46	; 70
     2e8:	7c e9       	ldi	r23, 0x9C	; 156
     2ea:	8a e7       	ldi	r24, 0x7A	; 122
     2ec:	93 e0       	ldi	r25, 0x03	; 3
     2ee:	0c 94 83 06 	jmp	0xd06	; 0xd06 <Modbus::addReg(unsigned int, unsigned int)>
setup():
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:90 (discriminator 2)
    pinMode(DOWN_RELAY, OUTPUT);

    digitalWrite(UP_RELAY, LOW);
    digitalWrite(DOWN_RELAY, LOW);

    bitWrite(address, 0, digitalRead(10));
     2f2:	2e 7f       	andi	r18, 0xFE	; 254
     2f4:	52 cf       	rjmp	.-348    	; 0x19a <setup+0x76>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:91 (discriminator 2)
    bitWrite(address, 1, digitalRead(9));
     2f6:	2d 7f       	andi	r18, 0xFD	; 253
     2f8:	5f cf       	rjmp	.-322    	; 0x1b8 <setup+0x94>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:92 (discriminator 2)
    bitWrite(address, 2, digitalRead(8));
     2fa:	2b 7f       	andi	r18, 0xFB	; 251
     2fc:	6c cf       	rjmp	.-296    	; 0x1d6 <setup+0xb2>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:93 (discriminator 2)
    bitWrite(address, 3, digitalRead(7));
     2fe:	27 7f       	andi	r18, 0xF7	; 247
     300:	79 cf       	rjmp	.-270    	; 0x1f4 <setup+0xd0>

00000302 <goUP()>:
_Z4goUPv():
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:135
    positionMove = false;
}

void goUP()
{
    digitalWrite(DOWN_RELAY, 0);
     302:	60 e0       	ldi	r22, 0x00	; 0
     304:	8f e0       	ldi	r24, 0x0F	; 15
     306:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <digitalWrite>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:136
    delay(10);
     30a:	6a e0       	ldi	r22, 0x0A	; 10
     30c:	70 e0       	ldi	r23, 0x00	; 0
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	0e 94 ed 0c 	call	0x19da	; 0x19da <delay>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:137
    digitalWrite(UP_RELAY, 1);
     316:	61 e0       	ldi	r22, 0x01	; 1
     318:	8e e0       	ldi	r24, 0x0E	; 14
     31a:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <digitalWrite>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:138
    state = 1;
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <state>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:139
    currentWorkTime = millis();
     324:	0e 94 bc 0c 	call	0x1978	; 0x1978 <millis>
     328:	60 93 3b 03 	sts	0x033B, r22	; 0x80033b <currentWorkTime>
     32c:	70 93 3c 03 	sts	0x033C, r23	; 0x80033c <currentWorkTime+0x1>
     330:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <currentWorkTime+0x2>
     334:	90 93 3e 03 	sts	0x033E, r25	; 0x80033e <currentWorkTime+0x3>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:140
}
     338:	08 95       	ret

0000033a <goDOWN()>:
_Z6goDOWNv():
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:144

void goDOWN()
{
    digitalWrite(UP_RELAY, 0);
     33a:	60 e0       	ldi	r22, 0x00	; 0
     33c:	8e e0       	ldi	r24, 0x0E	; 14
     33e:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <digitalWrite>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:145
    delay(10);
     342:	6a e0       	ldi	r22, 0x0A	; 10
     344:	70 e0       	ldi	r23, 0x00	; 0
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 ed 0c 	call	0x19da	; 0x19da <delay>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:146
    digitalWrite(DOWN_RELAY, 1);
     34e:	61 e0       	ldi	r22, 0x01	; 1
     350:	8f e0       	ldi	r24, 0x0F	; 15
     352:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <digitalWrite>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:147
    state = 3;
     356:	83 e0       	ldi	r24, 0x03	; 3
     358:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <state>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:148
    currentWorkTime = millis();
     35c:	0e 94 bc 0c 	call	0x1978	; 0x1978 <millis>
     360:	60 93 3b 03 	sts	0x033B, r22	; 0x80033b <currentWorkTime>
     364:	70 93 3c 03 	sts	0x033C, r23	; 0x80033c <currentWorkTime+0x1>
     368:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <currentWorkTime+0x2>
     36c:	90 93 3e 03 	sts	0x033E, r25	; 0x80033e <currentWorkTime+0x3>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:149
}
     370:	08 95       	ret

00000372 <calculatePosition()>:
_Z17calculatePositionv():
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:152

void calculatePosition()
{
     372:	0f 93       	push	r16
     374:	1f 93       	push	r17
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:153
    unsigned long timePassed = millis()-currentWorkTime;
     376:	0e 94 bc 0c 	call	0x1978	; 0x1978 <millis>
     37a:	00 91 3b 03 	lds	r16, 0x033B	; 0x80033b <currentWorkTime>
     37e:	10 91 3c 03 	lds	r17, 0x033C	; 0x80033c <currentWorkTime+0x1>
     382:	20 91 3d 03 	lds	r18, 0x033D	; 0x80033d <currentWorkTime+0x2>
     386:	30 91 3e 03 	lds	r19, 0x033E	; 0x80033e <currentWorkTime+0x3>
     38a:	60 1b       	sub	r22, r16
     38c:	71 0b       	sbc	r23, r17
     38e:	82 0b       	sbc	r24, r18
     390:	93 0b       	sbc	r25, r19
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:154
    int percent = (timePassed / UP_TIME) * 100;
     392:	20 e6       	ldi	r18, 0x60	; 96
     394:	3a ee       	ldi	r19, 0xEA	; 234
     396:	40 e0       	ldi	r20, 0x00	; 0
     398:	50 e0       	ldi	r21, 0x00	; 0
     39a:	0e 94 de 10 	call	0x21bc	; 0x21bc <__udivmodsi4>
     39e:	64 e6       	ldi	r22, 0x64	; 100
     3a0:	62 9f       	mul	r22, r18
     3a2:	c0 01       	movw	r24, r0
     3a4:	63 9f       	mul	r22, r19
     3a6:	90 0d       	add	r25, r0
     3a8:	11 24       	eor	r1, r1
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:155
    if (currentPosition == UP)
     3aa:	20 91 41 03 	lds	r18, 0x0341	; 0x800341 <currentPosition>
     3ae:	30 91 42 03 	lds	r19, 0x0342	; 0x800342 <currentPosition+0x1>
     3b2:	21 15       	cp	r18, r1
     3b4:	31 05       	cpc	r19, r1
     3b6:	69 f4       	brne	.+26     	; 0x3d2 <calculatePosition()+0x60>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:157
    {
        currentPosition -= percent;
     3b8:	91 95       	neg	r25
     3ba:	81 95       	neg	r24
     3bc:	91 09       	sbc	r25, r1
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:158
        if (currentPosition < 0 || currentPosition > 100)
     3be:	85 36       	cpi	r24, 0x65	; 101
     3c0:	91 05       	cpc	r25, r1
     3c2:	20 f4       	brcc	.+8      	; 0x3cc <calculatePosition()+0x5a>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:168
    else if (currentPosition == DOWN)
    {
        currentPosition += percent;
        if (currentPosition < 0 || currentPosition > 100)
        {
            currentPosition = 100;
     3c4:	90 93 42 03 	sts	0x0342, r25	; 0x800342 <currentPosition+0x1>
     3c8:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <currentPosition>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:171
        }
    }
}
     3cc:	1f 91       	pop	r17
     3ce:	0f 91       	pop	r16
     3d0:	08 95       	ret
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:163
        if (currentPosition < 0 || currentPosition > 100)
        {
            currentPosition = 0;
        }
    }
    else if (currentPosition == DOWN)
     3d2:	21 30       	cpi	r18, 0x01	; 1
     3d4:	31 05       	cpc	r19, r1
     3d6:	d1 f7       	brne	.-12     	; 0x3cc <calculatePosition()+0x5a>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:165
    {
        currentPosition += percent;
     3d8:	01 96       	adiw	r24, 0x01	; 1
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:166
        if (currentPosition < 0 || currentPosition > 100)
     3da:	85 36       	cpi	r24, 0x65	; 101
     3dc:	91 05       	cpc	r25, r1
     3de:	90 f3       	brcs	.-28     	; 0x3c4 <calculatePosition()+0x52>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:168
        {
            currentPosition = 100;
     3e0:	84 e6       	ldi	r24, 0x64	; 100
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	ef cf       	rjmp	.-34     	; 0x3c4 <calculatePosition()+0x52>

000003e6 <stop()>:
_Z4stopv():
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:126



void stop()
{
    digitalWrite(UP_RELAY, 0);
     3e6:	60 e0       	ldi	r22, 0x00	; 0
     3e8:	8e e0       	ldi	r24, 0x0E	; 14
     3ea:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <digitalWrite>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:127
    digitalWrite(DOWN_RELAY, 0);
     3ee:	60 e0       	ldi	r22, 0x00	; 0
     3f0:	8f e0       	ldi	r24, 0x0F	; 15
     3f2:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <digitalWrite>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:128
    state = 0;
     3f6:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <state>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:129
    calculatePosition();
     3fa:	0e 94 b9 01 	call	0x372	; 0x372 <calculatePosition()>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:130
    positionMove = false;
     3fe:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <positionMove>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:131
}
     402:	08 95       	ret

00000404 <tilt(int)>:
_Z4tilti():
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:181
//state_closed: 4

bool waitFlag = false;

void tilt(int percent)
{
     404:	cf 92       	push	r12
     406:	df 92       	push	r13
     408:	ef 92       	push	r14
     40a:	ff 92       	push	r15
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	ec 01       	movw	r28, r24
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:183
    unsigned long timeNeeded = 0;
    if (lastDirection == UP && currentTilt < 90)
     412:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <lastDirection>
     416:	81 11       	cpse	r24, r1
     418:	39 c0       	rjmp	.+114    	; 0x48c <tilt(int)+0x88>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:183 (discriminator 1)
     41a:	80 91 3f 03 	lds	r24, 0x033F	; 0x80033f <currentTilt>
     41e:	90 91 40 03 	lds	r25, 0x0340	; 0x800340 <currentTilt+0x1>
     422:	8a 35       	cpi	r24, 0x5A	; 90
     424:	91 05       	cpc	r25, r1
     426:	94 f5       	brge	.+100    	; 0x48c <tilt(int)+0x88>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:185
    {
        if (percent > currentTilt) // podnosimy
     428:	8c 17       	cp	r24, r28
     42a:	9d 07       	cpc	r25, r29
     42c:	8c f4       	brge	.+34     	; 0x450 <tilt(int)+0x4c>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:200
    }
    else
    {
        goDOWN();
        delay(TILT_TIME);
        timeNeeded = (TILT_TIME * (percent-currentTilt) / 100);
     42e:	9e 01       	movw	r18, r28
     430:	28 1b       	sub	r18, r24
     432:	39 0b       	sbc	r19, r25
     434:	c9 01       	movw	r24, r18
     436:	24 e1       	ldi	r18, 0x14	; 20
     438:	28 9f       	mul	r18, r24
     43a:	60 01       	movw	r12, r0
     43c:	29 9f       	mul	r18, r25
     43e:	d0 0c       	add	r13, r0
     440:	11 24       	eor	r1, r1
     442:	0d 2c       	mov	r0, r13
     444:	00 0c       	add	r0, r0
     446:	ee 08       	sbc	r14, r14
     448:	ff 08       	sbc	r15, r15
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:201
        goUP();
     44a:	0e 94 81 01 	call	0x302	; 0x302 <goUP()>
     44e:	0e c0       	rjmp	.+28     	; 0x46c <tilt(int)+0x68>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:192
            timeNeeded = (TILT_TIME * (percent-currentTilt) / 100);
            goUP();
        }
        else
        {
            timeNeeded = (TILT_TIME * (currentTilt-percent) / 100);
     450:	8c 1b       	sub	r24, r28
     452:	9d 0b       	sbc	r25, r29
     454:	24 e1       	ldi	r18, 0x14	; 20
     456:	28 9f       	mul	r18, r24
     458:	60 01       	movw	r12, r0
     45a:	29 9f       	mul	r18, r25
     45c:	d0 0c       	add	r13, r0
     45e:	11 24       	eor	r1, r1
     460:	0d 2c       	mov	r0, r13
     462:	00 0c       	add	r0, r0
     464:	ee 08       	sbc	r14, r14
     466:	ff 08       	sbc	r15, r15
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:193
            goDOWN();
     468:	0e 94 9d 01 	call	0x33a	; 0x33a <goDOWN()>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:203
        goDOWN();
        delay(TILT_TIME);
        timeNeeded = (TILT_TIME * (percent-currentTilt) / 100);
        goUP();
    }
    delay(timeNeeded);
     46c:	c7 01       	movw	r24, r14
     46e:	b6 01       	movw	r22, r12
     470:	0e 94 ed 0c 	call	0x19da	; 0x19da <delay>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:204
    currentTilt = percent;
     474:	d0 93 40 03 	sts	0x0340, r29	; 0x800340 <currentTilt+0x1>
     478:	c0 93 3f 03 	sts	0x033F, r28	; 0x80033f <currentTilt>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:206
    stop();
}
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	ff 90       	pop	r15
     482:	ef 90       	pop	r14
     484:	df 90       	pop	r13
     486:	cf 90       	pop	r12
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:205
        timeNeeded = (TILT_TIME * (percent-currentTilt) / 100);
        goUP();
    }
    delay(timeNeeded);
    currentTilt = percent;
    stop();
     488:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <stop()>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:198
            goDOWN();
        }
    }
    else
    {
        goDOWN();
     48c:	0e 94 9d 01 	call	0x33a	; 0x33a <goDOWN()>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:199
        delay(TILT_TIME);
     490:	60 ed       	ldi	r22, 0xD0	; 208
     492:	77 e0       	ldi	r23, 0x07	; 7
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	0e 94 ed 0c 	call	0x19da	; 0x19da <delay>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:200
        timeNeeded = (TILT_TIME * (percent-currentTilt) / 100);
     49c:	80 91 3f 03 	lds	r24, 0x033F	; 0x80033f <currentTilt>
     4a0:	90 91 40 03 	lds	r25, 0x0340	; 0x800340 <currentTilt+0x1>
     4a4:	c4 cf       	rjmp	.-120    	; 0x42e <tilt(int)+0x2a>

000004a6 <goToPosition(int)>:
_Z12goToPositioni():
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:209
    currentTilt = percent;
    stop();
}

void goToPosition(int percent)
{
     4a6:	cf 92       	push	r12
     4a8:	df 92       	push	r13
     4aa:	ef 92       	push	r14
     4ac:	ff 92       	push	r15
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:211
    unsigned long timeNeeded = 0;
    if (percent > currentPosition)
     4ae:	a0 91 41 03 	lds	r26, 0x0341	; 0x800341 <currentPosition>
     4b2:	b0 91 42 03 	lds	r27, 0x0342	; 0x800342 <currentPosition+0x1>
     4b6:	a8 17       	cp	r26, r24
     4b8:	b9 07       	cpc	r27, r25
     4ba:	14 f5       	brge	.+68     	; 0x500 <goToPosition(int)+0x5a>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:213
    {
        timeNeeded = (DOWN_TIME * (percent-currentPosition) / 100);
     4bc:	9c 01       	movw	r18, r24
     4be:	2a 1b       	sub	r18, r26
     4c0:	3b 0b       	sbc	r19, r27
     4c2:	d9 01       	movw	r26, r18
     4c4:	28 e5       	ldi	r18, 0x58	; 88
     4c6:	32 e0       	ldi	r19, 0x02	; 2
     4c8:	0e 94 06 11 	call	0x220c	; 0x220c <__usmulhisi3>
     4cc:	6b 01       	movw	r12, r22
     4ce:	7c 01       	movw	r14, r24
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:214
        goDOWN();
     4d0:	0e 94 9d 01 	call	0x33a	; 0x33a <goDOWN()>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:221
    else
    {
        timeNeeded = (UP_TIME * (currentPosition-percent) / 100);
        goUP();
    }
    positionMoveTime = millis()+timeNeeded;
     4d4:	0e 94 bc 0c 	call	0x1978	; 0x1978 <millis>
     4d8:	c6 0e       	add	r12, r22
     4da:	d7 1e       	adc	r13, r23
     4dc:	e8 1e       	adc	r14, r24
     4de:	f9 1e       	adc	r15, r25
     4e0:	c0 92 43 03 	sts	0x0343, r12	; 0x800343 <positionMoveTime>
     4e4:	d0 92 44 03 	sts	0x0344, r13	; 0x800344 <positionMoveTime+0x1>
     4e8:	e0 92 45 03 	sts	0x0345, r14	; 0x800345 <positionMoveTime+0x2>
     4ec:	f0 92 46 03 	sts	0x0346, r15	; 0x800346 <positionMoveTime+0x3>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:222
    positionMove = true;
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <positionMove>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:223
}
     4f6:	ff 90       	pop	r15
     4f8:	ef 90       	pop	r14
     4fa:	df 90       	pop	r13
     4fc:	cf 90       	pop	r12
     4fe:	08 95       	ret
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:218
        timeNeeded = (DOWN_TIME * (percent-currentPosition) / 100);
        goDOWN();
    }
    else
    {
        timeNeeded = (UP_TIME * (currentPosition-percent) / 100);
     500:	a8 1b       	sub	r26, r24
     502:	b9 0b       	sbc	r27, r25
     504:	28 e5       	ldi	r18, 0x58	; 88
     506:	32 e0       	ldi	r19, 0x02	; 2
     508:	0e 94 06 11 	call	0x220c	; 0x220c <__usmulhisi3>
     50c:	6b 01       	movw	r12, r22
     50e:	7c 01       	movw	r14, r24
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:219
        goUP();
     510:	0e 94 81 01 	call	0x302	; 0x302 <goUP()>
     514:	df cf       	rjmp	.-66     	; 0x4d4 <goToPosition(int)+0x2e>

00000516 <loop>:
loop():
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:226
    positionMoveTime = millis()+timeNeeded;
    positionMove = true;
}

void loop()
{
     516:	0f 93       	push	r16
     518:	1f 93       	push	r17
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:227
    if (positionMove && millis() > positionMoveTime)
     51a:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <positionMove>
     51e:	88 23       	and	r24, r24
     520:	99 f0       	breq	.+38     	; 0x548 <loop+0x32>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:227 (discriminator 1)
     522:	0e 94 bc 0c 	call	0x1978	; 0x1978 <millis>
     526:	00 91 43 03 	lds	r16, 0x0343	; 0x800343 <positionMoveTime>
     52a:	10 91 44 03 	lds	r17, 0x0344	; 0x800344 <positionMoveTime+0x1>
     52e:	20 91 45 03 	lds	r18, 0x0345	; 0x800345 <positionMoveTime+0x2>
     532:	30 91 46 03 	lds	r19, 0x0346	; 0x800346 <positionMoveTime+0x3>
     536:	06 17       	cp	r16, r22
     538:	17 07       	cpc	r17, r23
     53a:	28 07       	cpc	r18, r24
     53c:	39 07       	cpc	r19, r25
     53e:	20 f4       	brcc	.+8      	; 0x548 <loop+0x32>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:229
    {
        positionMove = false;
     540:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <positionMove>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:230
        stop();
     544:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <stop()>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:233
    }

    if (autoMove && millis() > (lastCheckTime + UP_TIME))
     548:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <autoMove>
     54c:	88 23       	and	r24, r24
     54e:	41 f1       	breq	.+80     	; 0x5a0 <loop+0x8a>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:233 (discriminator 1)
     550:	0e 94 bc 0c 	call	0x1978	; 0x1978 <millis>
     554:	ab 01       	movw	r20, r22
     556:	bc 01       	movw	r22, r24
     558:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <lastCheckTime>
     55c:	90 91 48 03 	lds	r25, 0x0348	; 0x800348 <lastCheckTime+0x1>
     560:	a0 91 49 03 	lds	r26, 0x0349	; 0x800349 <lastCheckTime+0x2>
     564:	b0 91 4a 03 	lds	r27, 0x034A	; 0x80034a <lastCheckTime+0x3>
     568:	80 5a       	subi	r24, 0xA0	; 160
     56a:	95 41       	sbci	r25, 0x15	; 21
     56c:	af 4f       	sbci	r26, 0xFF	; 255
     56e:	bf 4f       	sbci	r27, 0xFF	; 255
     570:	84 17       	cp	r24, r20
     572:	95 07       	cpc	r25, r21
     574:	a6 07       	cpc	r26, r22
     576:	b7 07       	cpc	r27, r23
     578:	98 f4       	brcc	.+38     	; 0x5a0 <loop+0x8a>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:235
    {
        autoMove = false;
     57a:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <autoMove>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:236
        stop();
     57e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <stop()>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:237
        if (lastDirection == 0)
     582:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <lastDirection>
     586:	81 11       	cpse	r24, r1
     588:	8a c1       	rjmp	.+788    	; 0x89e <loop+0x388>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:239
        {
            state = 2;
     58a:	82 e0       	ldi	r24, 0x02	; 2
     58c:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <state>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:240
            currentPosition = 0;
     590:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <currentPosition+0x1>
     594:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <currentPosition>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:241
            currentTilt = 0;
     598:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <currentTilt+0x1>
     59c:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <currentTilt>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:251
            currentPosition = 100;
            currentTilt = 100;
        }
    }

    upButton.update();
     5a0:	88 e6       	ldi	r24, 0x68	; 104
     5a2:	93 e0       	ldi	r25, 0x03	; 3
     5a4:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <Debouncer::update()>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:252
    downButton.update();
     5a8:	86 e5       	ldi	r24, 0x56	; 86
     5aa:	93 e0       	ldi	r25, 0x03	; 3
     5ac:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <Debouncer::update()>
_ZNK9Debouncer12getStateFlagEh():
C:\Users\Jacek\Documents\Arduino\libraries\Bounce2\src/Bounce2.h:76
private:
  inline void changeState();
  inline void setStateFlag(const uint8_t flag)       {state |= flag;}
  inline void unsetStateFlag(const uint8_t flag)     {state &= ~flag;}
  inline void toggleStateFlag(const uint8_t flag)    {state ^= flag;}
  inline bool getStateFlag(const uint8_t flag) const {return((state & flag) != 0);}
     5b0:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <upButton+0x8>
loop():
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:254

    if (upButton.changed())
     5b4:	82 ff       	sbrs	r24, 2
     5b6:	09 c0       	rjmp	.+18     	; 0x5ca <loop+0xb4>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:256
    {
        up = upButton.read();
     5b8:	88 e6       	ldi	r24, 0x68	; 104
     5ba:	93 e0       	ldi	r25, 0x03	; 3
     5bc:	0e 94 4f 0c 	call	0x189e	; 0x189e <Debouncer::read() const>
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <up+0x1>
     5c6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <up>
_ZNK9Debouncer12getStateFlagEh():
C:\Users\Jacek\Documents\Arduino\libraries\Bounce2\src/Bounce2.h:76
     5ca:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <downButton+0x8>
loop():
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:259
    }

    if (downButton.changed())
     5ce:	82 ff       	sbrs	r24, 2
     5d0:	09 c0       	rjmp	.+18     	; 0x5e4 <loop+0xce>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:261
    {
        down = downButton.read();
     5d2:	86 e5       	ldi	r24, 0x56	; 86
     5d4:	93 e0       	ldi	r25, 0x03	; 3
     5d6:	0e 94 4f 0c 	call	0x189e	; 0x189e <Debouncer::read() const>
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <down+0x1>
     5e0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <down>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:264
    }

    if (modbusChanged && modbusData[0] == 2)
     5e4:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <modbusChanged>
     5e8:	88 23       	and	r24, r24
     5ea:	e9 f0       	breq	.+58     	; 0x626 <loop+0x110>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:264 (discriminator 1)
     5ec:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <modbusData>
     5f0:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <modbusData+0x1>
     5f4:	02 97       	sbiw	r24, 0x02	; 2
     5f6:	b9 f4       	brne	.+46     	; 0x626 <loop+0x110>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:266
    {
        goUP();
     5f8:	0e 94 81 01 	call	0x302	; 0x302 <goUP()>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:267
        autoMove = true;
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <autoMove>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:268
        lastCheckTime = millis();
     602:	0e 94 bc 0c 	call	0x1978	; 0x1978 <millis>
     606:	60 93 47 03 	sts	0x0347, r22	; 0x800347 <lastCheckTime>
     60a:	70 93 48 03 	sts	0x0348, r23	; 0x800348 <lastCheckTime+0x1>
     60e:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <lastCheckTime+0x2>
     612:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <lastCheckTime+0x3>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:269
        modbusChanged = false;
     616:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <modbusChanged>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:270
        currentTilt = 100;
     61a:	84 e6       	ldi	r24, 0x64	; 100
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	90 93 40 03 	sts	0x0340, r25	; 0x800340 <currentTilt+0x1>
     622:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <currentTilt>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:273
    }

    if (modbusChanged && modbusData[0] == 0)
     626:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <modbusChanged>
     62a:	88 23       	and	r24, r24
     62c:	61 f0       	breq	.+24     	; 0x646 <loop+0x130>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:273 (discriminator 1)
     62e:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <modbusData>
     632:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <modbusData+0x1>
     636:	89 2b       	or	r24, r25
     638:	31 f4       	brne	.+12     	; 0x646 <loop+0x130>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:275
    {
        stop();
     63a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <stop()>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:276
        autoMove = false;
     63e:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <autoMove>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:277
        modbusChanged = false;
     642:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <modbusChanged>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:280
    }

    if (modbusChanged && modbusData[0] == 4)
     646:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <modbusChanged>
     64a:	88 23       	and	r24, r24
     64c:	d9 f0       	breq	.+54     	; 0x684 <loop+0x16e>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:280 (discriminator 1)
     64e:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <modbusData>
     652:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <modbusData+0x1>
     656:	04 97       	sbiw	r24, 0x04	; 4
     658:	a9 f4       	brne	.+42     	; 0x684 <loop+0x16e>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:282
    {
        goDOWN();
     65a:	0e 94 9d 01 	call	0x33a	; 0x33a <goDOWN()>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:283
        autoMove = true;
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <autoMove>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:284
        lastCheckTime = millis();
     664:	0e 94 bc 0c 	call	0x1978	; 0x1978 <millis>
     668:	60 93 47 03 	sts	0x0347, r22	; 0x800347 <lastCheckTime>
     66c:	70 93 48 03 	sts	0x0348, r23	; 0x800348 <lastCheckTime+0x1>
     670:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <lastCheckTime+0x2>
     674:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <lastCheckTime+0x3>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:285
        modbusChanged = false;
     678:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <modbusChanged>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:286
        currentTilt = 0;
     67c:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <currentTilt+0x1>
     680:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <currentTilt>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:289
    }

    if (down == OFF && up == OFF && !autoMove && !positionMove)
     684:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <down>
     688:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <down+0x1>
     68c:	01 97       	sbiw	r24, 0x01	; 1
     68e:	81 f4       	brne	.+32     	; 0x6b0 <loop+0x19a>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:289 (discriminator 1)
     690:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <up>
     694:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <up+0x1>
     698:	01 97       	sbiw	r24, 0x01	; 1
     69a:	51 f4       	brne	.+20     	; 0x6b0 <loop+0x19a>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:289 (discriminator 2)
     69c:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <autoMove>
     6a0:	81 11       	cpse	r24, r1
     6a2:	06 c0       	rjmp	.+12     	; 0x6b0 <loop+0x19a>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:289 (discriminator 3)
     6a4:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <positionMove>
     6a8:	81 11       	cpse	r24, r1
     6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <loop+0x19a>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:291
    {
        stop();
     6ac:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <stop()>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:294
    }

    if (down == OFF && up == OFF)
     6b0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <down>
     6b4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <down+0x1>
     6b8:	81 30       	cpi	r24, 0x01	; 1
     6ba:	91 05       	cpc	r25, r1
     6bc:	09 f0       	breq	.+2      	; 0x6c0 <loop+0x1aa>
     6be:	fd c0       	rjmp	.+506    	; 0x8ba <loop+0x3a4>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:294 (discriminator 1)
     6c0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <up>
     6c4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <up+0x1>
     6c8:	01 97       	sbiw	r24, 0x01	; 1
     6ca:	11 f4       	brne	.+4      	; 0x6d0 <loop+0x1ba>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:296
    {
        waitFlag = false;
     6cc:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <__data_end>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:316
        autoMove = true;
        waitFlag = true;
        delay(100);
    }

    if (down == OFF && up == ON && !waitFlag)
     6d0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <down>
     6d4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <down+0x1>
     6d8:	01 97       	sbiw	r24, 0x01	; 1
     6da:	e1 f4       	brne	.+56     	; 0x714 <loop+0x1fe>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:316 (discriminator 1)
     6dc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <up>
     6e0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <up+0x1>
     6e4:	89 2b       	or	r24, r25
     6e6:	b1 f4       	brne	.+44     	; 0x714 <loop+0x1fe>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:316 (discriminator 2)
     6e8:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <__data_end>
     6ec:	81 11       	cpse	r24, r1
     6ee:	12 c0       	rjmp	.+36     	; 0x714 <loop+0x1fe>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:318
    {
        if (autoMove)
     6f0:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <autoMove>
     6f4:	88 23       	and	r24, r24
     6f6:	09 f4       	brne	.+2      	; 0x6fa <loop+0x1e4>
     6f8:	0d c1       	rjmp	.+538    	; 0x914 <__stack+0x15>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:320
        {
            stop();
     6fa:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <stop()>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:321
            autoMove = false;
     6fe:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <autoMove>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:322
            waitFlag = true;
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <__data_end>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:329
        else
        {
            goDOWN();
            lastDirection = DOWN;
        }
        delay(50);
     708:	62 e3       	ldi	r22, 0x32	; 50
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	0e 94 ed 0c 	call	0x19da	; 0x19da <delay>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:332
    }

    if (down == ON && up == OFF && !waitFlag)
     714:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <down>
     718:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <down+0x1>
     71c:	89 2b       	or	r24, r25
     71e:	e1 f4       	brne	.+56     	; 0x758 <loop+0x242>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:332 (discriminator 1)
     720:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <up>
     724:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <up+0x1>
     728:	01 97       	sbiw	r24, 0x01	; 1
     72a:	b1 f4       	brne	.+44     	; 0x758 <loop+0x242>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:332 (discriminator 2)
     72c:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <__data_end>
     730:	81 11       	cpse	r24, r1
     732:	12 c0       	rjmp	.+36     	; 0x758 <loop+0x242>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:334
    {
        if (autoMove)
     734:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <autoMove>
     738:	88 23       	and	r24, r24
     73a:	09 f4       	brne	.+2      	; 0x73e <loop+0x228>
     73c:	f1 c0       	rjmp	.+482    	; 0x920 <__stack+0x21>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:336
        {
            stop();
     73e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <stop()>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:337
            autoMove = false;
     742:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <autoMove>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:338
            waitFlag = true;
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <__data_end>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:345
        else
        {
            goUP();
            lastDirection = UP;
        }
        delay(50);
     74c:	62 e3       	ldi	r22, 0x32	; 50
     74e:	70 e0       	ldi	r23, 0x00	; 0
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	0e 94 ed 0c 	call	0x19da	; 0x19da <delay>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:350
    }



    modbusData[4] = currentPosition;
     758:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <currentPosition>
     75c:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <currentPosition+0x1>
     760:	90 93 96 03 	sts	0x0396, r25	; 0x800396 <modbusData+0x9>
     764:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <modbusData+0x8>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:351
    modbusData[5] = currentTilt;
     768:	80 91 3f 03 	lds	r24, 0x033F	; 0x80033f <currentTilt>
     76c:	90 91 40 03 	lds	r25, 0x0340	; 0x800340 <currentTilt+0x1>
     770:	90 93 98 03 	sts	0x0398, r25	; 0x800398 <modbusData+0xb>
     774:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <modbusData+0xa>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:353

    lastModbusCommandRegister = modbusData[0];
     778:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <modbusData>
     77c:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <modbusData+0x1>
     780:	90 93 51 03 	sts	0x0351, r25	; 0x800351 <lastModbusCommandRegister+0x1>
     784:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <lastModbusCommandRegister>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:354
    lastModbusTiltRegister = modbusData[2];
     788:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <modbusData+0x4>
     78c:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <modbusData+0x5>
     790:	90 93 4f 03 	sts	0x034F, r25	; 0x80034f <lastModbusTiltRegister+0x1>
     794:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <lastModbusTiltRegister>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:355
    lastModbusPositionRegister = modbusData[3];
     798:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <modbusData+0x6>
     79c:	90 91 94 03 	lds	r25, 0x0394	; 0x800394 <modbusData+0x7>
     7a0:	90 93 4d 03 	sts	0x034D, r25	; 0x80034d <lastModbusPositionRegister+0x1>
     7a4:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <lastModbusPositionRegister>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:356
    modbusData[1] = state;
     7a8:	40 91 55 03 	lds	r20, 0x0355	; 0x800355 <state>
     7ac:	04 2e       	mov	r0, r20
     7ae:	00 0c       	add	r0, r0
     7b0:	55 0b       	sbc	r21, r21
     7b2:	50 93 90 03 	sts	0x0390, r21	; 0x800390 <modbusData+0x3>
     7b6:	40 93 8f 03 	sts	0x038F, r20	; 0x80038f <modbusData+0x2>
_ZN6Modbus7setHregEjj():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.h:131
      @param offset register offset (PDU addressing: 0-9999)
      @param value new value
      @return true, false if register not found.
    */
    inline bool setHreg (word offset, word value) {
      return setReg (offset + TRegister::HregOffset, value);
     7ba:	62 e4       	ldi	r22, 0x42	; 66
     7bc:	7c e9       	ldi	r23, 0x9C	; 156
     7be:	8a e7       	ldi	r24, 0x7A	; 122
     7c0:	93 e0       	ldi	r25, 0x03	; 3
     7c2:	0e 94 af 06 	call	0xd5e	; 0xd5e <Modbus::setReg(unsigned int, unsigned int)>
     7c6:	40 91 95 03 	lds	r20, 0x0395	; 0x800395 <modbusData+0x8>
     7ca:	50 91 96 03 	lds	r21, 0x0396	; 0x800396 <modbusData+0x9>
     7ce:	65 e4       	ldi	r22, 0x45	; 69
     7d0:	7c e9       	ldi	r23, 0x9C	; 156
     7d2:	8a e7       	ldi	r24, 0x7A	; 122
     7d4:	93 e0       	ldi	r25, 0x03	; 3
     7d6:	0e 94 af 06 	call	0xd5e	; 0xd5e <Modbus::setReg(unsigned int, unsigned int)>
     7da:	40 91 97 03 	lds	r20, 0x0397	; 0x800397 <modbusData+0xa>
     7de:	50 91 98 03 	lds	r21, 0x0398	; 0x800398 <modbusData+0xb>
     7e2:	66 e4       	ldi	r22, 0x46	; 70
     7e4:	7c e9       	ldi	r23, 0x9C	; 156
     7e6:	8a e7       	ldi	r24, 0x7A	; 122
     7e8:	93 e0       	ldi	r25, 0x03	; 3
     7ea:	0e 94 af 06 	call	0xd5e	; 0xd5e <Modbus::setReg(unsigned int, unsigned int)>
loop():
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:362

    slave.setHreg(1, modbusData[1]);
    slave.setHreg(4, modbusData[4]);
    slave.setHreg(5, modbusData[5]);

    slave.task();
     7ee:	8a e7       	ldi	r24, 0x7A	; 122
     7f0:	93 e0       	ldi	r25, 0x03	; 3
     7f2:	0e 94 10 06 	call	0xc20	; 0xc20 <ModbusSerial::task()>
_ZN6Modbus4hregEj():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.h:139
      @brief Return the value of a holding register
      @param offset register offset (PDU addressing: 0-9999)
      @return register value
    */
    inline word hreg (word offset) {
      return reg (offset + TRegister::HregOffset);
     7f6:	61 e4       	ldi	r22, 0x41	; 65
     7f8:	7c e9       	ldi	r23, 0x9C	; 156
     7fa:	8a e7       	ldi	r24, 0x7A	; 122
     7fc:	93 e0       	ldi	r25, 0x03	; 3
     7fe:	0e 94 bf 06 	call	0xd7e	; 0xd7e <Modbus::reg(unsigned int)>
loop():
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:364

    modbusData[0] = slave.Hreg(0);
     802:	90 93 8e 03 	sts	0x038E, r25	; 0x80038e <modbusData+0x1>
     806:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <modbusData>
_ZN6Modbus4hregEj():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.h:139
     80a:	63 e4       	ldi	r22, 0x43	; 67
     80c:	7c e9       	ldi	r23, 0x9C	; 156
     80e:	8a e7       	ldi	r24, 0x7A	; 122
     810:	93 e0       	ldi	r25, 0x03	; 3
     812:	0e 94 bf 06 	call	0xd7e	; 0xd7e <Modbus::reg(unsigned int)>
loop():
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:365
    modbusData[2] = slave.Hreg(2);
     816:	90 93 92 03 	sts	0x0392, r25	; 0x800392 <modbusData+0x5>
     81a:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <modbusData+0x4>
_ZN6Modbus4hregEj():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.h:139
     81e:	64 e4       	ldi	r22, 0x44	; 68
     820:	7c e9       	ldi	r23, 0x9C	; 156
     822:	8a e7       	ldi	r24, 0x7A	; 122
     824:	93 e0       	ldi	r25, 0x03	; 3
     826:	0e 94 bf 06 	call	0xd7e	; 0xd7e <Modbus::reg(unsigned int)>
loop():
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:366
    modbusData[3] = slave.Hreg(3);
     82a:	90 93 94 03 	sts	0x0394, r25	; 0x800394 <modbusData+0x7>
     82e:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <modbusData+0x6>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:368

    if (modbusData[0] != lastModbusCommandRegister)
     832:	20 91 8d 03 	lds	r18, 0x038D	; 0x80038d <modbusData>
     836:	30 91 8e 03 	lds	r19, 0x038E	; 0x80038e <modbusData+0x1>
     83a:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <lastModbusCommandRegister>
     83e:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <lastModbusCommandRegister+0x1>
     842:	28 17       	cp	r18, r24
     844:	39 07       	cpc	r19, r25
     846:	09 f4       	brne	.+2      	; 0x84a <loop+0x334>
     848:	70 c0       	rjmp	.+224    	; 0x92a <__stack+0x2b>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:370
    {
        modbusChanged = true;
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <modbusChanged>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:377
    else
    {
        modbusChanged = false;
    }

    if (modbusData[2] != lastModbusTiltRegister)
     850:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <modbusData+0x4>
     854:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <modbusData+0x5>
     858:	20 91 4e 03 	lds	r18, 0x034E	; 0x80034e <lastModbusTiltRegister>
     85c:	30 91 4f 03 	lds	r19, 0x034F	; 0x80034f <lastModbusTiltRegister+0x1>
     860:	82 17       	cp	r24, r18
     862:	93 07       	cpc	r25, r19
     864:	41 f0       	breq	.+16     	; 0x876 <loop+0x360>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:380
    {
        int tiltPercent = modbusData[2];
        if (tiltPercent > 0 && tiltPercent < 100)
     866:	9c 01       	movw	r18, r24
     868:	21 50       	subi	r18, 0x01	; 1
     86a:	31 09       	sbc	r19, r1
     86c:	23 36       	cpi	r18, 0x63	; 99
     86e:	31 05       	cpc	r19, r1
     870:	10 f4       	brcc	.+4      	; 0x876 <loop+0x360>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:382
        {
            tilt(tiltPercent);
     872:	0e 94 02 02 	call	0x404	; 0x404 <tilt(int)>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:386
        }
    }

    if (modbusData[3] != lastModbusPositionRegister)
     876:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <modbusData+0x6>
     87a:	90 91 94 03 	lds	r25, 0x0394	; 0x800394 <modbusData+0x7>
     87e:	20 91 4c 03 	lds	r18, 0x034C	; 0x80034c <lastModbusPositionRegister>
     882:	30 91 4d 03 	lds	r19, 0x034D	; 0x80034d <lastModbusPositionRegister+0x1>
     886:	82 17       	cp	r24, r18
     888:	93 07       	cpc	r25, r19
     88a:	09 f4       	brne	.+2      	; 0x88e <loop+0x378>
     88c:	51 c0       	rjmp	.+162    	; 0x930 <__stack+0x31>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:389
    {
        int openPercent = modbusData[3];
        if (openPercent >= 0 && openPercent < 101)
     88e:	85 36       	cpi	r24, 0x65	; 101
     890:	91 05       	cpc	r25, r1
     892:	08 f0       	brcs	.+2      	; 0x896 <loop+0x380>
     894:	4d c0       	rjmp	.+154    	; 0x930 <__stack+0x31>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:394
        {
            goToPosition(openPercent);
        }
    }
}
     896:	1f 91       	pop	r17
     898:	0f 91       	pop	r16
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:391
    if (modbusData[3] != lastModbusPositionRegister)
    {
        int openPercent = modbusData[3];
        if (openPercent >= 0 && openPercent < 101)
        {
            goToPosition(openPercent);
     89a:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <goToPosition(int)>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:245
            currentPosition = 0;
            currentTilt = 0;
        }
        else
        {
            state = 4;
     89e:	84 e0       	ldi	r24, 0x04	; 4
     8a0:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <state>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:246
            currentPosition = 100;
     8a4:	84 e6       	ldi	r24, 0x64	; 100
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	90 93 42 03 	sts	0x0342, r25	; 0x800342 <currentPosition+0x1>
     8ac:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <currentPosition>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:247
            currentTilt = 100;
     8b0:	90 93 40 03 	sts	0x0340, r25	; 0x800340 <currentTilt+0x1>
     8b4:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <currentTilt>
     8b8:	73 ce       	rjmp	.-794    	; 0x5a0 <loop+0x8a>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:300
    {
        waitFlag = false;
    }

    // dwa przyciski
    if (down == ON && up == ON && !waitFlag)
     8ba:	89 2b       	or	r24, r25
     8bc:	09 f0       	breq	.+2      	; 0x8c0 <loop+0x3aa>
     8be:	08 cf       	rjmp	.-496    	; 0x6d0 <loop+0x1ba>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:300 (discriminator 1)
     8c0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <up>
     8c4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <up+0x1>
     8c8:	89 2b       	or	r24, r25
     8ca:	09 f0       	breq	.+2      	; 0x8ce <loop+0x3b8>
     8cc:	01 cf       	rjmp	.-510    	; 0x6d0 <loop+0x1ba>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:300 (discriminator 2)
     8ce:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <__data_end>
     8d2:	81 11       	cpse	r24, r1
     8d4:	fd ce       	rjmp	.-518    	; 0x6d0 <loop+0x1ba>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:302
    {
        if (lastDirection == DOWN)
     8d6:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <lastDirection>
     8da:	88 23       	and	r24, r24
     8dc:	c1 f0       	breq	.+48     	; 0x90e <__stack+0xf>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:304
        {
            goDOWN();
     8de:	0e 94 9d 01 	call	0x33a	; 0x33a <goDOWN()>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:310
        }
        else
        {
            goUP();
        }
        lastCheckTime = millis();
     8e2:	0e 94 bc 0c 	call	0x1978	; 0x1978 <millis>
     8e6:	60 93 47 03 	sts	0x0347, r22	; 0x800347 <lastCheckTime>
     8ea:	70 93 48 03 	sts	0x0348, r23	; 0x800348 <lastCheckTime+0x1>
     8ee:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <lastCheckTime+0x2>
     8f2:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <lastCheckTime+0x3>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:311
        autoMove = true;
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <autoMove>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:312
        waitFlag = true;
     8fc:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <__data_end>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:313
        delay(100);
     900:	64 e6       	ldi	r22, 0x64	; 100
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	0e 94 ed 0c 	call	0x19da	; 0x19da <delay>
     90c:	e1 ce       	rjmp	.-574    	; 0x6d0 <loop+0x1ba>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:308
        {
            goDOWN();
        }
        else
        {
            goUP();
     90e:	0e 94 81 01 	call	0x302	; 0x302 <goUP()>
     912:	e7 cf       	rjmp	.-50     	; 0x8e2 <loop+0x3cc>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:326
            autoMove = false;
            waitFlag = true;
        }
        else
        {
            goDOWN();
     914:	0e 94 9d 01 	call	0x33a	; 0x33a <goDOWN()>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:327
            lastDirection = DOWN;
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <lastDirection>
     91e:	f4 ce       	rjmp	.-536    	; 0x708 <loop+0x1f2>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:342
            autoMove = false;
            waitFlag = true;
        }
        else
        {
            goUP();
     920:	0e 94 81 01 	call	0x302	; 0x302 <goUP()>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:343
            lastDirection = UP;
     924:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <lastDirection>
     928:	11 cf       	rjmp	.-478    	; 0x74c <loop+0x236>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:374
    {
        modbusChanged = true;
    }
    else
    {
        modbusChanged = false;
     92a:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <modbusChanged>
     92e:	90 cf       	rjmp	.-224    	; 0x850 <loop+0x33a>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:394
        if (openPercent >= 0 && openPercent < 101)
        {
            goToPosition(openPercent);
        }
    }
}
     930:	1f 91       	pop	r17
     932:	0f 91       	pop	r16
     934:	08 95       	ret

00000936 <_GLOBAL__sub_I_modbusData>:
_GLOBAL__sub_I_modbusData():
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:40
 * 5 - stan tilt
*/
uint16_t modbusData[7];
int address = 1;

ModbusSerial slave(Serial, address, RS485PIN);
     936:	22 e0       	ldi	r18, 0x02	; 2
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <address>
     93e:	64 ea       	ldi	r22, 0xA4	; 164
     940:	73 e0       	ldi	r23, 0x03	; 3
     942:	8a e7       	ldi	r24, 0x7A	; 122
     944:	93 e0       	ldi	r25, 0x03	; 3
     946:	0e 94 ad 04 	call	0x95a	; 0x95a <ModbusSerial::ModbusSerial(Stream&, unsigned char, int)>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:42

Bounce upButton = Bounce();
     94a:	88 e6       	ldi	r24, 0x68	; 104
     94c:	93 e0       	ldi	r25, 0x03	; 3
     94e:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <Bounce::Bounce()>
C:\Users\Jacek\Documents\Arduino\roller_shutter_2023_v2/roller_shutter_2023_v2.ino:43
Bounce downButton = Bounce();
     952:	86 e5       	ldi	r24, 0x56	; 86
     954:	93 e0       	ldi	r25, 0x03	; 3
     956:	0c 94 53 0c 	jmp	0x18a6	; 0x18a6 <Bounce::Bounce()>

0000095a <ModbusSerial::ModbusSerial(Stream&, unsigned char, int)>:
_ZN12ModbusSerialC2ER6Streamhi():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:177
// protected
void ModbusSerial::reportServerId() {

  Modbus::reportServerId();
  _frame[2] = getSlaveId(); // Server ID
}
     95a:	cf 92       	push	r12
     95c:	df 92       	push	r13
     95e:	ef 92       	push	r14
     960:	ff 92       	push	r15
     962:	1f 93       	push	r17
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	ec 01       	movw	r28, r24
     96a:	6b 01       	movw	r12, r22
     96c:	14 2f       	mov	r17, r20
     96e:	79 01       	movw	r14, r18
     970:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <Modbus::Modbus()>
     974:	db 86       	std	Y+11, r13	; 0x0b
     976:	ca 86       	std	Y+10, r12	; 0x0a
     978:	fd 86       	std	Y+13, r15	; 0x0d
     97a:	ec 86       	std	Y+12, r14	; 0x0c
     97c:	1e 87       	std	Y+14, r17	; 0x0e
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	1f 91       	pop	r17
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	df 90       	pop	r13
     98a:	cf 90       	pop	r12
     98c:	08 95       	ret

0000098e <ModbusSerial::config(unsigned long)>:
_ZN12ModbusSerial6configEm():
     98e:	cf 92       	push	r12
     990:	df 92       	push	r13
     992:	ef 92       	push	r14
     994:	ff 92       	push	r15
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	ec 01       	movw	r28, r24
     99c:	6a 01       	movw	r12, r20
     99e:	7b 01       	movw	r14, r22
     9a0:	8c 85       	ldd	r24, Y+12	; 0x0c
     9a2:	9d 85       	ldd	r25, Y+13	; 0x0d
     9a4:	97 fd       	sbrc	r25, 7
     9a6:	07 c0       	rjmp	.+14     	; 0x9b6 <ModbusSerial::config(unsigned long)+0x28>
     9a8:	61 e0       	ldi	r22, 0x01	; 1
     9aa:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <pinMode>
     9ae:	60 e0       	ldi	r22, 0x00	; 0
     9b0:	8c 85       	ldd	r24, Y+12	; 0x0c
     9b2:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <digitalWrite>
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	c8 16       	cp	r12, r24
     9ba:	8b e4       	ldi	r24, 0x4B	; 75
     9bc:	d8 06       	cpc	r13, r24
     9be:	e1 04       	cpc	r14, r1
     9c0:	f1 04       	cpc	r15, r1
     9c2:	78 f0       	brcs	.+30     	; 0x9e2 <ModbusSerial::config(unsigned long)+0x54>
     9c4:	8e ee       	ldi	r24, 0xEE	; 238
     9c6:	92 e0       	ldi	r25, 0x02	; 2
     9c8:	98 8b       	std	Y+16, r25	; 0x10
     9ca:	8f 87       	std	Y+15, r24	; 0x0f
     9cc:	86 ed       	ldi	r24, 0xD6	; 214
     9ce:	96 e0       	ldi	r25, 0x06	; 6
     9d0:	9a 8b       	std	Y+18, r25	; 0x12
     9d2:	89 8b       	std	Y+17, r24	; 0x11
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	ff 90       	pop	r15
     9da:	ef 90       	pop	r14
     9dc:	df 90       	pop	r13
     9de:	cf 90       	pop	r12
     9e0:	08 95       	ret
     9e2:	60 e2       	ldi	r22, 0x20	; 32
     9e4:	75 ec       	ldi	r23, 0xC5	; 197
     9e6:	8b ef       	ldi	r24, 0xFB	; 251
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	a7 01       	movw	r20, r14
     9ec:	96 01       	movw	r18, r12
     9ee:	0e 94 de 10 	call	0x21bc	; 0x21bc <__udivmodsi4>
     9f2:	38 8b       	std	Y+16, r19	; 0x10
     9f4:	2f 87       	std	Y+15, r18	; 0x0f
     9f6:	60 ea       	ldi	r22, 0xA0	; 160
     9f8:	76 e7       	ldi	r23, 0x76	; 118
     9fa:	8b e4       	ldi	r24, 0x4B	; 75
     9fc:	92 e0       	ldi	r25, 0x02	; 2
     9fe:	a7 01       	movw	r20, r14
     a00:	96 01       	movw	r18, r12
     a02:	0e 94 de 10 	call	0x21bc	; 0x21bc <__udivmodsi4>
     a06:	3a 8b       	std	Y+18, r19	; 0x12
     a08:	29 8b       	std	Y+17, r18	; 0x11
     a0a:	e4 cf       	rjmp	.-56     	; 0x9d4 <ModbusSerial::config(unsigned long)+0x46>

00000a0c <ModbusSerial::setSlaveId(unsigned char)>:
_ZN12ModbusSerial10setSlaveIdEh():
     a0c:	fc 01       	movw	r30, r24
     a0e:	66 87       	std	Z+14, r22	; 0x0e
     a10:	08 95       	ret

00000a12 <ModbusSerial::send(unsigned char*)>:
_ZN12ModbusSerial4sendEPh():
     a12:	ef 92       	push	r14
     a14:	ff 92       	push	r15
     a16:	1f 93       	push	r17
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
     a1c:	ec 01       	movw	r28, r24
     a1e:	7b 01       	movw	r14, r22
     a20:	8c 85       	ldd	r24, Y+12	; 0x0c
     a22:	9d 85       	ldd	r25, Y+13	; 0x0d
     a24:	97 fd       	sbrc	r25, 7
     a26:	09 c0       	rjmp	.+18     	; 0xa3a <ModbusSerial::send(unsigned char*)+0x28>
     a28:	61 e0       	ldi	r22, 0x01	; 1
     a2a:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <digitalWrite>
     a2e:	61 e0       	ldi	r22, 0x01	; 1
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	0e 94 ed 0c 	call	0x19da	; 0x19da <delay>
     a3a:	10 e0       	ldi	r17, 0x00	; 0
     a3c:	8a 85       	ldd	r24, Y+10	; 0x0a
     a3e:	9b 85       	ldd	r25, Y+11	; 0x0b
     a40:	dc 01       	movw	r26, r24
     a42:	ed 91       	ld	r30, X+
     a44:	fc 91       	ld	r31, X
     a46:	28 85       	ldd	r18, Y+8	; 0x08
     a48:	12 17       	cp	r17, r18
     a4a:	50 f4       	brcc	.+20     	; 0xa60 <ModbusSerial::send(unsigned char*)+0x4e>
     a4c:	d7 01       	movw	r26, r14
     a4e:	a1 0f       	add	r26, r17
     a50:	b1 1d       	adc	r27, r1
     a52:	01 90       	ld	r0, Z+
     a54:	f0 81       	ld	r31, Z
     a56:	e0 2d       	mov	r30, r0
     a58:	6c 91       	ld	r22, X
     a5a:	09 95       	icall
     a5c:	1f 5f       	subi	r17, 0xFF	; 255
     a5e:	ee cf       	rjmp	.-36     	; 0xa3c <ModbusSerial::send(unsigned char*)+0x2a>
     a60:	06 80       	ldd	r0, Z+6	; 0x06
     a62:	f7 81       	ldd	r31, Z+7	; 0x07
     a64:	e0 2d       	mov	r30, r0
     a66:	09 95       	icall
     a68:	89 89       	ldd	r24, Y+17	; 0x11
     a6a:	9a 89       	ldd	r25, Y+18	; 0x12
     a6c:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <delayMicroseconds>
     a70:	8c 85       	ldd	r24, Y+12	; 0x0c
     a72:	9d 85       	ldd	r25, Y+13	; 0x0d
     a74:	97 fd       	sbrc	r25, 7
     a76:	03 c0       	rjmp	.+6      	; 0xa7e <ModbusSerial::send(unsigned char*)+0x6c>
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <digitalWrite>
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	1f 91       	pop	r17
     a86:	ff 90       	pop	r15
     a88:	ef 90       	pop	r14
     a8a:	08 95       	ret

00000a8c <ModbusSerial::calcCrc(unsigned char, unsigned char*, unsigned char)>:
_ZN12ModbusSerial7calcCrcEhPhh():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:228
};

word ModbusSerial::calcCrc (byte address, byte* pduFrame, byte pduLen) {
  byte CRCHi = 0xFF, CRCLo = 0x0FF, Index;

  Index = CRCHi ^ address;
     a8c:	60 95       	com	r22
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:229
  CRCHi = CRCLo ^ _auchCRCHi[Index];
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	fb 01       	movw	r30, r22
     a92:	ea 5e       	subi	r30, 0xEA	; 234
     a94:	fd 4f       	sbci	r31, 0xFD	; 253
     a96:	80 81       	ld	r24, Z
     a98:	80 95       	com	r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:230
  CRCLo = _auchCRCLo[Index];
     a9a:	6a 5e       	subi	r22, 0xEA	; 234
     a9c:	7e 4f       	sbci	r23, 0xFE	; 254
     a9e:	fb 01       	movw	r30, r22
     aa0:	90 81       	ld	r25, Z
     aa2:	da 01       	movw	r26, r20
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:232

  while (pduLen--) {
     aa4:	21 50       	subi	r18, 0x01	; 1
     aa6:	68 f0       	brcs	.+26     	; 0xac2 <ModbusSerial::calcCrc(unsigned char, unsigned char*, unsigned char)+0x36>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:233
    Index = CRCHi ^ *pduFrame++;
     aa8:	4d 91       	ld	r20, X+
     aaa:	48 27       	eor	r20, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:234
    CRCHi = CRCLo ^ _auchCRCHi[Index];
     aac:	50 e0       	ldi	r21, 0x00	; 0
     aae:	fa 01       	movw	r30, r20
     ab0:	ea 5e       	subi	r30, 0xEA	; 234
     ab2:	fd 4f       	sbci	r31, 0xFD	; 253
     ab4:	80 81       	ld	r24, Z
     ab6:	89 27       	eor	r24, r25
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:235
    CRCLo = _auchCRCLo[Index];
     ab8:	fa 01       	movw	r30, r20
     aba:	ea 5e       	subi	r30, 0xEA	; 234
     abc:	fe 4f       	sbci	r31, 0xFE	; 254
     abe:	90 81       	ld	r25, Z
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:232

  Index = CRCHi ^ address;
  CRCHi = CRCLo ^ _auchCRCHi[Index];
  CRCLo = _auchCRCLo[Index];

  while (pduLen--) {
     ac0:	f1 cf       	rjmp	.-30     	; 0xaa4 <ModbusSerial::calcCrc(unsigned char, unsigned char*, unsigned char)+0x18>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:239
    CRCHi = CRCLo ^ _auchCRCHi[Index];
    CRCLo = _auchCRCLo[Index];
  }

  return (CRCHi << 8) | CRCLo;
}
     ac2:	89 27       	eor	r24, r25
     ac4:	98 27       	eor	r25, r24
     ac6:	89 27       	eor	r24, r25
     ac8:	08 95       	ret

00000aca <ModbusSerial::receive(unsigned char*)>:
_ZN12ModbusSerial7receiveEPh():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:79
  
  return m_slaveId;
}

// protected
bool ModbusSerial::receive (byte* frame) {
     aca:	df 92       	push	r13
     acc:	ef 92       	push	r14
     ace:	ff 92       	push	r15
     ad0:	0f 93       	push	r16
     ad2:	1f 93       	push	r17
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:82
  
  //first byte of frame = address
  byte address = frame[0];
     ad8:	fb 01       	movw	r30, r22
     ada:	d0 80       	ld	r13, Z
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:88
  
  //Last two bytes = crc
  word crc = ( (frame[_len - 2] << 8) | frame[_len - 1]);

  //Slave Check
  if (address != 0xFF && address != getSlaveId()) {
     adc:	ff ef       	ldi	r31, 0xFF	; 255
     ade:	df 16       	cp	r13, r31
     ae0:	21 f0       	breq	.+8      	; 0xaea <ModbusSerial::receive(unsigned char*)+0x20>
     ae2:	fc 01       	movw	r30, r24
     ae4:	26 85       	ldd	r18, Z+14	; 0x0e
     ae6:	d2 12       	cpse	r13, r18
     ae8:	2f c0       	rjmp	.+94     	; 0xb48 <ModbusSerial::receive(unsigned char*)+0x7e>
     aea:	8b 01       	movw	r16, r22
     aec:	ec 01       	movw	r28, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:85 (discriminator 4)
  
  //first byte of frame = address
  byte address = frame[0];
  
  //Last two bytes = crc
  word crc = ( (frame[_len - 2] << 8) | frame[_len - 1]);
     aee:	28 85       	ldd	r18, Y+8	; 0x08
     af0:	e2 2e       	mov	r14, r18
     af2:	f1 2c       	mov	r15, r1
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:94 (discriminator 4)
    
    return false;
  }

  //CRC Check
  if (crc != calcCrc (_frame[0], _frame + 1, _len - 3)) {
     af4:	ee 81       	ldd	r30, Y+6	; 0x06
     af6:	ff 81       	ldd	r31, Y+7	; 0x07
     af8:	23 50       	subi	r18, 0x03	; 3
     afa:	af 01       	movw	r20, r30
     afc:	4f 5f       	subi	r20, 0xFF	; 255
     afe:	5f 4f       	sbci	r21, 0xFF	; 255
     b00:	60 81       	ld	r22, Z
     b02:	0e 94 46 05 	call	0xa8c	; 0xa8c <ModbusSerial::calcCrc(unsigned char, unsigned char*, unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:85 (discriminator 4)
  
  //first byte of frame = address
  byte address = frame[0];
  
  //Last two bytes = crc
  word crc = ( (frame[_len - 2] << 8) | frame[_len - 1]);
     b06:	98 01       	movw	r18, r16
     b08:	2e 0d       	add	r18, r14
     b0a:	3f 1d       	adc	r19, r15
     b0c:	f9 01       	movw	r30, r18
     b0e:	32 97       	sbiw	r30, 0x02	; 2
     b10:	40 81       	ld	r20, Z
     b12:	21 50       	subi	r18, 0x01	; 1
     b14:	31 09       	sbc	r19, r1
     b16:	f9 01       	movw	r30, r18
     b18:	20 81       	ld	r18, Z
     b1a:	34 2f       	mov	r19, r20
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:94 (discriminator 4)
    
    return false;
  }

  //CRC Check
  if (crc != calcCrc (_frame[0], _frame + 1, _len - 3)) {
     b1c:	82 17       	cp	r24, r18
     b1e:	93 07       	cpc	r25, r19
     b20:	99 f4       	brne	.+38     	; 0xb48 <ModbusSerial::receive(unsigned char*)+0x7e>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:101
    return false;
  }

  //PDU starts after first byte
  //framesize PDU = framesize - address(1) - crc(2)
  receivePDU (frame + 1);
     b22:	b8 01       	movw	r22, r16
     b24:	6f 5f       	subi	r22, 0xFF	; 255
     b26:	7f 4f       	sbci	r23, 0xFF	; 255
     b28:	ce 01       	movw	r24, r28
     b2a:	0e 94 48 0b 	call	0x1690	; 0x1690 <Modbus::receivePDU(unsigned char*)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:104
  
  //No reply to Broadcasts
  if (address == 0xFF) {
     b2e:	ff ef       	ldi	r31, 0xFF	; 255
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:106
    
    _reply = MB_REPLY_OFF;
     b30:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:104
  //PDU starts after first byte
  //framesize PDU = framesize - address(1) - crc(2)
  receivePDU (frame + 1);
  
  //No reply to Broadcasts
  if (address == 0xFF) {
     b32:	df 12       	cpse	r13, r31
     b34:	01 c0       	rjmp	.+2      	; 0xb38 <ModbusSerial::receive(unsigned char*)+0x6e>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:106
    
    _reply = MB_REPLY_OFF;
     b36:	89 87       	std	Y+9, r24	; 0x09
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:109
  }
  return true;
}
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	1f 91       	pop	r17
     b3e:	0f 91       	pop	r16
     b40:	ff 90       	pop	r15
     b42:	ef 90       	pop	r14
     b44:	df 90       	pop	r13
     b46:	08 95       	ret
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:90
  word crc = ( (frame[_len - 2] << 8) | frame[_len - 1]);

  //Slave Check
  if (address != 0xFF && address != getSlaveId()) {
    
    return false;
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	f6 cf       	rjmp	.-20     	; 0xb38 <ModbusSerial::receive(unsigned char*)+0x6e>

00000b4c <ModbusSerial::sendPDU(unsigned char*)>:
_ZN12ModbusSerial7sendPDUEPh():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:137
  }
  return true;
}

// protected
bool ModbusSerial::sendPDU (byte* pduframe) {
     b4c:	af 92       	push	r10
     b4e:	bf 92       	push	r11
     b50:	cf 92       	push	r12
     b52:	df 92       	push	r13
     b54:	ef 92       	push	r14
     b56:	ff 92       	push	r15
     b58:	1f 93       	push	r17
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
     b5e:	ec 01       	movw	r28, r24
     b60:	5b 01       	movw	r10, r22
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:139
  
  if (m_txenPin >= 0) {
     b62:	8c 85       	ldd	r24, Y+12	; 0x0c
     b64:	9d 85       	ldd	r25, Y+13	; 0x0d
     b66:	97 fd       	sbrc	r25, 7
     b68:	09 c0       	rjmp	.+18     	; 0xb7c <ModbusSerial::sendPDU(unsigned char*)+0x30>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:141
    
    digitalWrite (m_txenPin, HIGH);
     b6a:	61 e0       	ldi	r22, 0x01	; 1
     b6c:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <digitalWrite>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:142
    delay (1);
     b70:	61 e0       	ldi	r22, 0x01	; 1
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	0e 94 ed 0c 	call	0x19da	; 0x19da <delay>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:146
  }

  //Send slaveId
  m_stream->write (m_slaveId);
     b7c:	8a 85       	ldd	r24, Y+10	; 0x0a
     b7e:	9b 85       	ldd	r25, Y+11	; 0x0b
     b80:	dc 01       	movw	r26, r24
     b82:	ed 91       	ld	r30, X+
     b84:	fc 91       	ld	r31, X
     b86:	01 90       	ld	r0, Z+
     b88:	f0 81       	ld	r31, Z
     b8a:	e0 2d       	mov	r30, r0
     b8c:	6e 85       	ldd	r22, Y+14	; 0x0e
     b8e:	09 95       	icall
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:151

  //Send PDU
  byte i;
  
  for (i = 0 ; i < _len ; i++) {
     b90:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:151 (discriminator 3)
     b92:	28 85       	ldd	r18, Y+8	; 0x08
     b94:	ea 84       	ldd	r14, Y+10	; 0x0a
     b96:	fb 84       	ldd	r15, Y+11	; 0x0b
     b98:	d7 01       	movw	r26, r14
     b9a:	ed 91       	ld	r30, X+
     b9c:	fc 91       	ld	r31, X
     b9e:	c0 80       	ld	r12, Z
     ba0:	d1 80       	ldd	r13, Z+1	; 0x01
     ba2:	12 17       	cp	r17, r18
     ba4:	48 f4       	brcc	.+18     	; 0xbb8 <ModbusSerial::sendPDU(unsigned char*)+0x6c>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:153 (discriminator 2)
    
    m_stream->write (pduframe[i]);
     ba6:	f5 01       	movw	r30, r10
     ba8:	e1 0f       	add	r30, r17
     baa:	f1 1d       	adc	r31, r1
     bac:	60 81       	ld	r22, Z
     bae:	c7 01       	movw	r24, r14
     bb0:	f6 01       	movw	r30, r12
     bb2:	09 95       	icall
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:151 (discriminator 2)
  m_stream->write (m_slaveId);

  //Send PDU
  byte i;
  
  for (i = 0 ; i < _len ; i++) {
     bb4:	1f 5f       	subi	r17, 0xFF	; 255
     bb6:	ed cf       	rjmp	.-38     	; 0xb92 <ModbusSerial::sendPDU(unsigned char*)+0x46>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:157
    
    m_stream->write (pduframe[i]);
  }

  //Send CRC
  word crc = calcCrc (m_slaveId, _frame, _len);
     bb8:	4e 81       	ldd	r20, Y+6	; 0x06
     bba:	5f 81       	ldd	r21, Y+7	; 0x07
     bbc:	6e 85       	ldd	r22, Y+14	; 0x0e
     bbe:	ce 01       	movw	r24, r28
     bc0:	0e 94 46 05 	call	0xa8c	; 0xa8c <ModbusSerial::calcCrc(unsigned char, unsigned char*, unsigned char)>
     bc4:	18 2f       	mov	r17, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:158
  m_stream->write (crc >> 8);
     bc6:	69 2f       	mov	r22, r25
     bc8:	c7 01       	movw	r24, r14
     bca:	f6 01       	movw	r30, r12
     bcc:	09 95       	icall
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:159
  m_stream->write (crc & 0xFF);
     bce:	8a 85       	ldd	r24, Y+10	; 0x0a
     bd0:	9b 85       	ldd	r25, Y+11	; 0x0b
     bd2:	dc 01       	movw	r26, r24
     bd4:	ed 91       	ld	r30, X+
     bd6:	fc 91       	ld	r31, X
     bd8:	01 90       	ld	r0, Z+
     bda:	f0 81       	ld	r31, Z
     bdc:	e0 2d       	mov	r30, r0
     bde:	61 2f       	mov	r22, r17
     be0:	09 95       	icall
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:161

  m_stream->flush();
     be2:	8a 85       	ldd	r24, Y+10	; 0x0a
     be4:	9b 85       	ldd	r25, Y+11	; 0x0b
     be6:	dc 01       	movw	r26, r24
     be8:	ed 91       	ld	r30, X+
     bea:	fc 91       	ld	r31, X
     bec:	06 80       	ldd	r0, Z+6	; 0x06
     bee:	f7 81       	ldd	r31, Z+7	; 0x07
     bf0:	e0 2d       	mov	r30, r0
     bf2:	09 95       	icall
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:162
  delayMicroseconds (m_t35);
     bf4:	89 89       	ldd	r24, Y+17	; 0x11
     bf6:	9a 89       	ldd	r25, Y+18	; 0x12
     bf8:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <delayMicroseconds>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:164

  if (m_txenPin >= 0) {
     bfc:	8c 85       	ldd	r24, Y+12	; 0x0c
     bfe:	9d 85       	ldd	r25, Y+13	; 0x0d
     c00:	97 fd       	sbrc	r25, 7
     c02:	03 c0       	rjmp	.+6      	; 0xc0a <ModbusSerial::sendPDU(unsigned char*)+0xbe>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:166
    
    digitalWrite (m_txenPin, LOW);
     c04:	60 e0       	ldi	r22, 0x00	; 0
     c06:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <digitalWrite>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:169
  }
  return true;
}
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	1f 91       	pop	r17
     c12:	ff 90       	pop	r15
     c14:	ef 90       	pop	r14
     c16:	df 90       	pop	r13
     c18:	cf 90       	pop	r12
     c1a:	bf 90       	pop	r11
     c1c:	af 90       	pop	r10
     c1e:	08 95       	ret

00000c20 <ModbusSerial::task()>:
_ZN12ModbusSerial4taskEv():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:30
    m_t15 = 16500000UL / baud; // 1T * 1.5 = T1.5, 1T = 11 bits
    m_t35 = 38500000UL / baud; // 1T * 3.5 = T3.5, 1T = 11 bits
  }
}

void ModbusSerial::task() {
     c20:	1f 93       	push	r17
     c22:	cf 93       	push	r28
     c24:	df 93       	push	r29
     c26:	ec 01       	movw	r28, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:31
  _len = 0;
     c28:	18 86       	std	Y+8, r1	; 0x08
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:33

  while ( m_stream->available() > _len) {
     c2a:	8a 85       	ldd	r24, Y+10	; 0x0a
     c2c:	9b 85       	ldd	r25, Y+11	; 0x0b
     c2e:	dc 01       	movw	r26, r24
     c30:	ed 91       	ld	r30, X+
     c32:	fc 91       	ld	r31, X
     c34:	00 84       	ldd	r0, Z+8	; 0x08
     c36:	f1 85       	ldd	r31, Z+9	; 0x09
     c38:	e0 2d       	mov	r30, r0
     c3a:	09 95       	icall
     c3c:	48 85       	ldd	r20, Y+8	; 0x08
     c3e:	24 2f       	mov	r18, r20
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	28 17       	cp	r18, r24
     c44:	39 07       	cpc	r19, r25
     c46:	7c f4       	brge	.+30     	; 0xc66 <ModbusSerial::task()+0x46>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:35
    
    _len = m_stream->available();
     c48:	8a 85       	ldd	r24, Y+10	; 0x0a
     c4a:	9b 85       	ldd	r25, Y+11	; 0x0b
     c4c:	dc 01       	movw	r26, r24
     c4e:	ed 91       	ld	r30, X+
     c50:	fc 91       	ld	r31, X
     c52:	00 84       	ldd	r0, Z+8	; 0x08
     c54:	f1 85       	ldd	r31, Z+9	; 0x09
     c56:	e0 2d       	mov	r30, r0
     c58:	09 95       	icall
     c5a:	88 87       	std	Y+8, r24	; 0x08
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:36
    delayMicroseconds (m_t15);
     c5c:	8f 85       	ldd	r24, Y+15	; 0x0f
     c5e:	98 89       	ldd	r25, Y+16	; 0x10
     c60:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <delayMicroseconds>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:33
}

void ModbusSerial::task() {
  _len = 0;

  while ( m_stream->available() > _len) {
     c64:	e2 cf       	rjmp	.-60     	; 0xc2a <ModbusSerial::task()+0xa>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:39
    
    _len = m_stream->available();
    delayMicroseconds (m_t15);
  }

  if (_len == 0) {
     c66:	44 23       	and	r20, r20
     c68:	69 f1       	breq	.+90     	; 0xcc4 <ModbusSerial::task()+0xa4>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:45
    
    return;
  }

  byte i;
  _frame = (byte*) malloc (_len);
     c6a:	c9 01       	movw	r24, r18
     c6c:	0e 94 1c 11 	call	0x2238	; 0x2238 <malloc>
     c70:	9f 83       	std	Y+7, r25	; 0x07
     c72:	8e 83       	std	Y+6, r24	; 0x06
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:47
  
  for (i = 0 ; i < _len ; i++) {
     c74:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:47 (discriminator 3)
     c76:	88 85       	ldd	r24, Y+8	; 0x08
     c78:	18 17       	cp	r17, r24
     c7a:	80 f4       	brcc	.+32     	; 0xc9c <ModbusSerial::task()+0x7c>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:49 (discriminator 2)
    
    _frame[i] = m_stream->read();
     c7c:	8a 85       	ldd	r24, Y+10	; 0x0a
     c7e:	9b 85       	ldd	r25, Y+11	; 0x0b
     c80:	dc 01       	movw	r26, r24
     c82:	ed 91       	ld	r30, X+
     c84:	fc 91       	ld	r31, X
     c86:	02 84       	ldd	r0, Z+10	; 0x0a
     c88:	f3 85       	ldd	r31, Z+11	; 0x0b
     c8a:	e0 2d       	mov	r30, r0
     c8c:	09 95       	icall
     c8e:	ee 81       	ldd	r30, Y+6	; 0x06
     c90:	ff 81       	ldd	r31, Y+7	; 0x07
     c92:	e1 0f       	add	r30, r17
     c94:	f1 1d       	adc	r31, r1
     c96:	80 83       	st	Z, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:47 (discriminator 2)
  }

  byte i;
  _frame = (byte*) malloc (_len);
  
  for (i = 0 ; i < _len ; i++) {
     c98:	1f 5f       	subi	r17, 0xFF	; 255
     c9a:	ed cf       	rjmp	.-38     	; 0xc76 <ModbusSerial::task()+0x56>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:52
    
    _frame[i] = m_stream->read();
  }

  if (receive (_frame)) {
     c9c:	6e 81       	ldd	r22, Y+6	; 0x06
     c9e:	7f 81       	ldd	r23, Y+7	; 0x07
     ca0:	ce 01       	movw	r24, r28
     ca2:	0e 94 65 05 	call	0xaca	; 0xaca <ModbusSerial::receive(unsigned char*)>
     ca6:	88 23       	and	r24, r24
     ca8:	41 f0       	breq	.+16     	; 0xcba <ModbusSerial::task()+0x9a>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:54
    
    if (_reply == MB_REPLY_NORMAL) {
     caa:	89 85       	ldd	r24, Y+9	; 0x09
     cac:	6e 81       	ldd	r22, Y+6	; 0x06
     cae:	7f 81       	ldd	r23, Y+7	; 0x07
     cb0:	83 30       	cpi	r24, 0x03	; 3
     cb2:	61 f4       	brne	.+24     	; 0xccc <ModbusSerial::task()+0xac>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:56
      
      sendPDU (_frame);
     cb4:	ce 01       	movw	r24, r28
     cb6:	0e 94 a6 05 	call	0xb4c	; 0xb4c <ModbusSerial::sendPDU(unsigned char*)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:64
      
      send (_frame);
    }
  }

  free (_frame);
     cba:	8e 81       	ldd	r24, Y+6	; 0x06
     cbc:	9f 81       	ldd	r25, Y+7	; 0x07
     cbe:	0e 94 b8 11 	call	0x2370	; 0x2370 <free>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:65
  _len = 0;
     cc2:	18 86       	std	Y+8, r1	; 0x08
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:66
}
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	1f 91       	pop	r17
     cca:	08 95       	ret
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:58
    
    if (_reply == MB_REPLY_NORMAL) {
      
      sendPDU (_frame);
    }
    else if (_reply == MB_REPLY_ECHO) {
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	a9 f7       	brne	.-22     	; 0xcba <ModbusSerial::task()+0x9a>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Serial\src/ModbusSerial.cpp:60
      
      send (_frame);
     cd0:	ce 01       	movw	r24, r28
     cd2:	0e 94 09 05 	call	0xa12	; 0xa12 <ModbusSerial::send(unsigned char*)>
     cd6:	f1 cf       	rjmp	.-30     	; 0xcba <ModbusSerial::task()+0x9a>

00000cd8 <Modbus::Modbus()>:
_ZN6ModbusC2Ev():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:104
    }
    if (reg->edata) {

      reg->edata->min = min;
      reg->edata->max = max;
      return true;
     cd8:	fc 01       	movw	r30, r24
     cda:	11 82       	std	Z+1, r1	; 0x01
     cdc:	10 82       	st	Z, r1
     cde:	13 82       	std	Z+3, r1	; 0x03
     ce0:	12 82       	std	Z+2, r1	; 0x02
     ce2:	15 82       	std	Z+5, r1	; 0x05
     ce4:	14 82       	std	Z+4, r1	; 0x04
     ce6:	08 95       	ret

00000ce8 <Modbus::searchRegister(unsigned int)>:
_ZN6Modbus14searchRegisterEj():
     ce8:	fc 01       	movw	r30, r24
     cea:	80 81       	ld	r24, Z
     cec:	91 81       	ldd	r25, Z+1	; 0x01
     cee:	00 97       	sbiw	r24, 0x00	; 0
     cf0:	49 f0       	breq	.+18     	; 0xd04 <Modbus::searchRegister(unsigned int)+0x1c>
     cf2:	fc 01       	movw	r30, r24
     cf4:	20 81       	ld	r18, Z
     cf6:	31 81       	ldd	r19, Z+1	; 0x01
     cf8:	26 17       	cp	r18, r22
     cfa:	37 07       	cpc	r19, r23
     cfc:	19 f0       	breq	.+6      	; 0xd04 <Modbus::searchRegister(unsigned int)+0x1c>
     cfe:	86 81       	ldd	r24, Z+6	; 0x06
     d00:	97 81       	ldd	r25, Z+7	; 0x07
     d02:	f5 cf       	rjmp	.-22     	; 0xcee <Modbus::searchRegister(unsigned int)+0x6>
     d04:	08 95       	ret

00000d06 <Modbus::addReg(unsigned int, unsigned int)>:
_ZN6Modbus6addRegEjj():
     d06:	ef 92       	push	r14
     d08:	ff 92       	push	r15
     d0a:	0f 93       	push	r16
     d0c:	1f 93       	push	r17
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
     d12:	ec 01       	movw	r28, r24
     d14:	7b 01       	movw	r14, r22
     d16:	8a 01       	movw	r16, r20
     d18:	88 e0       	ldi	r24, 0x08	; 8
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	0e 94 1c 11 	call	0x2238	; 0x2238 <malloc>
     d20:	fc 01       	movw	r30, r24
     d22:	f1 82       	std	Z+1, r15	; 0x01
     d24:	e0 82       	st	Z, r14
     d26:	13 83       	std	Z+3, r17	; 0x03
     d28:	02 83       	std	Z+2, r16	; 0x02
     d2a:	15 82       	std	Z+5, r1	; 0x05
     d2c:	14 82       	std	Z+4, r1	; 0x04
     d2e:	17 82       	std	Z+7, r1	; 0x07
     d30:	16 82       	std	Z+6, r1	; 0x06
     d32:	88 81       	ld	r24, Y
     d34:	99 81       	ldd	r25, Y+1	; 0x01
     d36:	89 2b       	or	r24, r25
     d38:	59 f4       	brne	.+22     	; 0xd50 <Modbus::addReg(unsigned int, unsigned int)+0x4a>
     d3a:	f9 83       	std	Y+1, r31	; 0x01
     d3c:	e8 83       	st	Y, r30
     d3e:	fb 83       	std	Y+3, r31	; 0x03
     d40:	ea 83       	std	Y+2, r30	; 0x02
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	1f 91       	pop	r17
     d48:	0f 91       	pop	r16
     d4a:	ff 90       	pop	r15
     d4c:	ef 90       	pop	r14
     d4e:	08 95       	ret
     d50:	aa 81       	ldd	r26, Y+2	; 0x02
     d52:	bb 81       	ldd	r27, Y+3	; 0x03
     d54:	17 96       	adiw	r26, 0x07	; 7
     d56:	fc 93       	st	X, r31
     d58:	ee 93       	st	-X, r30
     d5a:	16 97       	sbiw	r26, 0x06	; 6
     d5c:	f0 cf       	rjmp	.-32     	; 0xd3e <Modbus::addReg(unsigned int, unsigned int)+0x38>

00000d5e <Modbus::setReg(unsigned int, unsigned int)>:
_ZN6Modbus6setRegEjj():
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
     d62:	ea 01       	movw	r28, r20
     d64:	0e 94 74 06 	call	0xce8	; 0xce8 <Modbus::searchRegister(unsigned int)>
     d68:	00 97       	sbiw	r24, 0x00	; 0
     d6a:	39 f0       	breq	.+14     	; 0xd7a <Modbus::setReg(unsigned int, unsigned int)+0x1c>
     d6c:	fc 01       	movw	r30, r24
     d6e:	d3 83       	std	Z+3, r29	; 0x03
     d70:	c2 83       	std	Z+2, r28	; 0x02
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	08 95       	ret
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	fb cf       	rjmp	.-10     	; 0xd74 <Modbus::setReg(unsigned int, unsigned int)+0x16>

00000d7e <Modbus::reg(unsigned int)>:
_ZN6Modbus3regEj():
     d7e:	0e 94 74 06 	call	0xce8	; 0xce8 <Modbus::searchRegister(unsigned int)>
     d82:	00 97       	sbiw	r24, 0x00	; 0
     d84:	21 f0       	breq	.+8      	; 0xd8e <Modbus::reg(unsigned int)+0x10>
     d86:	fc 01       	movw	r30, r24
     d88:	82 81       	ldd	r24, Z+2	; 0x02
     d8a:	93 81       	ldd	r25, Z+3	; 0x03
     d8c:	08 95       	ret
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	08 95       	ret

00000d94 <Modbus::regOutOfBounds(unsigned int, unsigned int)>:
_ZN6Modbus14regOutOfBoundsEjj():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:112
  return false;
}

//-------------------------------------------------------------------------------
// private
bool  Modbus::regOutOfBounds (word address, word value) {
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
     d98:	ea 01       	movw	r28, r20
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:115
  TRegister *reg;

  reg = searchRegister (address);
     d9a:	0e 94 74 06 	call	0xce8	; 0xce8 <Modbus::searchRegister(unsigned int)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:117

  if (reg) {
     d9e:	00 97       	sbiw	r24, 0x00	; 0
     da0:	89 f0       	breq	.+34     	; 0xdc4 <Modbus::regOutOfBounds(unsigned int, unsigned int)+0x30>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:119

    if (reg->edata) {
     da2:	dc 01       	movw	r26, r24
     da4:	14 96       	adiw	r26, 0x04	; 4
     da6:	ed 91       	ld	r30, X+
     da8:	fc 91       	ld	r31, X
     daa:	30 97       	sbiw	r30, 0x00	; 0
     dac:	59 f0       	breq	.+22     	; 0xdc4 <Modbus::regOutOfBounds(unsigned int, unsigned int)+0x30>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:121

      return (value < reg->edata->min) || (value > reg->edata->max);
     dae:	80 81       	ld	r24, Z
     db0:	91 81       	ldd	r25, Z+1	; 0x01
     db2:	c8 17       	cp	r28, r24
     db4:	d9 07       	cpc	r29, r25
     db6:	50 f0       	brcs	.+20     	; 0xdcc <Modbus::regOutOfBounds(unsigned int, unsigned int)+0x38>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:121 (discriminator 2)
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	22 81       	ldd	r18, Z+2	; 0x02
     dbc:	33 81       	ldd	r19, Z+3	; 0x03
     dbe:	2c 17       	cp	r18, r28
     dc0:	3d 07       	cpc	r19, r29
     dc2:	08 f0       	brcs	.+2      	; 0xdc6 <Modbus::regOutOfBounds(unsigned int, unsigned int)+0x32>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:124
    }
  }
  return false;
     dc4:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:125
}
     dc6:	df 91       	pop	r29
     dc8:	cf 91       	pop	r28
     dca:	08 95       	ret
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:121

  if (reg) {

    if (reg->edata) {

      return (value < reg->edata->min) || (value > reg->edata->max);
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	fb cf       	rjmp	.-10     	; 0xdc6 <Modbus::regOutOfBounds(unsigned int, unsigned int)+0x32>

00000dd0 <Modbus::exceptionResponse(unsigned char, unsigned char)>:
_ZN6Modbus17exceptionResponseEhh():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:191
  }
}

//-------------------------------------------------------------------------------
// private
void Modbus::exceptionResponse (byte fcode, byte excode) {
     dd0:	0f 93       	push	r16
     dd2:	1f 93       	push	r17
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
     dd8:	ec 01       	movw	r28, r24
     dda:	16 2f       	mov	r17, r22
     ddc:	04 2f       	mov	r16, r20
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:193
  //Clean frame buffer
  free (_frame);
     dde:	8e 81       	ldd	r24, Y+6	; 0x06
     de0:	9f 81       	ldd	r25, Y+7	; 0x07
     de2:	0e 94 b8 11 	call	0x2370	; 0x2370 <free>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:194
  _len = 2;
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	88 87       	std	Y+8, r24	; 0x08
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:195
  _frame = (byte *) malloc (_len);
     dea:	82 e0       	ldi	r24, 0x02	; 2
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	0e 94 1c 11 	call	0x2238	; 0x2238 <malloc>
     df2:	9f 83       	std	Y+7, r25	; 0x07
     df4:	8e 83       	std	Y+6, r24	; 0x06
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:196
  _frame[0] = fcode + 0x80;
     df6:	10 58       	subi	r17, 0x80	; 128
     df8:	fc 01       	movw	r30, r24
     dfa:	10 83       	st	Z, r17
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:197
  _frame[1] = excode;
     dfc:	01 83       	std	Z+1, r16	; 0x01
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:199

  _reply = MB_REPLY_NORMAL;
     dfe:	83 e0       	ldi	r24, 0x03	; 3
     e00:	89 87       	std	Y+9, r24	; 0x09
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:200
}
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	1f 91       	pop	r17
     e08:	0f 91       	pop	r16
     e0a:	08 95       	ret

00000e0c <Modbus::writeSingleRegister(unsigned int, unsigned int)>:
_ZN6Modbus19writeSingleRegisterEjj():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:214
      Register Address  2 Bytes 0x0000 to 0xFFFF
      Register Value    2 Bytes 0x0000 to 0xFFFF
*/
//-------------------------------------------------------------------------------
// private
void Modbus::writeSingleRegister (word reg, word value) {
     e0c:	ef 92       	push	r14
     e0e:	ff 92       	push	r15
     e10:	0f 93       	push	r16
     e12:	1f 93       	push	r17
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	ec 01       	movw	r28, r24
     e1a:	7a 01       	movw	r14, r20
_ZN6Modbus15hregOutOfBoundsEjj():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.h:160
      @param offset register offset (PDU addressing: 0-9999)
      @param value value to check
      @return true if the value is outside the bounds, false otherwise
    */
    inline bool hregOutOfBounds (word offset, word value) {
      return regOutOfBounds (offset + TRegister::HregOffset, value);
     e1c:	8b 01       	movw	r16, r22
     e1e:	0f 5b       	subi	r16, 0xBF	; 191
     e20:	13 46       	sbci	r17, 0x63	; 99
     e22:	b8 01       	movw	r22, r16
     e24:	0e 94 ca 06 	call	0xd94	; 0xd94 <Modbus::regOutOfBounds(unsigned int, unsigned int)>
_ZN6Modbus19writeSingleRegisterEjj():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:217

  if (hregOutOfBounds (reg, value)) {
    exceptionResponse (MB_FC_WRITE_REG, MB_EX_ILLEGAL_VALUE);
     e28:	43 e0       	ldi	r20, 0x03	; 3
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:216
*/
//-------------------------------------------------------------------------------
// private
void Modbus::writeSingleRegister (word reg, word value) {

  if (hregOutOfBounds (reg, value)) {
     e2a:	81 11       	cpse	r24, r1
     e2c:	08 c0       	rjmp	.+16     	; 0xe3e <Modbus::writeSingleRegister(unsigned int, unsigned int)+0x32>
_ZN6Modbus7setHregEjj():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.h:131
      @param offset register offset (PDU addressing: 0-9999)
      @param value new value
      @return true, false if register not found.
    */
    inline bool setHreg (word offset, word value) {
      return setReg (offset + TRegister::HregOffset, value);
     e2e:	a7 01       	movw	r20, r14
     e30:	b8 01       	movw	r22, r16
     e32:	ce 01       	movw	r24, r28
     e34:	0e 94 af 06 	call	0xd5e	; 0xd5e <Modbus::setReg(unsigned int, unsigned int)>
_ZN6Modbus19writeSingleRegisterEjj():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:222
    exceptionResponse (MB_FC_WRITE_REG, MB_EX_ILLEGAL_VALUE);
    return;
  }

  //Check Address and execute (reg exists?)
  if (!setHreg (reg, value)) {
     e38:	81 11       	cpse	r24, r1
     e3a:	0b c0       	rjmp	.+22     	; 0xe52 <Modbus::writeSingleRegister(unsigned int, unsigned int)+0x46>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:223
    exceptionResponse (MB_FC_WRITE_REG, MB_EX_ILLEGAL_ADDRESS);
     e3c:	42 e0       	ldi	r20, 0x02	; 2
     e3e:	66 e0       	ldi	r22, 0x06	; 6
     e40:	ce 01       	movw	r24, r28
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:235
    exceptionResponse (MB_FC_WRITE_REG, MB_EX_SLAVE_FAILURE);
    return;
    }
  */
  _reply = MB_REPLY_ECHO; // reply with received frame
}
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	1f 91       	pop	r17
     e48:	0f 91       	pop	r16
     e4a:	ff 90       	pop	r15
     e4c:	ef 90       	pop	r14
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:223
    return;
  }

  //Check Address and execute (reg exists?)
  if (!setHreg (reg, value)) {
    exceptionResponse (MB_FC_WRITE_REG, MB_EX_ILLEGAL_ADDRESS);
     e4e:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <Modbus::exceptionResponse(unsigned char, unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:234
    if (hreg (reg) != value) {
    exceptionResponse (MB_FC_WRITE_REG, MB_EX_SLAVE_FAILURE);
    return;
    }
  */
  _reply = MB_REPLY_ECHO; // reply with received frame
     e52:	82 e0       	ldi	r24, 0x02	; 2
     e54:	89 87       	std	Y+9, r24	; 0x09
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:235
}
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	1f 91       	pop	r17
     e5c:	0f 91       	pop	r16
     e5e:	ff 90       	pop	r15
     e60:	ef 90       	pop	r14
     e62:	08 95       	ret

00000e64 <Modbus::readRegisters(unsigned int, unsigned int)>:
_ZN6Modbus13readRegistersEjj():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:251
      Register value        N* x 2 Bytes
     N = Quantity of Registers
*/
//-------------------------------------------------------------------------------
// private
void Modbus::readRegisters (word startreg, word numregs) {
     e64:	8f 92       	push	r8
     e66:	9f 92       	push	r9
     e68:	af 92       	push	r10
     e6a:	bf 92       	push	r11
     e6c:	cf 92       	push	r12
     e6e:	df 92       	push	r13
     e70:	ef 92       	push	r14
     e72:	ff 92       	push	r15
     e74:	0f 93       	push	r16
     e76:	1f 93       	push	r17
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:253
  //Check value (numregs)
  if (numregs < 1 || numregs > 125) {
     e7c:	9a 01       	movw	r18, r20
     e7e:	21 50       	subi	r18, 0x01	; 1
     e80:	31 09       	sbc	r19, r1
     e82:	2d 37       	cpi	r18, 0x7D	; 125
     e84:	31 05       	cpc	r19, r1
     e86:	80 f0       	brcs	.+32     	; 0xea8 <Modbus::readRegisters(unsigned int, unsigned int)+0x44>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:254
    exceptionResponse (MB_FC_READ_REGS, MB_EX_ILLEGAL_VALUE);
     e88:	43 e0       	ldi	r20, 0x03	; 3
     e8a:	63 e0       	ldi	r22, 0x03	; 3
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:296
    _frame[3 + i * 2] = val & 0xFF;
    i++;
  }

  _reply = MB_REPLY_NORMAL;
}
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	1f 91       	pop	r17
     e92:	0f 91       	pop	r16
     e94:	ff 90       	pop	r15
     e96:	ef 90       	pop	r14
     e98:	df 90       	pop	r13
     e9a:	cf 90       	pop	r12
     e9c:	bf 90       	pop	r11
     e9e:	af 90       	pop	r10
     ea0:	9f 90       	pop	r9
     ea2:	8f 90       	pop	r8
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:276
  //for each register queried add 2 bytes
  _len = 2 + numregs * 2;

  _frame = (byte *) malloc (_len);
  if (!_frame) {
    exceptionResponse (MB_FC_READ_REGS, MB_EX_SLAVE_FAILURE);
     ea4:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <Modbus::exceptionResponse(unsigned char, unsigned char)>
     ea8:	7a 01       	movw	r14, r20
     eaa:	8b 01       	movw	r16, r22
     eac:	ec 01       	movw	r28, r24
     eae:	5a 01       	movw	r10, r20
     eb0:	a6 0e       	add	r10, r22
     eb2:	b7 1e       	adc	r11, r23
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:253
*/
//-------------------------------------------------------------------------------
// private
void Modbus::readRegisters (word startreg, word numregs) {
  //Check value (numregs)
  if (numregs < 1 || numregs > 125) {
     eb4:	4b 01       	movw	r8, r22
     eb6:	68 01       	movw	r12, r16
     eb8:	8f eb       	ldi	r24, 0xBF	; 191
     eba:	c8 1a       	sub	r12, r24
     ebc:	83 e6       	ldi	r24, 0x63	; 99
     ebe:	d8 0a       	sbc	r13, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:260
    return;
  }

  //Check Address (startreg...startreg + numregs - 1)
  for (word k = 0; k < numregs; k++) {
    if (!searchRegister (startreg + TRegister::HregOffset + k)) {
     ec0:	b4 01       	movw	r22, r8
     ec2:	6f 5b       	subi	r22, 0xBF	; 191
     ec4:	73 46       	sbci	r23, 0x63	; 99
     ec6:	ce 01       	movw	r24, r28
     ec8:	0e 94 74 06 	call	0xce8	; 0xce8 <Modbus::searchRegister(unsigned int)>
     ecc:	89 2b       	or	r24, r25
     ece:	21 f4       	brne	.+8      	; 0xed8 <Modbus::readRegisters(unsigned int, unsigned int)+0x74>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:261
      exceptionResponse (MB_FC_WRITE_REGS, MB_EX_ILLEGAL_ADDRESS);
     ed0:	42 e0       	ldi	r20, 0x02	; 2
     ed2:	60 e1       	ldi	r22, 0x10	; 16
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:276
  //for each register queried add 2 bytes
  _len = 2 + numregs * 2;

  _frame = (byte *) malloc (_len);
  if (!_frame) {
    exceptionResponse (MB_FC_READ_REGS, MB_EX_SLAVE_FAILURE);
     ed4:	ce 01       	movw	r24, r28
     ed6:	da cf       	rjmp	.-76     	; 0xe8c <Modbus::readRegisters(unsigned int, unsigned int)+0x28>
     ed8:	ef ef       	ldi	r30, 0xFF	; 255
     eda:	8e 1a       	sub	r8, r30
     edc:	9e 0a       	sbc	r9, r30
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:259 (discriminator 2)
    exceptionResponse (MB_FC_READ_REGS, MB_EX_ILLEGAL_VALUE);
    return;
  }

  //Check Address (startreg...startreg + numregs - 1)
  for (word k = 0; k < numregs; k++) {
     ede:	a8 14       	cp	r10, r8
     ee0:	b9 04       	cpc	r11, r9
     ee2:	49 f7       	brne	.-46     	; 0xeb6 <Modbus::readRegisters(unsigned int, unsigned int)+0x52>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:267
      return;
    }
  }

  //Clean frame buffer
  free (_frame);
     ee4:	8e 81       	ldd	r24, Y+6	; 0x06
     ee6:	9f 81       	ldd	r25, Y+7	; 0x07
     ee8:	0e 94 b8 11 	call	0x2370	; 0x2370 <free>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:272
  _len = 0;

  //calculate the query reply message length
  //for each register queried add 2 bytes
  _len = 2 + numregs * 2;
     eec:	c7 01       	movw	r24, r14
     eee:	01 96       	adiw	r24, 0x01	; 1
     ef0:	18 2f       	mov	r17, r24
     ef2:	11 0f       	add	r17, r17
     ef4:	18 87       	std	Y+8, r17	; 0x08
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:274

  _frame = (byte *) malloc (_len);
     ef6:	81 2f       	mov	r24, r17
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	0e 94 1c 11 	call	0x2238	; 0x2238 <malloc>
     efe:	9f 83       	std	Y+7, r25	; 0x07
     f00:	8e 83       	std	Y+6, r24	; 0x06
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:275
  if (!_frame) {
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	19 f4       	brne	.+6      	; 0xf0c <Modbus::readRegisters(unsigned int, unsigned int)+0xa8>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:276
    exceptionResponse (MB_FC_READ_REGS, MB_EX_SLAVE_FAILURE);
     f06:	44 e0       	ldi	r20, 0x04	; 4
     f08:	63 e0       	ldi	r22, 0x03	; 3
     f0a:	e4 cf       	rjmp	.-56     	; 0xed4 <Modbus::readRegisters(unsigned int, unsigned int)+0x70>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:280
    return;
  }

  _frame[0] = MB_FC_READ_REGS;
     f0c:	23 e0       	ldi	r18, 0x03	; 3
     f0e:	fc 01       	movw	r30, r24
     f10:	20 83       	st	Z, r18
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:281
  _frame[1] = _len - 2;   //byte count
     f12:	12 50       	subi	r17, 0x02	; 2
     f14:	11 83       	std	Z+1, r17	; 0x01
     f16:	ec 0c       	add	r14, r12
     f18:	fd 1c       	adc	r15, r13
     f1a:	03 e0       	ldi	r16, 0x03	; 3
     f1c:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:285

  word val;
  word i = 0;
  while (numregs--) {
     f1e:	ce 14       	cp	r12, r14
     f20:	df 04       	cpc	r13, r15
     f22:	a9 f0       	breq	.+42     	; 0xf4e <Modbus::readRegisters(unsigned int, unsigned int)+0xea>
_ZN6Modbus4hregEj():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.h:139
      @brief Return the value of a holding register
      @param offset register offset (PDU addressing: 0-9999)
      @return register value
    */
    inline word hreg (word offset) {
      return reg (offset + TRegister::HregOffset);
     f24:	b6 01       	movw	r22, r12
     f26:	ce 01       	movw	r24, r28
     f28:	0e 94 bf 06 	call	0xd7e	; 0xd7e <Modbus::reg(unsigned int)>
_ZN6Modbus13readRegistersEjj():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:289
    //retrieve the value from the register bank for the current register
    val = hreg (startreg + i);
    //write the high byte of the register value
    _frame[2 + i * 2]  = val >> 8;
     f2c:	ee 81       	ldd	r30, Y+6	; 0x06
     f2e:	ff 81       	ldd	r31, Y+7	; 0x07
     f30:	e0 0f       	add	r30, r16
     f32:	f1 1f       	adc	r31, r17
     f34:	31 97       	sbiw	r30, 0x01	; 1
     f36:	90 83       	st	Z, r25
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:291
    //write the low byte of the register value
    _frame[3 + i * 2] = val & 0xFF;
     f38:	ee 81       	ldd	r30, Y+6	; 0x06
     f3a:	ff 81       	ldd	r31, Y+7	; 0x07
     f3c:	e0 0f       	add	r30, r16
     f3e:	f1 1f       	adc	r31, r17
     f40:	80 83       	st	Z, r24
     f42:	ff ef       	ldi	r31, 0xFF	; 255
     f44:	cf 1a       	sub	r12, r31
     f46:	df 0a       	sbc	r13, r31
     f48:	0e 5f       	subi	r16, 0xFE	; 254
     f4a:	1f 4f       	sbci	r17, 0xFF	; 255
     f4c:	e8 cf       	rjmp	.-48     	; 0xf1e <Modbus::readRegisters(unsigned int, unsigned int)+0xba>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:295
    i++;
  }

  _reply = MB_REPLY_NORMAL;
     f4e:	83 e0       	ldi	r24, 0x03	; 3
     f50:	89 87       	std	Y+9, r24	; 0x09
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:296
}
     f52:	df 91       	pop	r29
     f54:	cf 91       	pop	r28
     f56:	1f 91       	pop	r17
     f58:	0f 91       	pop	r16
     f5a:	ff 90       	pop	r15
     f5c:	ef 90       	pop	r14
     f5e:	df 90       	pop	r13
     f60:	cf 90       	pop	r12
     f62:	bf 90       	pop	r11
     f64:	af 90       	pop	r10
     f66:	9f 90       	pop	r9
     f68:	8f 90       	pop	r8
     f6a:	08 95       	ret

00000f6c <Modbus::writeMultipleRegisters(unsigned char*, unsigned int, unsigned int, unsigned char)>:
_ZN6Modbus22writeMultipleRegistersEPhjjh():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:313
      Starting Address      2 Bytes       0x0000 to 0xFFFF
      Quantity of Registers 2 Bytes       1 to 123 (0x7B)
*/
//-------------------------------------------------------------------------------
// private
void Modbus::writeMultipleRegisters (byte *frame, word startreg, word numoutputs, byte bytecount) {
     f6c:	6f 92       	push	r6
     f6e:	7f 92       	push	r7
     f70:	8f 92       	push	r8
     f72:	9f 92       	push	r9
     f74:	af 92       	push	r10
     f76:	bf 92       	push	r11
     f78:	cf 92       	push	r12
     f7a:	df 92       	push	r13
     f7c:	ef 92       	push	r14
     f7e:	ff 92       	push	r15
     f80:	0f 93       	push	r16
     f82:	1f 93       	push	r17
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:315
  //Check value
  if (numoutputs < 1 || numoutputs > 123 || bytecount != 2 * numoutputs) {
     f88:	f9 01       	movw	r30, r18
     f8a:	31 97       	sbiw	r30, 0x01	; 1
     f8c:	eb 37       	cpi	r30, 0x7B	; 123
     f8e:	f1 05       	cpc	r31, r1
     f90:	30 f4       	brcc	.+12     	; 0xf9e <Modbus::writeMultipleRegisters(unsigned char*, unsigned int, unsigned int, unsigned char)+0x32>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:315 (discriminator 1)
     f92:	f9 01       	movw	r30, r18
     f94:	ee 0f       	add	r30, r30
     f96:	ff 1f       	adc	r31, r31
     f98:	0e 17       	cp	r16, r30
     f9a:	1f 06       	cpc	r1, r31
     f9c:	91 f0       	breq	.+36     	; 0xfc2 <Modbus::writeMultipleRegisters(unsigned char*, unsigned int, unsigned int, unsigned char)+0x56>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:316
    exceptionResponse (MB_FC_WRITE_REGS, MB_EX_ILLEGAL_VALUE);
     f9e:	43 e0       	ldi	r20, 0x03	; 3
     fa0:	60 e1       	ldi	r22, 0x10	; 16
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:356
    setHreg (startreg + i, val);
    i++;
  }

  _reply = MB_REPLY_NORMAL;
}
     fa2:	df 91       	pop	r29
     fa4:	cf 91       	pop	r28
     fa6:	1f 91       	pop	r17
     fa8:	0f 91       	pop	r16
     faa:	ff 90       	pop	r15
     fac:	ef 90       	pop	r14
     fae:	df 90       	pop	r13
     fb0:	cf 90       	pop	r12
     fb2:	bf 90       	pop	r11
     fb4:	af 90       	pop	r10
     fb6:	9f 90       	pop	r9
     fb8:	8f 90       	pop	r8
     fba:	7f 90       	pop	r7
     fbc:	6f 90       	pop	r6
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:348
  word val;
  word i = 0;
  while (numoutputs--) {
    val = (word) frame[6 + i * 2] << 8 | (word) frame[7 + i * 2];
    if (hregOutOfBounds (startreg + i, val)) {
      exceptionResponse (MB_FC_WRITE_REG, MB_EX_ILLEGAL_VALUE);
     fbe:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <Modbus::exceptionResponse(unsigned char, unsigned char)>
     fc2:	89 01       	movw	r16, r18
     fc4:	7a 01       	movw	r14, r20
     fc6:	3b 01       	movw	r6, r22
     fc8:	ec 01       	movw	r28, r24
     fca:	59 01       	movw	r10, r18
     fcc:	a4 0e       	add	r10, r20
     fce:	b5 1e       	adc	r11, r21
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:315
*/
//-------------------------------------------------------------------------------
// private
void Modbus::writeMultipleRegisters (byte *frame, word startreg, word numoutputs, byte bytecount) {
  //Check value
  if (numoutputs < 1 || numoutputs > 123 || bytecount != 2 * numoutputs) {
     fd0:	4a 01       	movw	r8, r20
     fd2:	6a 01       	movw	r12, r20
     fd4:	8f eb       	ldi	r24, 0xBF	; 191
     fd6:	c8 1a       	sub	r12, r24
     fd8:	83 e6       	ldi	r24, 0x63	; 99
     fda:	d8 0a       	sbc	r13, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:322
    return;
  }

  //Check Address (startreg...startreg + numregs - 1)
  for (word k = 0; k < numoutputs; k++) {
    if (!searchRegister (startreg + TRegister::HregOffset + k)) {
     fdc:	b4 01       	movw	r22, r8
     fde:	6f 5b       	subi	r22, 0xBF	; 191
     fe0:	73 46       	sbci	r23, 0x63	; 99
     fe2:	ce 01       	movw	r24, r28
     fe4:	0e 94 74 06 	call	0xce8	; 0xce8 <Modbus::searchRegister(unsigned int)>
     fe8:	89 2b       	or	r24, r25
     fea:	21 f4       	brne	.+8      	; 0xff4 <Modbus::writeMultipleRegisters(unsigned char*, unsigned int, unsigned int, unsigned char)+0x88>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:323
      exceptionResponse (MB_FC_WRITE_REGS, MB_EX_ILLEGAL_ADDRESS);
     fec:	42 e0       	ldi	r20, 0x02	; 2
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:333
  //Clean frame buffer
  free (_frame);
  _len = 5;
  _frame = (byte *) malloc (_len);
  if (!_frame) {
    exceptionResponse (MB_FC_WRITE_REGS, MB_EX_SLAVE_FAILURE);
     fee:	60 e1       	ldi	r22, 0x10	; 16
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:348
  word val;
  word i = 0;
  while (numoutputs--) {
    val = (word) frame[6 + i * 2] << 8 | (word) frame[7 + i * 2];
    if (hregOutOfBounds (startreg + i, val)) {
      exceptionResponse (MB_FC_WRITE_REG, MB_EX_ILLEGAL_VALUE);
     ff0:	ce 01       	movw	r24, r28
     ff2:	d7 cf       	rjmp	.-82     	; 0xfa2 <Modbus::writeMultipleRegisters(unsigned char*, unsigned int, unsigned int, unsigned char)+0x36>
     ff4:	9f ef       	ldi	r25, 0xFF	; 255
     ff6:	89 1a       	sub	r8, r25
     ff8:	99 0a       	sbc	r9, r25
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:321 (discriminator 2)
    exceptionResponse (MB_FC_WRITE_REGS, MB_EX_ILLEGAL_VALUE);
    return;
  }

  //Check Address (startreg...startreg + numregs - 1)
  for (word k = 0; k < numoutputs; k++) {
     ffa:	8a 14       	cp	r8, r10
     ffc:	9b 04       	cpc	r9, r11
     ffe:	71 f7       	brne	.-36     	; 0xfdc <Modbus::writeMultipleRegisters(unsigned char*, unsigned int, unsigned int, unsigned char)+0x70>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:329
      return;
    }
  }

  //Clean frame buffer
  free (_frame);
    1000:	8e 81       	ldd	r24, Y+6	; 0x06
    1002:	9f 81       	ldd	r25, Y+7	; 0x07
    1004:	0e 94 b8 11 	call	0x2370	; 0x2370 <free>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:330
  _len = 5;
    1008:	85 e0       	ldi	r24, 0x05	; 5
    100a:	88 87       	std	Y+8, r24	; 0x08
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:331
  _frame = (byte *) malloc (_len);
    100c:	85 e0       	ldi	r24, 0x05	; 5
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	0e 94 1c 11 	call	0x2238	; 0x2238 <malloc>
    1014:	fc 01       	movw	r30, r24
    1016:	9f 83       	std	Y+7, r25	; 0x07
    1018:	8e 83       	std	Y+6, r24	; 0x06
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:332
  if (!_frame) {
    101a:	89 2b       	or	r24, r25
    101c:	11 f4       	brne	.+4      	; 0x1022 <Modbus::writeMultipleRegisters(unsigned char*, unsigned int, unsigned int, unsigned char)+0xb6>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:333
    exceptionResponse (MB_FC_WRITE_REGS, MB_EX_SLAVE_FAILURE);
    101e:	44 e0       	ldi	r20, 0x04	; 4
    1020:	e6 cf       	rjmp	.-52     	; 0xfee <Modbus::writeMultipleRegisters(unsigned char*, unsigned int, unsigned int, unsigned char)+0x82>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:337
    return;
  }

  _frame[0] = MB_FC_WRITE_REGS;
    1022:	80 e1       	ldi	r24, 0x10	; 16
    1024:	80 83       	st	Z, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:338
  _frame[1] = startreg >> 8;
    1026:	f1 82       	std	Z+1, r15	; 0x01
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:339
  _frame[2] = startreg & 0x00FF;
    1028:	e2 82       	std	Z+2, r14	; 0x02
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:340
  _frame[3] = numoutputs >> 8;
    102a:	13 82       	std	Z+3, r1	; 0x03
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:341
  _frame[4] = numoutputs & 0x00FF;
    102c:	04 83       	std	Z+4, r16	; 0x04
    102e:	73 01       	movw	r14, r6
    1030:	0c 0d       	add	r16, r12
    1032:	1d 1d       	adc	r17, r13
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:345

  word val;
  word i = 0;
  while (numoutputs--) {
    1034:	c0 16       	cp	r12, r16
    1036:	d1 06       	cpc	r13, r17
    1038:	e9 f0       	breq	.+58     	; 0x1074 <Modbus::writeMultipleRegisters(unsigned char*, unsigned int, unsigned int, unsigned char)+0x108>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:346
    val = (word) frame[6 + i * 2] << 8 | (word) frame[7 + i * 2];
    103a:	f7 01       	movw	r30, r14
    103c:	86 80       	ldd	r8, Z+6	; 0x06
    103e:	87 81       	ldd	r24, Z+7	; 0x07
    1040:	98 2c       	mov	r9, r8
    1042:	88 2e       	mov	r8, r24
_ZN6Modbus15hregOutOfBoundsEjj():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.h:160
      @param offset register offset (PDU addressing: 0-9999)
      @param value value to check
      @return true if the value is outside the bounds, false otherwise
    */
    inline bool hregOutOfBounds (word offset, word value) {
      return regOutOfBounds (offset + TRegister::HregOffset, value);
    1044:	a4 01       	movw	r20, r8
    1046:	b6 01       	movw	r22, r12
    1048:	ce 01       	movw	r24, r28
    104a:	0e 94 ca 06 	call	0xd94	; 0xd94 <Modbus::regOutOfBounds(unsigned int, unsigned int)>
    104e:	56 01       	movw	r10, r12
    1050:	ff ef       	ldi	r31, 0xFF	; 255
    1052:	af 1a       	sub	r10, r31
    1054:	bf 0a       	sbc	r11, r31
    1056:	92 e0       	ldi	r25, 0x02	; 2
    1058:	e9 0e       	add	r14, r25
    105a:	f1 1c       	adc	r15, r1
_ZN6Modbus22writeMultipleRegistersEPhjjh():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:347
    if (hregOutOfBounds (startreg + i, val)) {
    105c:	88 23       	and	r24, r24
    105e:	19 f0       	breq	.+6      	; 0x1066 <Modbus::writeMultipleRegisters(unsigned char*, unsigned int, unsigned int, unsigned char)+0xfa>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:348
      exceptionResponse (MB_FC_WRITE_REG, MB_EX_ILLEGAL_VALUE);
    1060:	43 e0       	ldi	r20, 0x03	; 3
    1062:	66 e0       	ldi	r22, 0x06	; 6
    1064:	c5 cf       	rjmp	.-118    	; 0xff0 <Modbus::writeMultipleRegisters(unsigned char*, unsigned int, unsigned int, unsigned char)+0x84>
_ZN6Modbus7setHregEjj():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.h:131
      @param offset register offset (PDU addressing: 0-9999)
      @param value new value
      @return true, false if register not found.
    */
    inline bool setHreg (word offset, word value) {
      return setReg (offset + TRegister::HregOffset, value);
    1066:	a4 01       	movw	r20, r8
    1068:	b6 01       	movw	r22, r12
    106a:	ce 01       	movw	r24, r28
    106c:	0e 94 af 06 	call	0xd5e	; 0xd5e <Modbus::setReg(unsigned int, unsigned int)>
    1070:	65 01       	movw	r12, r10
    1072:	e0 cf       	rjmp	.-64     	; 0x1034 <Modbus::writeMultipleRegisters(unsigned char*, unsigned int, unsigned int, unsigned char)+0xc8>
_ZN6Modbus22writeMultipleRegistersEPhjjh():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:355
    }
    setHreg (startreg + i, val);
    i++;
  }

  _reply = MB_REPLY_NORMAL;
    1074:	83 e0       	ldi	r24, 0x03	; 3
    1076:	89 87       	std	Y+9, r24	; 0x09
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:356
}
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	1f 91       	pop	r17
    107e:	0f 91       	pop	r16
    1080:	ff 90       	pop	r15
    1082:	ef 90       	pop	r14
    1084:	df 90       	pop	r13
    1086:	cf 90       	pop	r12
    1088:	bf 90       	pop	r11
    108a:	af 90       	pop	r10
    108c:	9f 90       	pop	r9
    108e:	8f 90       	pop	r8
    1090:	7f 90       	pop	r7
    1092:	6f 90       	pop	r6
    1094:	08 95       	ret

00001096 <Modbus::readCoils(unsigned int, unsigned int)>:
_ZN6Modbus9readCoilsEjj():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:374
      Coil Status       n Byte  n = N or N+1
     N = Quantity of Outputs / 8, if the remainder is different of 0 -> N = N+1
*/
//-------------------------------------------------------------------------------
// private
void Modbus::readCoils (word startreg, word numregs) {
    1096:	2f 92       	push	r2
    1098:	3f 92       	push	r3
    109a:	4f 92       	push	r4
    109c:	5f 92       	push	r5
    109e:	7f 92       	push	r7
    10a0:	8f 92       	push	r8
    10a2:	9f 92       	push	r9
    10a4:	af 92       	push	r10
    10a6:	bf 92       	push	r11
    10a8:	cf 92       	push	r12
    10aa:	df 92       	push	r13
    10ac:	ef 92       	push	r14
    10ae:	ff 92       	push	r15
    10b0:	0f 93       	push	r16
    10b2:	1f 93       	push	r17
    10b4:	cf 93       	push	r28
    10b6:	df 93       	push	r29
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:376
  //Check value (numregs)
  if (numregs < 1 || numregs > 2000) {
    10b8:	9a 01       	movw	r18, r20
    10ba:	21 50       	subi	r18, 0x01	; 1
    10bc:	31 09       	sbc	r19, r1
    10be:	20 3d       	cpi	r18, 0xD0	; 208
    10c0:	37 40       	sbci	r19, 0x07	; 7
    10c2:	a8 f0       	brcs	.+42     	; 0x10ee <Modbus::readCoils(unsigned int, unsigned int)+0x58>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:377
    exceptionResponse (MB_FC_READ_COILS, MB_EX_ILLEGAL_VALUE);
    10c4:	43 e0       	ldi	r20, 0x03	; 3
    10c6:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:435
    //increment the register
    startreg++;
  }

  _reply = MB_REPLY_NORMAL;
}
    10c8:	df 91       	pop	r29
    10ca:	cf 91       	pop	r28
    10cc:	1f 91       	pop	r17
    10ce:	0f 91       	pop	r16
    10d0:	ff 90       	pop	r15
    10d2:	ef 90       	pop	r14
    10d4:	df 90       	pop	r13
    10d6:	cf 90       	pop	r12
    10d8:	bf 90       	pop	r11
    10da:	af 90       	pop	r10
    10dc:	9f 90       	pop	r9
    10de:	8f 90       	pop	r8
    10e0:	7f 90       	pop	r7
    10e2:	5f 90       	pop	r5
    10e4:	4f 90       	pop	r4
    10e6:	3f 90       	pop	r3
    10e8:	2f 90       	pop	r2
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:407
    _len++;  //Add 1 to the message length for the partial byte.
  }

  _frame = (byte *) malloc (_len);
  if (!_frame) {
    exceptionResponse (MB_FC_READ_COILS, MB_EX_SLAVE_FAILURE);
    10ea:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <Modbus::exceptionResponse(unsigned char, unsigned char)>
    10ee:	8a 01       	movw	r16, r20
    10f0:	6b 01       	movw	r12, r22
    10f2:	ec 01       	movw	r28, r24
    10f4:	5a 01       	movw	r10, r20
    10f6:	ff ef       	ldi	r31, 0xFF	; 255
    10f8:	af 1a       	sub	r10, r31
    10fa:	bf 0a       	sbc	r11, r31
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:376
*/
//-------------------------------------------------------------------------------
// private
void Modbus::readCoils (word startreg, word numregs) {
  //Check value (numregs)
  if (numregs < 1 || numregs > 2000) {
    10fc:	ee 24       	eor	r14, r14
    10fe:	e3 94       	inc	r14
    1100:	f1 2c       	mov	r15, r1
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:388
  //when you have more then one datapoint configured from same type.
  // epsilonrt -> We absolutely must not return values that do not exist !!

  //Check Address (startreg...startreg + numregs - 1)
  for (word k = 0; k < numregs; k++) {
    if (!searchRegister (startreg + TRegister::CoilOffset + k)) {
    1102:	b6 01       	movw	r22, r12
    1104:	6e 0d       	add	r22, r14
    1106:	7f 1d       	adc	r23, r15
    1108:	ce 01       	movw	r24, r28
    110a:	0e 94 74 06 	call	0xce8	; 0xce8 <Modbus::searchRegister(unsigned int)>
    110e:	89 2b       	or	r24, r25
    1110:	21 f4       	brne	.+8      	; 0x111a <Modbus::readCoils(unsigned int, unsigned int)+0x84>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:389
      exceptionResponse (MB_FC_WRITE_REGS, MB_EX_ILLEGAL_ADDRESS);
    1112:	42 e0       	ldi	r20, 0x02	; 2
    1114:	60 e1       	ldi	r22, 0x10	; 16
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:407
    _len++;  //Add 1 to the message length for the partial byte.
  }

  _frame = (byte *) malloc (_len);
  if (!_frame) {
    exceptionResponse (MB_FC_READ_COILS, MB_EX_SLAVE_FAILURE);
    1116:	ce 01       	movw	r24, r28
    1118:	d7 cf       	rjmp	.-82     	; 0x10c8 <Modbus::readCoils(unsigned int, unsigned int)+0x32>
    111a:	3f ef       	ldi	r19, 0xFF	; 255
    111c:	e3 1a       	sub	r14, r19
    111e:	f3 0a       	sbc	r15, r19
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:387 (discriminator 2)
  //I think that ScadaBR request more than one in the single request
  //when you have more then one datapoint configured from same type.
  // epsilonrt -> We absolutely must not return values that do not exist !!

  //Check Address (startreg...startreg + numregs - 1)
  for (word k = 0; k < numregs; k++) {
    1120:	ae 14       	cp	r10, r14
    1122:	bf 04       	cpc	r11, r15
    1124:	71 f7       	brne	.-36     	; 0x1102 <Modbus::readCoils(unsigned int, unsigned int)+0x6c>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:395
      return;
    }
  }

  //Clean frame buffer
  free (_frame);
    1126:	8e 81       	ldd	r24, Y+6	; 0x06
    1128:	9f 81       	ldd	r25, Y+7	; 0x07
    112a:	0e 94 b8 11 	call	0x2370	; 0x2370 <free>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:400
  _len = 0;

  //Determine the message length = function type, byte count and
  //for each group of 8 registers the message length increases by 1
  _len = 2 + numregs / 8;
    112e:	c8 01       	movw	r24, r16
    1130:	63 e0       	ldi	r22, 0x03	; 3
    1132:	96 95       	lsr	r25
    1134:	87 95       	ror	r24
    1136:	6a 95       	dec	r22
    1138:	e1 f7       	brne	.-8      	; 0x1132 <Modbus::readCoils(unsigned int, unsigned int)+0x9c>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:401
  if (numregs % 8) {
    113a:	07 70       	andi	r16, 0x07	; 7
    113c:	11 27       	eor	r17, r17
    113e:	01 2b       	or	r16, r17
    1140:	71 f4       	brne	.+28     	; 0x115e <Modbus::readCoils(unsigned int, unsigned int)+0xc8>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:400
  free (_frame);
  _len = 0;

  //Determine the message length = function type, byte count and
  //for each group of 8 registers the message length increases by 1
  _len = 2 + numregs / 8;
    1142:	8e 5f       	subi	r24, 0xFE	; 254
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:402
  if (numregs % 8) {
    _len++;  //Add 1 to the message length for the partial byte.
    1144:	88 87       	std	Y+8, r24	; 0x08
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:405
  }

  _frame = (byte *) malloc (_len);
    1146:	18 85       	ldd	r17, Y+8	; 0x08
    1148:	81 2f       	mov	r24, r17
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	0e 94 1c 11 	call	0x2238	; 0x2238 <malloc>
    1150:	9f 83       	std	Y+7, r25	; 0x07
    1152:	8e 83       	std	Y+6, r24	; 0x06
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:406
  if (!_frame) {
    1154:	00 97       	sbiw	r24, 0x00	; 0
    1156:	29 f4       	brne	.+10     	; 0x1162 <Modbus::readCoils(unsigned int, unsigned int)+0xcc>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:407
    exceptionResponse (MB_FC_READ_COILS, MB_EX_SLAVE_FAILURE);
    1158:	44 e0       	ldi	r20, 0x04	; 4
    115a:	61 e0       	ldi	r22, 0x01	; 1
    115c:	dc cf       	rjmp	.-72     	; 0x1116 <Modbus::readCoils(unsigned int, unsigned int)+0x80>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:402

  //Determine the message length = function type, byte count and
  //for each group of 8 registers the message length increases by 1
  _len = 2 + numregs / 8;
  if (numregs % 8) {
    _len++;  //Add 1 to the message length for the partial byte.
    115e:	8d 5f       	subi	r24, 0xFD	; 253
    1160:	f1 cf       	rjmp	.-30     	; 0x1144 <Modbus::readCoils(unsigned int, unsigned int)+0xae>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:411
  if (!_frame) {
    exceptionResponse (MB_FC_READ_COILS, MB_EX_SLAVE_FAILURE);
    return;
  }

  _frame[0] = MB_FC_READ_COILS;
    1162:	21 e0       	ldi	r18, 0x01	; 1
    1164:	fc 01       	movw	r30, r24
    1166:	20 83       	st	Z, r18
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:412
  _frame[1] = _len - 2; //byte count (_len - function code and byte count)
    1168:	12 50       	subi	r17, 0x02	; 2
    116a:	11 83       	std	Z+1, r17	; 0x01
    116c:	01 e0       	ldi	r16, 0x01	; 1
    116e:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:414

  byte bitn = 0;
    1170:	71 2c       	mov	r7, r1
    1172:	81 2c       	mov	r8, r1
    1174:	91 2c       	mov	r9, r1
    1176:	54 01       	movw	r10, r8
    1178:	83 94       	inc	r8
_ZN6Modbus4coilEj():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.h:246
      @brief Return the value of a coil
      @param offset register offset (PDU addressing: 0-9999)
      @return coil value
    */
    inline bool coil (word offset) {
      return (reg (offset + TRegister::CoilOffset) == 0xFF00);
    117a:	b6 01       	movw	r22, r12
    117c:	60 0f       	add	r22, r16
    117e:	71 1f       	adc	r23, r17
    1180:	ce 01       	movw	r24, r28
    1182:	0e 94 bf 06 	call	0xd7e	; 0xd7e <Modbus::reg(unsigned int)>
    1186:	14 01       	movw	r2, r8
    1188:	25 01       	movw	r4, r10
    118a:	07 2c       	mov	r0, r7
    118c:	04 c0       	rjmp	.+8      	; 0x1196 <Modbus::readCoils(unsigned int, unsigned int)+0x100>
    118e:	22 0c       	add	r2, r2
    1190:	33 1c       	adc	r3, r3
    1192:	44 1c       	adc	r4, r4
    1194:	55 1c       	adc	r5, r5
    1196:	0a 94       	dec	r0
    1198:	d2 f7       	brpl	.-12     	; 0x118e <Modbus::readCoils(unsigned int, unsigned int)+0xf8>
_ZN6Modbus9readCoilsEjj():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:418
  word totregs = numregs;
  word i;
  while (numregs--) {
    i = (totregs - numregs) / 8;
    119a:	98 01       	movw	r18, r16
    119c:	43 e0       	ldi	r20, 0x03	; 3
    119e:	36 95       	lsr	r19
    11a0:	27 95       	ror	r18
    11a2:	4a 95       	dec	r20
    11a4:	e1 f7       	brne	.-8      	; 0x119e <Modbus::readCoils(unsigned int, unsigned int)+0x108>
    11a6:	2e 5f       	subi	r18, 0xFE	; 254
    11a8:	3f 4f       	sbci	r19, 0xFF	; 255
    11aa:	ee 81       	ldd	r30, Y+6	; 0x06
    11ac:	ff 81       	ldd	r31, Y+7	; 0x07
    11ae:	e2 0f       	add	r30, r18
    11b0:	f3 1f       	adc	r31, r19
    11b2:	20 81       	ld	r18, Z
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:419
    if (coil (startreg)) {
    11b4:	81 15       	cp	r24, r1
    11b6:	9f 4f       	sbci	r25, 0xFF	; 255
    11b8:	01 f5       	brne	.+64     	; 0x11fa <Modbus::readCoils(unsigned int, unsigned int)+0x164>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:420
      bitSet (_frame[2 + i], bitn);
    11ba:	22 2a       	or	r2, r18
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:423
    }
    else {
      bitClear (_frame[2 + i], bitn);
    11bc:	20 82       	st	Z, r2
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:426
    }
    //increment the bit index
    bitn++;
    11be:	73 94       	inc	r7
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:427
    if (bitn == 8) {
    11c0:	88 e0       	ldi	r24, 0x08	; 8
    11c2:	78 12       	cpse	r7, r24
    11c4:	01 c0       	rjmp	.+2      	; 0x11c8 <Modbus::readCoils(unsigned int, unsigned int)+0x132>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:428
      bitn = 0;
    11c6:	71 2c       	mov	r7, r1
    11c8:	0f 5f       	subi	r16, 0xFF	; 255
    11ca:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:417
  _frame[1] = _len - 2; //byte count (_len - function code and byte count)

  byte bitn = 0;
  word totregs = numregs;
  word i;
  while (numregs--) {
    11cc:	0e 15       	cp	r16, r14
    11ce:	1f 05       	cpc	r17, r15
    11d0:	a1 f6       	brne	.-88     	; 0x117a <Modbus::readCoils(unsigned int, unsigned int)+0xe4>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:434
    }
    //increment the register
    startreg++;
  }

  _reply = MB_REPLY_NORMAL;
    11d2:	83 e0       	ldi	r24, 0x03	; 3
    11d4:	89 87       	std	Y+9, r24	; 0x09
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:435
}
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	1f 91       	pop	r17
    11dc:	0f 91       	pop	r16
    11de:	ff 90       	pop	r15
    11e0:	ef 90       	pop	r14
    11e2:	df 90       	pop	r13
    11e4:	cf 90       	pop	r12
    11e6:	bf 90       	pop	r11
    11e8:	af 90       	pop	r10
    11ea:	9f 90       	pop	r9
    11ec:	8f 90       	pop	r8
    11ee:	7f 90       	pop	r7
    11f0:	5f 90       	pop	r5
    11f2:	4f 90       	pop	r4
    11f4:	3f 90       	pop	r3
    11f6:	2f 90       	pop	r2
    11f8:	08 95       	ret
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:423
    i = (totregs - numregs) / 8;
    if (coil (startreg)) {
      bitSet (_frame[2 + i], bitn);
    }
    else {
      bitClear (_frame[2 + i], bitn);
    11fa:	20 94       	com	r2
    11fc:	22 22       	and	r2, r18
    11fe:	de cf       	rjmp	.-68     	; 0x11bc <Modbus::readCoils(unsigned int, unsigned int)+0x126>

00001200 <Modbus::readInputStatus(unsigned int, unsigned int)>:
_ZN6Modbus15readInputStatusEjj():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:451
     N = Quantity of Inputs / 8 if the remainder is different of 0  N = N+1
  Error
*/
//-------------------------------------------------------------------------------
// private
void Modbus::readInputStatus (word startreg, word numregs) {
    1200:	2f 92       	push	r2
    1202:	3f 92       	push	r3
    1204:	4f 92       	push	r4
    1206:	5f 92       	push	r5
    1208:	7f 92       	push	r7
    120a:	8f 92       	push	r8
    120c:	9f 92       	push	r9
    120e:	af 92       	push	r10
    1210:	bf 92       	push	r11
    1212:	cf 92       	push	r12
    1214:	df 92       	push	r13
    1216:	ef 92       	push	r14
    1218:	ff 92       	push	r15
    121a:	0f 93       	push	r16
    121c:	1f 93       	push	r17
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:453
  //Check value (numregs)
  if (numregs < 0x0001 || numregs > 0x07D0) {
    1222:	9a 01       	movw	r18, r20
    1224:	21 50       	subi	r18, 0x01	; 1
    1226:	31 09       	sbc	r19, r1
    1228:	20 3d       	cpi	r18, 0xD0	; 208
    122a:	37 40       	sbci	r19, 0x07	; 7
    122c:	a8 f0       	brcs	.+42     	; 0x1258 <Modbus::readInputStatus(unsigned int, unsigned int)+0x58>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:454
    exceptionResponse (MB_FC_READ_INPUT_STAT, MB_EX_ILLEGAL_VALUE);
    122e:	43 e0       	ldi	r20, 0x03	; 3
    1230:	62 e0       	ldi	r22, 0x02	; 2
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:507
    //increment the register
    startreg++;
  }

  _reply = MB_REPLY_NORMAL;
}
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	1f 91       	pop	r17
    1238:	0f 91       	pop	r16
    123a:	ff 90       	pop	r15
    123c:	ef 90       	pop	r14
    123e:	df 90       	pop	r13
    1240:	cf 90       	pop	r12
    1242:	bf 90       	pop	r11
    1244:	af 90       	pop	r10
    1246:	9f 90       	pop	r9
    1248:	8f 90       	pop	r8
    124a:	7f 90       	pop	r7
    124c:	5f 90       	pop	r5
    124e:	4f 90       	pop	r4
    1250:	3f 90       	pop	r3
    1252:	2f 90       	pop	r2
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:479
    _len++;  //Add 1 to the message length for the partial byte.
  }

  _frame = (byte *) malloc (_len);
  if (!_frame) {
    exceptionResponse (MB_FC_READ_INPUT_STAT, MB_EX_SLAVE_FAILURE);
    1254:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <Modbus::exceptionResponse(unsigned char, unsigned char)>
    1258:	8a 01       	movw	r16, r20
    125a:	7b 01       	movw	r14, r22
    125c:	ec 01       	movw	r28, r24
    125e:	5a 01       	movw	r10, r20
    1260:	a6 0e       	add	r10, r22
    1262:	b7 1e       	adc	r11, r23
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:453
*/
//-------------------------------------------------------------------------------
// private
void Modbus::readInputStatus (word startreg, word numregs) {
  //Check value (numregs)
  if (numregs < 0x0001 || numregs > 0x07D0) {
    1264:	6b 01       	movw	r12, r22
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:460
    return;
  }

  //Check Address (startreg...startreg + numregs - 1)
  for (word k = 0; k < numregs; k++) {
    if (!searchRegister (startreg + TRegister::IstsOffset + k)) {
    1266:	b6 01       	movw	r22, r12
    1268:	6f 5e       	subi	r22, 0xEF	; 239
    126a:	78 4d       	sbci	r23, 0xD8	; 216
    126c:	ce 01       	movw	r24, r28
    126e:	0e 94 74 06 	call	0xce8	; 0xce8 <Modbus::searchRegister(unsigned int)>
    1272:	89 2b       	or	r24, r25
    1274:	21 f4       	brne	.+8      	; 0x127e <Modbus::readInputStatus(unsigned int, unsigned int)+0x7e>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:461
      exceptionResponse (MB_FC_WRITE_REGS, MB_EX_ILLEGAL_ADDRESS);
    1276:	42 e0       	ldi	r20, 0x02	; 2
    1278:	60 e1       	ldi	r22, 0x10	; 16
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:479
    _len++;  //Add 1 to the message length for the partial byte.
  }

  _frame = (byte *) malloc (_len);
  if (!_frame) {
    exceptionResponse (MB_FC_READ_INPUT_STAT, MB_EX_SLAVE_FAILURE);
    127a:	ce 01       	movw	r24, r28
    127c:	da cf       	rjmp	.-76     	; 0x1232 <Modbus::readInputStatus(unsigned int, unsigned int)+0x32>
    127e:	ff ef       	ldi	r31, 0xFF	; 255
    1280:	cf 1a       	sub	r12, r31
    1282:	df 0a       	sbc	r13, r31
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:459 (discriminator 2)
    exceptionResponse (MB_FC_READ_INPUT_STAT, MB_EX_ILLEGAL_VALUE);
    return;
  }

  //Check Address (startreg...startreg + numregs - 1)
  for (word k = 0; k < numregs; k++) {
    1284:	ac 14       	cp	r10, r12
    1286:	bd 04       	cpc	r11, r13
    1288:	71 f7       	brne	.-36     	; 0x1266 <Modbus::readInputStatus(unsigned int, unsigned int)+0x66>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:467
      return;
    }
  }

  //Clean frame buffer
  free (_frame);
    128a:	8e 81       	ldd	r24, Y+6	; 0x06
    128c:	9f 81       	ldd	r25, Y+7	; 0x07
    128e:	0e 94 b8 11 	call	0x2370	; 0x2370 <free>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:472
  _len = 0;

  //Determine the message length = function type, byte count and
  //for each group of 8 registers the message length increases by 1
  _len = 2 + numregs / 8;
    1292:	c8 01       	movw	r24, r16
    1294:	73 e0       	ldi	r23, 0x03	; 3
    1296:	96 95       	lsr	r25
    1298:	87 95       	ror	r24
    129a:	7a 95       	dec	r23
    129c:	e1 f7       	brne	.-8      	; 0x1296 <Modbus::readInputStatus(unsigned int, unsigned int)+0x96>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:473
  if (numregs % 8) {
    129e:	98 01       	movw	r18, r16
    12a0:	27 70       	andi	r18, 0x07	; 7
    12a2:	33 27       	eor	r19, r19
    12a4:	23 2b       	or	r18, r19
    12a6:	71 f4       	brne	.+28     	; 0x12c4 <Modbus::readInputStatus(unsigned int, unsigned int)+0xc4>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:472
  free (_frame);
  _len = 0;

  //Determine the message length = function type, byte count and
  //for each group of 8 registers the message length increases by 1
  _len = 2 + numregs / 8;
    12a8:	8e 5f       	subi	r24, 0xFE	; 254
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:474
  if (numregs % 8) {
    _len++;  //Add 1 to the message length for the partial byte.
    12aa:	88 87       	std	Y+8, r24	; 0x08
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:477
  }

  _frame = (byte *) malloc (_len);
    12ac:	d8 84       	ldd	r13, Y+8	; 0x08
    12ae:	8d 2d       	mov	r24, r13
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	0e 94 1c 11 	call	0x2238	; 0x2238 <malloc>
    12b6:	9f 83       	std	Y+7, r25	; 0x07
    12b8:	8e 83       	std	Y+6, r24	; 0x06
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:478
  if (!_frame) {
    12ba:	00 97       	sbiw	r24, 0x00	; 0
    12bc:	29 f4       	brne	.+10     	; 0x12c8 <Modbus::readInputStatus(unsigned int, unsigned int)+0xc8>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:479
    exceptionResponse (MB_FC_READ_INPUT_STAT, MB_EX_SLAVE_FAILURE);
    12be:	44 e0       	ldi	r20, 0x04	; 4
    12c0:	62 e0       	ldi	r22, 0x02	; 2
    12c2:	db cf       	rjmp	.-74     	; 0x127a <Modbus::readInputStatus(unsigned int, unsigned int)+0x7a>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:474

  //Determine the message length = function type, byte count and
  //for each group of 8 registers the message length increases by 1
  _len = 2 + numregs / 8;
  if (numregs % 8) {
    _len++;  //Add 1 to the message length for the partial byte.
    12c4:	8d 5f       	subi	r24, 0xFD	; 253
    12c6:	f1 cf       	rjmp	.-30     	; 0x12aa <Modbus::readInputStatus(unsigned int, unsigned int)+0xaa>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:483
  if (!_frame) {
    exceptionResponse (MB_FC_READ_INPUT_STAT, MB_EX_SLAVE_FAILURE);
    return;
  }

  _frame[0] = MB_FC_READ_INPUT_STAT;
    12c8:	22 e0       	ldi	r18, 0x02	; 2
    12ca:	fc 01       	movw	r30, r24
    12cc:	20 83       	st	Z, r18
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:484
  _frame[1] = _len - 2;
    12ce:	da 94       	dec	r13
    12d0:	da 94       	dec	r13
    12d2:	d1 82       	std	Z+1, r13	; 0x01
    12d4:	0f 5f       	subi	r16, 0xFF	; 255
    12d6:	1f 4f       	sbci	r17, 0xFF	; 255
    12d8:	cc 24       	eor	r12, r12
    12da:	c3 94       	inc	r12
    12dc:	d1 2c       	mov	r13, r1
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:486

  byte bitn = 0;
    12de:	71 2c       	mov	r7, r1
_ZN6Modbus4istsEj():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.h:254
      @brief Return the value of a discrete input
      @param offset input offset (PDU addressing: 0-9999)
      @return input value
    */
    inline bool ists (word offset) {
      return (reg (offset + TRegister::IstsOffset) == 0xFF00);
    12e0:	f0 ef       	ldi	r31, 0xF0	; 240
    12e2:	ef 1a       	sub	r14, r31
    12e4:	f8 ed       	ldi	r31, 0xD8	; 216
    12e6:	ff 0a       	sbc	r15, r31
    12e8:	81 2c       	mov	r8, r1
    12ea:	91 2c       	mov	r9, r1
    12ec:	54 01       	movw	r10, r8
    12ee:	83 94       	inc	r8
    12f0:	b7 01       	movw	r22, r14
    12f2:	6c 0d       	add	r22, r12
    12f4:	7d 1d       	adc	r23, r13
    12f6:	ce 01       	movw	r24, r28
    12f8:	0e 94 bf 06 	call	0xd7e	; 0xd7e <Modbus::reg(unsigned int)>
    12fc:	14 01       	movw	r2, r8
    12fe:	25 01       	movw	r4, r10
    1300:	07 2c       	mov	r0, r7
    1302:	04 c0       	rjmp	.+8      	; 0x130c <Modbus::readInputStatus(unsigned int, unsigned int)+0x10c>
    1304:	22 0c       	add	r2, r2
    1306:	33 1c       	adc	r3, r3
    1308:	44 1c       	adc	r4, r4
    130a:	55 1c       	adc	r5, r5
    130c:	0a 94       	dec	r0
    130e:	d2 f7       	brpl	.-12     	; 0x1304 <Modbus::readInputStatus(unsigned int, unsigned int)+0x104>
_ZN6Modbus15readInputStatusEjj():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:490
  word totregs = numregs;
  word i;
  while (numregs--) {
    i = (totregs - numregs) / 8;
    1310:	96 01       	movw	r18, r12
    1312:	43 e0       	ldi	r20, 0x03	; 3
    1314:	36 95       	lsr	r19
    1316:	27 95       	ror	r18
    1318:	4a 95       	dec	r20
    131a:	e1 f7       	brne	.-8      	; 0x1314 <Modbus::readInputStatus(unsigned int, unsigned int)+0x114>
    131c:	2e 5f       	subi	r18, 0xFE	; 254
    131e:	3f 4f       	sbci	r19, 0xFF	; 255
    1320:	ee 81       	ldd	r30, Y+6	; 0x06
    1322:	ff 81       	ldd	r31, Y+7	; 0x07
    1324:	e2 0f       	add	r30, r18
    1326:	f3 1f       	adc	r31, r19
    1328:	20 81       	ld	r18, Z
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:491
    if (ists (startreg)) {
    132a:	81 15       	cp	r24, r1
    132c:	9f 4f       	sbci	r25, 0xFF	; 255
    132e:	09 f5       	brne	.+66     	; 0x1372 <Modbus::readInputStatus(unsigned int, unsigned int)+0x172>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:492
      bitSet (_frame[2 + i], bitn);
    1330:	22 2a       	or	r2, r18
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:495
    }
    else {
      bitClear (_frame[2 + i], bitn);
    1332:	20 82       	st	Z, r2
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:498
    }
    //increment the bit index
    bitn++;
    1334:	73 94       	inc	r7
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:499
    if (bitn == 8) {
    1336:	88 e0       	ldi	r24, 0x08	; 8
    1338:	78 12       	cpse	r7, r24
    133a:	01 c0       	rjmp	.+2      	; 0x133e <Modbus::readInputStatus(unsigned int, unsigned int)+0x13e>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:500
      bitn = 0;
    133c:	71 2c       	mov	r7, r1
    133e:	ef ef       	ldi	r30, 0xFF	; 255
    1340:	ce 1a       	sub	r12, r30
    1342:	de 0a       	sbc	r13, r30
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:489
  _frame[1] = _len - 2;

  byte bitn = 0;
  word totregs = numregs;
  word i;
  while (numregs--) {
    1344:	c0 16       	cp	r12, r16
    1346:	d1 06       	cpc	r13, r17
    1348:	99 f6       	brne	.-90     	; 0x12f0 <Modbus::readInputStatus(unsigned int, unsigned int)+0xf0>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:506
    }
    //increment the register
    startreg++;
  }

  _reply = MB_REPLY_NORMAL;
    134a:	83 e0       	ldi	r24, 0x03	; 3
    134c:	89 87       	std	Y+9, r24	; 0x09
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:507
}
    134e:	df 91       	pop	r29
    1350:	cf 91       	pop	r28
    1352:	1f 91       	pop	r17
    1354:	0f 91       	pop	r16
    1356:	ff 90       	pop	r15
    1358:	ef 90       	pop	r14
    135a:	df 90       	pop	r13
    135c:	cf 90       	pop	r12
    135e:	bf 90       	pop	r11
    1360:	af 90       	pop	r10
    1362:	9f 90       	pop	r9
    1364:	8f 90       	pop	r8
    1366:	7f 90       	pop	r7
    1368:	5f 90       	pop	r5
    136a:	4f 90       	pop	r4
    136c:	3f 90       	pop	r3
    136e:	2f 90       	pop	r2
    1370:	08 95       	ret
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:495
    i = (totregs - numregs) / 8;
    if (ists (startreg)) {
      bitSet (_frame[2 + i], bitn);
    }
    else {
      bitClear (_frame[2 + i], bitn);
    1372:	20 94       	com	r2
    1374:	22 22       	and	r2, r18
    1376:	dd cf       	rjmp	.-70     	; 0x1332 <Modbus::readInputStatus(unsigned int, unsigned int)+0x132>

00001378 <Modbus::readInputRegisters(unsigned int, unsigned int)>:
_ZN6Modbus18readInputRegistersEjj():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:522
      Input Registers             N* x 2 Bytes
     N = Quantity of Input Registers
*/
//-------------------------------------------------------------------------------
// private
void Modbus::readInputRegisters (word startreg, word numregs) {
    1378:	8f 92       	push	r8
    137a:	9f 92       	push	r9
    137c:	af 92       	push	r10
    137e:	bf 92       	push	r11
    1380:	cf 92       	push	r12
    1382:	df 92       	push	r13
    1384:	ef 92       	push	r14
    1386:	ff 92       	push	r15
    1388:	0f 93       	push	r16
    138a:	1f 93       	push	r17
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:524
  //Check value (numregs)
  if (numregs < 0x0001 || numregs > 0x007D) {
    1390:	9a 01       	movw	r18, r20
    1392:	21 50       	subi	r18, 0x01	; 1
    1394:	31 09       	sbc	r19, r1
    1396:	2d 37       	cpi	r18, 0x7D	; 125
    1398:	31 05       	cpc	r19, r1
    139a:	80 f0       	brcs	.+32     	; 0x13bc <Modbus::readInputRegisters(unsigned int, unsigned int)+0x44>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:525
    exceptionResponse (MB_FC_READ_INPUT_REGS, MB_EX_ILLEGAL_VALUE);
    139c:	43 e0       	ldi	r20, 0x03	; 3
    139e:	64 e0       	ldi	r22, 0x04	; 4
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:567
    _frame[3 + i * 2] = val & 0xFF;
    i++;
  }

  _reply = MB_REPLY_NORMAL;
}
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	1f 91       	pop	r17
    13a6:	0f 91       	pop	r16
    13a8:	ff 90       	pop	r15
    13aa:	ef 90       	pop	r14
    13ac:	df 90       	pop	r13
    13ae:	cf 90       	pop	r12
    13b0:	bf 90       	pop	r11
    13b2:	af 90       	pop	r10
    13b4:	9f 90       	pop	r9
    13b6:	8f 90       	pop	r8
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:547
  //for each register queried add 2 bytes
  _len = 2 + numregs * 2;

  _frame = (byte *) malloc (_len);
  if (!_frame) {
    exceptionResponse (MB_FC_READ_INPUT_REGS, MB_EX_SLAVE_FAILURE);
    13b8:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <Modbus::exceptionResponse(unsigned char, unsigned char)>
    13bc:	7a 01       	movw	r14, r20
    13be:	8b 01       	movw	r16, r22
    13c0:	ec 01       	movw	r28, r24
    13c2:	5a 01       	movw	r10, r20
    13c4:	a6 0e       	add	r10, r22
    13c6:	b7 1e       	adc	r11, r23
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:524
*/
//-------------------------------------------------------------------------------
// private
void Modbus::readInputRegisters (word startreg, word numregs) {
  //Check value (numregs)
  if (numregs < 0x0001 || numregs > 0x007D) {
    13c8:	4b 01       	movw	r8, r22
    13ca:	68 01       	movw	r12, r16
    13cc:	8f ec       	ldi	r24, 0xCF	; 207
    13ce:	c8 1a       	sub	r12, r24
    13d0:	8a e8       	ldi	r24, 0x8A	; 138
    13d2:	d8 0a       	sbc	r13, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:531
    return;
  }

  //Check Address (startreg...startreg + numregs - 1)
  for (word k = 0; k < numregs; k++) {
    if (!searchRegister (startreg + TRegister::IregOffset + k)) {
    13d4:	b4 01       	movw	r22, r8
    13d6:	6f 5c       	subi	r22, 0xCF	; 207
    13d8:	7a 48       	sbci	r23, 0x8A	; 138
    13da:	ce 01       	movw	r24, r28
    13dc:	0e 94 74 06 	call	0xce8	; 0xce8 <Modbus::searchRegister(unsigned int)>
    13e0:	89 2b       	or	r24, r25
    13e2:	21 f4       	brne	.+8      	; 0x13ec <Modbus::readInputRegisters(unsigned int, unsigned int)+0x74>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:532
      exceptionResponse (MB_FC_WRITE_REGS, MB_EX_ILLEGAL_ADDRESS);
    13e4:	42 e0       	ldi	r20, 0x02	; 2
    13e6:	60 e1       	ldi	r22, 0x10	; 16
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:547
  //for each register queried add 2 bytes
  _len = 2 + numregs * 2;

  _frame = (byte *) malloc (_len);
  if (!_frame) {
    exceptionResponse (MB_FC_READ_INPUT_REGS, MB_EX_SLAVE_FAILURE);
    13e8:	ce 01       	movw	r24, r28
    13ea:	da cf       	rjmp	.-76     	; 0x13a0 <Modbus::readInputRegisters(unsigned int, unsigned int)+0x28>
    13ec:	ef ef       	ldi	r30, 0xFF	; 255
    13ee:	8e 1a       	sub	r8, r30
    13f0:	9e 0a       	sbc	r9, r30
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:530 (discriminator 2)
    exceptionResponse (MB_FC_READ_INPUT_REGS, MB_EX_ILLEGAL_VALUE);
    return;
  }

  //Check Address (startreg...startreg + numregs - 1)
  for (word k = 0; k < numregs; k++) {
    13f2:	a8 14       	cp	r10, r8
    13f4:	b9 04       	cpc	r11, r9
    13f6:	49 f7       	brne	.-46     	; 0x13ca <Modbus::readInputRegisters(unsigned int, unsigned int)+0x52>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:538
      return;
    }
  }

  //Clean frame buffer
  free (_frame);
    13f8:	8e 81       	ldd	r24, Y+6	; 0x06
    13fa:	9f 81       	ldd	r25, Y+7	; 0x07
    13fc:	0e 94 b8 11 	call	0x2370	; 0x2370 <free>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:543
  _len = 0;

  //calculate the query reply message length
  //for each register queried add 2 bytes
  _len = 2 + numregs * 2;
    1400:	c7 01       	movw	r24, r14
    1402:	01 96       	adiw	r24, 0x01	; 1
    1404:	18 2f       	mov	r17, r24
    1406:	11 0f       	add	r17, r17
    1408:	18 87       	std	Y+8, r17	; 0x08
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:545

  _frame = (byte *) malloc (_len);
    140a:	81 2f       	mov	r24, r17
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	0e 94 1c 11 	call	0x2238	; 0x2238 <malloc>
    1412:	9f 83       	std	Y+7, r25	; 0x07
    1414:	8e 83       	std	Y+6, r24	; 0x06
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:546
  if (!_frame) {
    1416:	00 97       	sbiw	r24, 0x00	; 0
    1418:	19 f4       	brne	.+6      	; 0x1420 <Modbus::readInputRegisters(unsigned int, unsigned int)+0xa8>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:547
    exceptionResponse (MB_FC_READ_INPUT_REGS, MB_EX_SLAVE_FAILURE);
    141a:	44 e0       	ldi	r20, 0x04	; 4
    141c:	64 e0       	ldi	r22, 0x04	; 4
    141e:	e4 cf       	rjmp	.-56     	; 0x13e8 <Modbus::readInputRegisters(unsigned int, unsigned int)+0x70>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:551
    return;
  }

  _frame[0] = MB_FC_READ_INPUT_REGS;
    1420:	24 e0       	ldi	r18, 0x04	; 4
    1422:	fc 01       	movw	r30, r24
    1424:	20 83       	st	Z, r18
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:552
  _frame[1] = _len - 2;
    1426:	12 50       	subi	r17, 0x02	; 2
    1428:	11 83       	std	Z+1, r17	; 0x01
    142a:	ec 0c       	add	r14, r12
    142c:	fd 1c       	adc	r15, r13
    142e:	03 e0       	ldi	r16, 0x03	; 3
    1430:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:556

  word val;
  word i = 0;
  while (numregs--) {
    1432:	ce 14       	cp	r12, r14
    1434:	df 04       	cpc	r13, r15
    1436:	a9 f0       	breq	.+42     	; 0x1462 <Modbus::readInputRegisters(unsigned int, unsigned int)+0xea>
_ZN6Modbus4iregEj():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.h:262
      @brief Return the value of an input register
      @param offset register offset (PDU addressing: 0-9999)
      @return register value
    */
    inline word ireg (word offset) {
      return reg (offset + TRegister::IregOffset);
    1438:	b6 01       	movw	r22, r12
    143a:	ce 01       	movw	r24, r28
    143c:	0e 94 bf 06 	call	0xd7e	; 0xd7e <Modbus::reg(unsigned int)>
_ZN6Modbus18readInputRegistersEjj():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:560
    //retrieve the value from the register bank for the current register
    val = ireg (startreg + i);
    //write the high byte of the register value
    _frame[2 + i * 2]  = val >> 8;
    1440:	ee 81       	ldd	r30, Y+6	; 0x06
    1442:	ff 81       	ldd	r31, Y+7	; 0x07
    1444:	e0 0f       	add	r30, r16
    1446:	f1 1f       	adc	r31, r17
    1448:	31 97       	sbiw	r30, 0x01	; 1
    144a:	90 83       	st	Z, r25
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:562
    //write the low byte of the register value
    _frame[3 + i * 2] = val & 0xFF;
    144c:	ee 81       	ldd	r30, Y+6	; 0x06
    144e:	ff 81       	ldd	r31, Y+7	; 0x07
    1450:	e0 0f       	add	r30, r16
    1452:	f1 1f       	adc	r31, r17
    1454:	80 83       	st	Z, r24
    1456:	ff ef       	ldi	r31, 0xFF	; 255
    1458:	cf 1a       	sub	r12, r31
    145a:	df 0a       	sbc	r13, r31
    145c:	0e 5f       	subi	r16, 0xFE	; 254
    145e:	1f 4f       	sbci	r17, 0xFF	; 255
    1460:	e8 cf       	rjmp	.-48     	; 0x1432 <Modbus::readInputRegisters(unsigned int, unsigned int)+0xba>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:566
    i++;
  }

  _reply = MB_REPLY_NORMAL;
    1462:	83 e0       	ldi	r24, 0x03	; 3
    1464:	89 87       	std	Y+9, r24	; 0x09
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:567
}
    1466:	df 91       	pop	r29
    1468:	cf 91       	pop	r28
    146a:	1f 91       	pop	r17
    146c:	0f 91       	pop	r16
    146e:	ff 90       	pop	r15
    1470:	ef 90       	pop	r14
    1472:	df 90       	pop	r13
    1474:	cf 90       	pop	r12
    1476:	bf 90       	pop	r11
    1478:	af 90       	pop	r10
    147a:	9f 90       	pop	r9
    147c:	8f 90       	pop	r8
    147e:	08 95       	ret

00001480 <Modbus::writeSingleCoil(unsigned int, unsigned int)>:
_ZN6Modbus15writeSingleCoilEjj():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:581
      Output Address  2 Bytes 0x0000 to 0xFFFF
      Output Value    2 Bytes 0x0000 or 0xFF00
*/
//-------------------------------------------------------------------------------
// private
void Modbus::writeSingleCoil (word reg, word status) {
    1480:	cf 93       	push	r28
    1482:	df 93       	push	r29
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:583
  //Check value (status)
  if (status != 0xFF00 && status != 0x0000) {
    1484:	41 15       	cp	r20, r1
    1486:	2f ef       	ldi	r18, 0xFF	; 255
    1488:	52 07       	cpc	r21, r18
    148a:	49 f0       	breq	.+18     	; 0x149e <Modbus::writeSingleCoil(unsigned int, unsigned int)+0x1e>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:583 (discriminator 1)
    148c:	41 15       	cp	r20, r1
    148e:	51 05       	cpc	r21, r1
    1490:	31 f0       	breq	.+12     	; 0x149e <Modbus::writeSingleCoil(unsigned int, unsigned int)+0x1e>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:584
    exceptionResponse (MB_FC_WRITE_COIL, MB_EX_ILLEGAL_VALUE);
    1492:	43 e0       	ldi	r20, 0x03	; 3
    1494:	65 e0       	ldi	r22, 0x05	; 5
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:603
    return;
  }
  */

  _reply = MB_REPLY_ECHO; // reply with received frame
}
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:590
    return;
  }

  //Check Address and execute (reg exists?)
  if (!setCoil (reg, status != 0)) {
    exceptionResponse (MB_FC_WRITE_COIL, MB_EX_ILLEGAL_ADDRESS);
    149a:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <Modbus::exceptionResponse(unsigned char, unsigned char)>
    149e:	ec 01       	movw	r28, r24
_ZN6Modbus7setCoilEjb():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.h:218
      @param offset register offset (PDU addressing: 0-9999)
      @param value new value
      @return true, false if coil not found.
    */
    inline bool setCoil (word offset, bool value) {
      return setReg (offset + TRegister::CoilOffset, value ? 0xFF00 : 0x0000);
    14a0:	6f 5f       	subi	r22, 0xFF	; 255
    14a2:	7f 4f       	sbci	r23, 0xFF	; 255
    14a4:	0e 94 af 06 	call	0xd5e	; 0xd5e <Modbus::setReg(unsigned int, unsigned int)>
_ZN6Modbus15writeSingleCoilEjj():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:589
    exceptionResponse (MB_FC_WRITE_COIL, MB_EX_ILLEGAL_VALUE);
    return;
  }

  //Check Address and execute (reg exists?)
  if (!setCoil (reg, status != 0)) {
    14a8:	81 11       	cpse	r24, r1
    14aa:	04 c0       	rjmp	.+8      	; 0x14b4 <Modbus::writeSingleCoil(unsigned int, unsigned int)+0x34>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:590
    exceptionResponse (MB_FC_WRITE_COIL, MB_EX_ILLEGAL_ADDRESS);
    14ac:	42 e0       	ldi	r20, 0x02	; 2
    14ae:	65 e0       	ldi	r22, 0x05	; 5
    14b0:	ce 01       	movw	r24, r28
    14b2:	f1 cf       	rjmp	.-30     	; 0x1496 <Modbus::writeSingleCoil(unsigned int, unsigned int)+0x16>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:602
    exceptionResponse (MB_FC_WRITE_COIL, MB_EX_SLAVE_FAILURE);
    return;
  }
  */

  _reply = MB_REPLY_ECHO; // reply with received frame
    14b4:	82 e0       	ldi	r24, 0x02	; 2
    14b6:	89 87       	std	Y+9, r24	; 0x09
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:603
}
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	08 95       	ret

000014be <Modbus::writeMultipleCoils(unsigned char*, unsigned int, unsigned int, unsigned char)>:
_ZN6Modbus18writeMultipleCoilsEPhjjh():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:619
      Starting Address    2 Bytes 0x0000 to 0xFFFF
      Quantity of Outputs 2 Bytes 0x0001 to 0x07B0
*/
//-------------------------------------------------------------------------------
// private
void Modbus::writeMultipleCoils (byte *frame, word startreg, word numoutputs, byte bytecount) {
    14be:	8f 92       	push	r8
    14c0:	9f 92       	push	r9
    14c2:	af 92       	push	r10
    14c4:	bf 92       	push	r11
    14c6:	cf 92       	push	r12
    14c8:	df 92       	push	r13
    14ca:	ef 92       	push	r14
    14cc:	ff 92       	push	r15
    14ce:	0f 93       	push	r16
    14d0:	1f 93       	push	r17
    14d2:	cf 93       	push	r28
    14d4:	df 93       	push	r29
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:621
  //Check value
  word bytecount_calc = numoutputs / 8;
    14d6:	f9 01       	movw	r30, r18
    14d8:	a3 e0       	ldi	r26, 0x03	; 3
    14da:	f6 95       	lsr	r31
    14dc:	e7 95       	ror	r30
    14de:	aa 95       	dec	r26
    14e0:	e1 f7       	brne	.-8      	; 0x14da <Modbus::writeMultipleCoils(unsigned char*, unsigned int, unsigned int, unsigned char)+0x1c>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:622
  if (numoutputs % 8) {
    14e2:	d9 01       	movw	r26, r18
    14e4:	a7 70       	andi	r26, 0x07	; 7
    14e6:	bb 27       	eor	r27, r27
    14e8:	ab 2b       	or	r26, r27
    14ea:	09 f0       	breq	.+2      	; 0x14ee <Modbus::writeMultipleCoils(unsigned char*, unsigned int, unsigned int, unsigned char)+0x30>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:623
    bytecount_calc++;
    14ec:	31 96       	adiw	r30, 0x01	; 1
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:625
  }
  if (numoutputs < 0x0001 || numoutputs > 0x07B0 || bytecount != bytecount_calc) {
    14ee:	d9 01       	movw	r26, r18
    14f0:	11 97       	sbiw	r26, 0x01	; 1
    14f2:	a0 3b       	cpi	r26, 0xB0	; 176
    14f4:	b7 40       	sbci	r27, 0x07	; 7
    14f6:	18 f4       	brcc	.+6      	; 0x14fe <Modbus::writeMultipleCoils(unsigned char*, unsigned int, unsigned int, unsigned char)+0x40>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:625 (discriminator 1)
    14f8:	0e 17       	cp	r16, r30
    14fa:	1f 06       	cpc	r1, r31
    14fc:	81 f0       	breq	.+32     	; 0x151e <Modbus::writeMultipleCoils(unsigned char*, unsigned int, unsigned int, unsigned char)+0x60>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:626
    exceptionResponse (MB_FC_WRITE_COILS, MB_EX_ILLEGAL_VALUE);
    14fe:	43 e0       	ldi	r20, 0x03	; 3
    1500:	6f e0       	ldi	r22, 0x0F	; 15
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:669
    //increment the register
    startreg++;
  }

  _reply = MB_REPLY_NORMAL;
}
    1502:	df 91       	pop	r29
    1504:	cf 91       	pop	r28
    1506:	1f 91       	pop	r17
    1508:	0f 91       	pop	r16
    150a:	ff 90       	pop	r15
    150c:	ef 90       	pop	r14
    150e:	df 90       	pop	r13
    1510:	cf 90       	pop	r12
    1512:	bf 90       	pop	r11
    1514:	af 90       	pop	r10
    1516:	9f 90       	pop	r9
    1518:	8f 90       	pop	r8
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:643
  //Clean frame buffer
  free (_frame);
  _len = 5;
  _frame = (byte *) malloc (_len);
  if (!_frame) {
    exceptionResponse (MB_FC_WRITE_COILS, MB_EX_SLAVE_FAILURE);
    151a:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <Modbus::exceptionResponse(unsigned char, unsigned char)>
    151e:	89 01       	movw	r16, r18
    1520:	7a 01       	movw	r14, r20
    1522:	4b 01       	movw	r8, r22
    1524:	ec 01       	movw	r28, r24
    1526:	59 01       	movw	r10, r18
    1528:	8f ef       	ldi	r24, 0xFF	; 255
    152a:	a8 1a       	sub	r10, r24
    152c:	b8 0a       	sbc	r11, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:625
  //Check value
  word bytecount_calc = numoutputs / 8;
  if (numoutputs % 8) {
    bytecount_calc++;
  }
  if (numoutputs < 0x0001 || numoutputs > 0x07B0 || bytecount != bytecount_calc) {
    152e:	cc 24       	eor	r12, r12
    1530:	c3 94       	inc	r12
    1532:	d1 2c       	mov	r13, r1
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:632
    return;
  }

  //Check Address (startreg...startreg + numregs)
  for (word k = 0; k < numoutputs; k++) {
    if (!searchRegister (startreg + TRegister::CoilOffset + k)) {
    1534:	b6 01       	movw	r22, r12
    1536:	6e 0d       	add	r22, r14
    1538:	7f 1d       	adc	r23, r15
    153a:	ce 01       	movw	r24, r28
    153c:	0e 94 74 06 	call	0xce8	; 0xce8 <Modbus::searchRegister(unsigned int)>
    1540:	89 2b       	or	r24, r25
    1542:	21 f4       	brne	.+8      	; 0x154c <Modbus::writeMultipleCoils(unsigned char*, unsigned int, unsigned int, unsigned char)+0x8e>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:633
      exceptionResponse (MB_FC_WRITE_COILS, MB_EX_ILLEGAL_ADDRESS);
    1544:	42 e0       	ldi	r20, 0x02	; 2
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:643
  //Clean frame buffer
  free (_frame);
  _len = 5;
  _frame = (byte *) malloc (_len);
  if (!_frame) {
    exceptionResponse (MB_FC_WRITE_COILS, MB_EX_SLAVE_FAILURE);
    1546:	6f e0       	ldi	r22, 0x0F	; 15
    1548:	ce 01       	movw	r24, r28
    154a:	db cf       	rjmp	.-74     	; 0x1502 <Modbus::writeMultipleCoils(unsigned char*, unsigned int, unsigned int, unsigned char)+0x44>
    154c:	8f ef       	ldi	r24, 0xFF	; 255
    154e:	c8 1a       	sub	r12, r24
    1550:	d8 0a       	sbc	r13, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:631 (discriminator 2)
    exceptionResponse (MB_FC_WRITE_COILS, MB_EX_ILLEGAL_VALUE);
    return;
  }

  //Check Address (startreg...startreg + numregs)
  for (word k = 0; k < numoutputs; k++) {
    1552:	ac 14       	cp	r10, r12
    1554:	bd 04       	cpc	r11, r13
    1556:	71 f7       	brne	.-36     	; 0x1534 <Modbus::writeMultipleCoils(unsigned char*, unsigned int, unsigned int, unsigned char)+0x76>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:639
      return;
    }
  }

  //Clean frame buffer
  free (_frame);
    1558:	8e 81       	ldd	r24, Y+6	; 0x06
    155a:	9f 81       	ldd	r25, Y+7	; 0x07
    155c:	0e 94 b8 11 	call	0x2370	; 0x2370 <free>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:640
  _len = 5;
    1560:	85 e0       	ldi	r24, 0x05	; 5
    1562:	88 87       	std	Y+8, r24	; 0x08
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:641
  _frame = (byte *) malloc (_len);
    1564:	85 e0       	ldi	r24, 0x05	; 5
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	0e 94 1c 11 	call	0x2238	; 0x2238 <malloc>
    156c:	fc 01       	movw	r30, r24
    156e:	9f 83       	std	Y+7, r25	; 0x07
    1570:	8e 83       	std	Y+6, r24	; 0x06
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:642
  if (!_frame) {
    1572:	89 2b       	or	r24, r25
    1574:	11 f4       	brne	.+4      	; 0x157a <Modbus::writeMultipleCoils(unsigned char*, unsigned int, unsigned int, unsigned char)+0xbc>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:643
    exceptionResponse (MB_FC_WRITE_COILS, MB_EX_SLAVE_FAILURE);
    1576:	44 e0       	ldi	r20, 0x04	; 4
    1578:	e6 cf       	rjmp	.-52     	; 0x1546 <Modbus::writeMultipleCoils(unsigned char*, unsigned int, unsigned int, unsigned char)+0x88>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:647
    return;
  }

  _frame[0] = MB_FC_WRITE_COILS;
    157a:	8f e0       	ldi	r24, 0x0F	; 15
    157c:	80 83       	st	Z, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:648
  _frame[1] = startreg >> 8;
    157e:	f1 82       	std	Z+1, r15	; 0x01
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:649
  _frame[2] = startreg & 0x00FF;
    1580:	e2 82       	std	Z+2, r14	; 0x02
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:650
  _frame[3] = numoutputs >> 8;
    1582:	13 83       	std	Z+3, r17	; 0x03
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:651
  _frame[4] = numoutputs & 0x00FF;
    1584:	04 83       	std	Z+4, r16	; 0x04
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:653

  byte bitn = 0;
    1586:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:651

  _frame[0] = MB_FC_WRITE_COILS;
  _frame[1] = startreg >> 8;
  _frame[2] = startreg & 0x00FF;
  _frame[3] = numoutputs >> 8;
  _frame[4] = numoutputs & 0x00FF;
    1588:	aa 24       	eor	r10, r10
    158a:	a3 94       	inc	r10
    158c:	b1 2c       	mov	r11, r1
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:657

  byte bitn = 0;
  word totoutputs = numoutputs;
  word i;
  while (numoutputs--) {
    i = (totoutputs - numoutputs) / 8;
    158e:	f5 01       	movw	r30, r10
    1590:	83 e0       	ldi	r24, 0x03	; 3
    1592:	f6 95       	lsr	r31
    1594:	e7 95       	ror	r30
    1596:	8a 95       	dec	r24
    1598:	e1 f7       	brne	.-8      	; 0x1592 <Modbus::writeMultipleCoils(unsigned char*, unsigned int, unsigned int, unsigned char)+0xd4>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:658
    setCoil (startreg, bitRead (frame[6 + i], bitn));
    159a:	e8 0d       	add	r30, r8
    159c:	f9 1d       	adc	r31, r9
    159e:	86 81       	ldd	r24, Z+6	; 0x06
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	01 2e       	mov	r0, r17
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <Modbus::writeMultipleCoils(unsigned char*, unsigned int, unsigned int, unsigned char)+0xec>
    15a6:	95 95       	asr	r25
    15a8:	87 95       	ror	r24
    15aa:	0a 94       	dec	r0
    15ac:	e2 f7       	brpl	.-8      	; 0x15a6 <Modbus::writeMultipleCoils(unsigned char*, unsigned int, unsigned int, unsigned char)+0xe8>
_ZN6Modbus7setCoilEjb():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.h:218
    15ae:	50 e0       	ldi	r21, 0x00	; 0
    15b0:	40 e0       	ldi	r20, 0x00	; 0
    15b2:	80 ff       	sbrs	r24, 0
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <Modbus::writeMultipleCoils(unsigned char*, unsigned int, unsigned int, unsigned char)+0xfc>
    15b6:	40 e0       	ldi	r20, 0x00	; 0
    15b8:	5f ef       	ldi	r21, 0xFF	; 255
    15ba:	b7 01       	movw	r22, r14
    15bc:	6a 0d       	add	r22, r10
    15be:	7b 1d       	adc	r23, r11
    15c0:	ce 01       	movw	r24, r28
    15c2:	0e 94 af 06 	call	0xd5e	; 0xd5e <Modbus::setReg(unsigned int, unsigned int)>
_ZN6Modbus18writeMultipleCoilsEPhjjh():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:660
    //increment the bit index
    bitn++;
    15c6:	1f 5f       	subi	r17, 0xFF	; 255
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:661
    if (bitn == 8) {
    15c8:	18 30       	cpi	r17, 0x08	; 8
    15ca:	09 f4       	brne	.+2      	; 0x15ce <Modbus::writeMultipleCoils(unsigned char*, unsigned int, unsigned int, unsigned char)+0x110>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:662
      bitn = 0;
    15cc:	10 e0       	ldi	r17, 0x00	; 0
    15ce:	8f ef       	ldi	r24, 0xFF	; 255
    15d0:	a8 1a       	sub	r10, r24
    15d2:	b8 0a       	sbc	r11, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:656
  _frame[4] = numoutputs & 0x00FF;

  byte bitn = 0;
  word totoutputs = numoutputs;
  word i;
  while (numoutputs--) {
    15d4:	ac 14       	cp	r10, r12
    15d6:	bd 04       	cpc	r11, r13
    15d8:	d1 f6       	brne	.-76     	; 0x158e <Modbus::writeMultipleCoils(unsigned char*, unsigned int, unsigned int, unsigned char)+0xd0>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:668
    }
    //increment the register
    startreg++;
  }

  _reply = MB_REPLY_NORMAL;
    15da:	83 e0       	ldi	r24, 0x03	; 3
    15dc:	89 87       	std	Y+9, r24	; 0x09
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:669
}
    15de:	df 91       	pop	r29
    15e0:	cf 91       	pop	r28
    15e2:	1f 91       	pop	r17
    15e4:	0f 91       	pop	r16
    15e6:	ff 90       	pop	r15
    15e8:	ef 90       	pop	r14
    15ea:	df 90       	pop	r13
    15ec:	cf 90       	pop	r12
    15ee:	bf 90       	pop	r11
    15f0:	af 90       	pop	r10
    15f2:	9f 90       	pop	r9
    15f4:	8f 90       	pop	r8
    15f6:	08 95       	ret

000015f8 <Modbus::reportServerId()>:
_ZN6Modbus14reportServerIdEv():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:684
      Run Indicator Status  1 Byte            0x00 = OFF, 0xFF = ON
      Additional Data
*/
//-------------------------------------------------------------------------------
// private
void Modbus::reportServerId() {
    15f8:	ff 92       	push	r15
    15fa:	0f 93       	push	r16
    15fc:	1f 93       	push	r17
    15fe:	cf 93       	push	r28
    1600:	df 93       	push	r29
    1602:	ec 01       	movw	r28, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:686
  //Clean frame buffer
  free (_frame);
    1604:	8e 81       	ldd	r24, Y+6	; 0x06
    1606:	9f 81       	ldd	r25, Y+7	; 0x07
    1608:	0e 94 b8 11 	call	0x2370	; 0x2370 <free>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:687
  _len = 4;
    160c:	84 e0       	ldi	r24, 0x04	; 4
    160e:	88 87       	std	Y+8, r24	; 0x08
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:688
  if (_additional_data) {
    1610:	0c 81       	ldd	r16, Y+4	; 0x04
    1612:	1d 81       	ldd	r17, Y+5	; 0x05
    1614:	01 15       	cp	r16, r1
    1616:	11 05       	cpc	r17, r1
    1618:	39 f0       	breq	.+14     	; 0x1628 <Modbus::reportServerId()+0x30>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:689
    _len += strlen (_additional_data);
    161a:	f8 01       	movw	r30, r16
    161c:	01 90       	ld	r0, Z+
    161e:	00 20       	and	r0, r0
    1620:	e9 f7       	brne	.-6      	; 0x161c <Modbus::reportServerId()+0x24>
    1622:	e0 1b       	sub	r30, r16
    1624:	ed 5f       	subi	r30, 0xFD	; 253
    1626:	e8 87       	std	Y+8, r30	; 0x08
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:691
  }
  _frame = (byte *) malloc (_len);
    1628:	f8 84       	ldd	r15, Y+8	; 0x08
    162a:	8f 2d       	mov	r24, r15
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	0e 94 1c 11 	call	0x2238	; 0x2238 <malloc>
    1632:	fc 01       	movw	r30, r24
    1634:	9f 83       	std	Y+7, r25	; 0x07
    1636:	8e 83       	std	Y+6, r24	; 0x06
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:692
  if (!_frame) {
    1638:	89 2b       	or	r24, r25
    163a:	51 f4       	brne	.+20     	; 0x1650 <Modbus::reportServerId()+0x58>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:693
    exceptionResponse (MB_FC_REPORT_SERVER_ID, MB_EX_SLAVE_FAILURE);
    163c:	44 e0       	ldi	r20, 0x04	; 4
    163e:	61 e1       	ldi	r22, 0x11	; 17
    1640:	ce 01       	movw	r24, r28
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:704
  _frame[3] = 0xFF; // Run Indicator Status
  if (_additional_data) { // Additional Data
    strncpy ( (char *) &_frame[4], _additional_data, strlen (_additional_data));
  }
  _reply = MB_REPLY_NORMAL;
}
    1642:	df 91       	pop	r29
    1644:	cf 91       	pop	r28
    1646:	1f 91       	pop	r17
    1648:	0f 91       	pop	r16
    164a:	ff 90       	pop	r15
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:693
  if (_additional_data) {
    _len += strlen (_additional_data);
  }
  _frame = (byte *) malloc (_len);
  if (!_frame) {
    exceptionResponse (MB_FC_REPORT_SERVER_ID, MB_EX_SLAVE_FAILURE);
    164c:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <Modbus::exceptionResponse(unsigned char, unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:696
    return;
  }
  _frame[0] = MB_FC_REPORT_SERVER_ID;
    1650:	81 e1       	ldi	r24, 0x11	; 17
    1652:	80 83       	st	Z, r24
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:697
  _frame[1] = _len - 2;   //byte count
    1654:	fa 94       	dec	r15
    1656:	fa 94       	dec	r15
    1658:	f1 82       	std	Z+1, r15	; 0x01
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:698
  _frame[2] = 0x00; // Server ID
    165a:	12 82       	std	Z+2, r1	; 0x02
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:699
  _frame[3] = 0xFF; // Run Indicator Status
    165c:	8f ef       	ldi	r24, 0xFF	; 255
    165e:	83 83       	std	Z+3, r24	; 0x03
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:700
  if (_additional_data) { // Additional Data
    1660:	01 15       	cp	r16, r1
    1662:	11 05       	cpc	r17, r1
    1664:	69 f0       	breq	.+26     	; 0x1680 <Modbus::reportServerId()+0x88>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:701
    strncpy ( (char *) &_frame[4], _additional_data, strlen (_additional_data));
    1666:	d8 01       	movw	r26, r16
    1668:	0d 90       	ld	r0, X+
    166a:	00 20       	and	r0, r0
    166c:	e9 f7       	brne	.-6      	; 0x1668 <Modbus::reportServerId()+0x70>
    166e:	11 97       	sbiw	r26, 0x01	; 1
    1670:	ad 01       	movw	r20, r26
    1672:	40 1b       	sub	r20, r16
    1674:	51 0b       	sbc	r21, r17
    1676:	b8 01       	movw	r22, r16
    1678:	cf 01       	movw	r24, r30
    167a:	04 96       	adiw	r24, 0x04	; 4
    167c:	0e 94 46 12 	call	0x248c	; 0x248c <strncpy>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:703
  }
  _reply = MB_REPLY_NORMAL;
    1680:	83 e0       	ldi	r24, 0x03	; 3
    1682:	89 87       	std	Y+9, r24	; 0x09
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:704
}
    1684:	df 91       	pop	r29
    1686:	cf 91       	pop	r28
    1688:	1f 91       	pop	r17
    168a:	0f 91       	pop	r16
    168c:	ff 90       	pop	r15
    168e:	08 95       	ret

00001690 <Modbus::receivePDU(unsigned char*)>:
_ZN6Modbus10receivePDUEPh():
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:129
  return false;
}

//-------------------------------------------------------------------------------
// protected
void Modbus::receivePDU (byte *frame) {
    1690:	0f 93       	push	r16
    1692:	cf 93       	push	r28
    1694:	9c 01       	movw	r18, r24
    1696:	db 01       	movw	r26, r22
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:130
  byte fcode  = frame[0];
    1698:	cc 91       	ld	r28, X
    169a:	11 96       	adiw	r26, 0x01	; 1
    169c:	6d 91       	ld	r22, X+
    169e:	7c 91       	ld	r23, X
    16a0:	12 97       	sbiw	r26, 0x02	; 2
    16a2:	76 27       	eor	r23, r22
    16a4:	67 27       	eor	r22, r23
    16a6:	76 27       	eor	r23, r22
    16a8:	13 96       	adiw	r26, 0x03	; 3
    16aa:	4d 91       	ld	r20, X+
    16ac:	5c 91       	ld	r21, X
    16ae:	14 97       	sbiw	r26, 0x04	; 4
    16b0:	54 27       	eor	r21, r20
    16b2:	45 27       	eor	r20, r21
    16b4:	54 27       	eor	r21, r20
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:134
  word field1 = (word) frame[1] << 8 | (word) frame[2];
  word field2 = (word) frame[3] << 8 | (word) frame[4];

  switch (fcode) {
    16b6:	ef ef       	ldi	r30, 0xFF	; 255
    16b8:	ec 0f       	add	r30, r28
    16ba:	e1 31       	cpi	r30, 0x11	; 17
    16bc:	08 f0       	brcs	.+2      	; 0x16c0 <Modbus::receivePDU(unsigned char*)+0x30>
    16be:	46 c0       	rjmp	.+140    	; 0x174c <Modbus::receivePDU(unsigned char*)+0xbc>
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	eb 59       	subi	r30, 0x9B	; 155
    16c4:	f4 4f       	sbci	r31, 0xF4	; 244
    16c6:	0c 94 00 11 	jmp	0x2200	; 0x2200 <__tablejump2__>
    16ca:	8d 0b       	sbc	r24, r29
    16cc:	91 0b       	sbc	r25, r17
    16ce:	7a 0b       	sbc	r23, r26
    16d0:	95 0b       	sbc	r25, r21
    16d2:	99 0b       	sbc	r25, r25
    16d4:	76 0b       	sbc	r23, r22
    16d6:	a6 0b       	sbc	r26, r22
    16d8:	a6 0b       	sbc	r26, r22
    16da:	a6 0b       	sbc	r26, r22
    16dc:	a6 0b       	sbc	r26, r22
    16de:	a6 0b       	sbc	r26, r22
    16e0:	a6 0b       	sbc	r26, r22
    16e2:	a6 0b       	sbc	r26, r22
    16e4:	a6 0b       	sbc	r26, r22
    16e6:	9d 0b       	sbc	r25, r29
    16e8:	7e 0b       	sbc	r23, r30
    16ea:	89 0b       	sbc	r24, r25
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:187
      #endif

    default:
      exceptionResponse (fcode, MB_EX_ILLEGAL_FUNCTION);
  }
}
    16ec:	cf 91       	pop	r28
    16ee:	0f 91       	pop	r16
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:138

  switch (fcode) {

    case MB_FC_WRITE_REG:
      //field1 = reg, field2 = value
      writeSingleRegister (field1, field2);
    16f0:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <Modbus::writeSingleRegister(unsigned int, unsigned int)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:187
      #endif

    default:
      exceptionResponse (fcode, MB_EX_ILLEGAL_FUNCTION);
  }
}
    16f4:	cf 91       	pop	r28
    16f6:	0f 91       	pop	r16
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:143
      writeSingleRegister (field1, field2);
      break;

    case MB_FC_READ_REGS:
      //field1 = startreg, field2 = numregs
      readRegisters (field1, field2);
    16f8:	0c 94 32 07 	jmp	0xe64	; 0xe64 <Modbus::readRegisters(unsigned int, unsigned int)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:148
      break;

    case MB_FC_WRITE_REGS:
      //field1 = startreg, field2 = status
      writeMultipleRegisters (frame, field1, field2, frame[5]);
    16fc:	15 96       	adiw	r26, 0x05	; 5
    16fe:	0c 91       	ld	r16, X
    1700:	15 97       	sbiw	r26, 0x05	; 5
    1702:	9a 01       	movw	r18, r20
    1704:	ab 01       	movw	r20, r22
    1706:	bd 01       	movw	r22, r26
    1708:	0e 94 b6 07 	call	0xf6c	; 0xf6c <Modbus::writeMultipleRegisters(unsigned char*, unsigned int, unsigned int, unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:187
      #endif

    default:
      exceptionResponse (fcode, MB_EX_ILLEGAL_FUNCTION);
  }
}
    170c:	cf 91       	pop	r28
    170e:	0f 91       	pop	r16
    1710:	08 95       	ret
    1712:	cf 91       	pop	r28
    1714:	0f 91       	pop	r16
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:154
      break;

      #ifndef USE_HOLDING_REGISTERS_ONLY

    case MB_FC_REPORT_SERVER_ID:
      reportServerId();
    1716:	0c 94 fc 0a 	jmp	0x15f8	; 0x15f8 <Modbus::reportServerId()>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:187
      #endif

    default:
      exceptionResponse (fcode, MB_EX_ILLEGAL_FUNCTION);
  }
}
    171a:	cf 91       	pop	r28
    171c:	0f 91       	pop	r16
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:159
      reportServerId();
      break;

    case MB_FC_READ_COILS:
      //field1 = startreg, field2 = numregs
      readCoils (field1, field2);
    171e:	0c 94 4b 08 	jmp	0x1096	; 0x1096 <Modbus::readCoils(unsigned int, unsigned int)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:187
      #endif

    default:
      exceptionResponse (fcode, MB_EX_ILLEGAL_FUNCTION);
  }
}
    1722:	cf 91       	pop	r28
    1724:	0f 91       	pop	r16
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:164
      readCoils (field1, field2);
      break;

    case MB_FC_READ_INPUT_STAT:
      //field1 = startreg, field2 = numregs
      readInputStatus (field1, field2);
    1726:	0c 94 00 09 	jmp	0x1200	; 0x1200 <Modbus::readInputStatus(unsigned int, unsigned int)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:187
      #endif

    default:
      exceptionResponse (fcode, MB_EX_ILLEGAL_FUNCTION);
  }
}
    172a:	cf 91       	pop	r28
    172c:	0f 91       	pop	r16
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:169
      readInputStatus (field1, field2);
      break;

    case MB_FC_READ_INPUT_REGS:
      //field1 = startreg, field2 = numregs
      readInputRegisters (field1, field2);
    172e:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <Modbus::readInputRegisters(unsigned int, unsigned int)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:187
      #endif

    default:
      exceptionResponse (fcode, MB_EX_ILLEGAL_FUNCTION);
  }
}
    1732:	cf 91       	pop	r28
    1734:	0f 91       	pop	r16
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:174
      readInputRegisters (field1, field2);
      break;

    case MB_FC_WRITE_COIL:
      //field1 = reg, field2 = status
      writeSingleCoil (field1, field2);
    1736:	0c 94 40 0a 	jmp	0x1480	; 0x1480 <Modbus::writeSingleCoil(unsigned int, unsigned int)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:179
      break;

    case MB_FC_WRITE_COILS:
      //field1 = startreg, field2 = numoutputs
      writeMultipleCoils (frame, field1, field2, frame[5]);
    173a:	15 96       	adiw	r26, 0x05	; 5
    173c:	0c 91       	ld	r16, X
    173e:	15 97       	sbiw	r26, 0x05	; 5
    1740:	9a 01       	movw	r18, r20
    1742:	ab 01       	movw	r20, r22
    1744:	bd 01       	movw	r22, r26
    1746:	0e 94 5f 0a 	call	0x14be	; 0x14be <Modbus::writeMultipleCoils(unsigned char*, unsigned int, unsigned int, unsigned char)>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:180
      break;
    174a:	e0 cf       	rjmp	.-64     	; 0x170c <Modbus::receivePDU(unsigned char*)+0x7c>
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:185

      #endif

    default:
      exceptionResponse (fcode, MB_EX_ILLEGAL_FUNCTION);
    174c:	41 e0       	ldi	r20, 0x01	; 1
    174e:	6c 2f       	mov	r22, r28
    1750:	c9 01       	movw	r24, r18
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:187
  }
}
    1752:	cf 91       	pop	r28
    1754:	0f 91       	pop	r16
C:\Users\Jacek\Documents\Arduino\libraries\Modbus-Arduino\src/Modbus.cpp:185
      break;

      #endif

    default:
      exceptionResponse (fcode, MB_EX_ILLEGAL_FUNCTION);
    1756:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <Modbus::exceptionResponse(unsigned char, unsigned char)>

0000175a <Bounce::readCurrentState()>:
_ZN6Bounce16readCurrentStateEv():
C:\Users\Jacek\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:146

void Bounce::attach(int pin) {
    this->pin = pin;
    
    // SET INITIAL STATE
    begin();
    175a:	fc 01       	movw	r30, r24
    175c:	81 89       	ldd	r24, Z+17	; 0x11
    175e:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <digitalRead>
    1762:	21 e0       	ldi	r18, 0x01	; 1
    1764:	89 2b       	or	r24, r25
    1766:	09 f4       	brne	.+2      	; 0x176a <Bounce::readCurrentState()+0x10>
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	82 2f       	mov	r24, r18
    176c:	08 95       	ret

0000176e <Bounce::setPinMode(int, int)>:
_ZN6Bounce10setPinModeEii():
    176e:	86 2f       	mov	r24, r22
    1770:	64 2f       	mov	r22, r20
    1772:	0c 94 82 0d 	jmp	0x1b04	; 0x1b04 <pinMode>

00001776 <Debouncer::Debouncer()>:
_ZN9DebouncerC2Ev():
    1776:	fc 01       	movw	r30, r24
    1778:	8a e1       	ldi	r24, 0x1A	; 26
    177a:	93 e0       	ldi	r25, 0x03	; 3
    177c:	91 83       	std	Z+1, r25	; 0x01
    177e:	80 83       	st	Z, r24
    1780:	12 82       	std	Z+2, r1	; 0x02
    1782:	13 82       	std	Z+3, r1	; 0x03
    1784:	14 82       	std	Z+4, r1	; 0x04
    1786:	15 82       	std	Z+5, r1	; 0x05
    1788:	8a e0       	ldi	r24, 0x0A	; 10
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	97 83       	std	Z+7, r25	; 0x07
    178e:	86 83       	std	Z+6, r24	; 0x06
    1790:	10 86       	std	Z+8, r1	; 0x08
    1792:	08 95       	ret

00001794 <Debouncer::interval(unsigned int)>:
_ZN9Debouncer8intervalEj():
    1794:	fc 01       	movw	r30, r24
    1796:	77 83       	std	Z+7, r23	; 0x07
    1798:	66 83       	std	Z+6, r22	; 0x06
    179a:	08 95       	ret

0000179c <Debouncer::begin()>:
_ZN9Debouncer5beginEv():
    179c:	cf 93       	push	r28
    179e:	df 93       	push	r29
    17a0:	ec 01       	movw	r28, r24
    17a2:	18 86       	std	Y+8, r1	; 0x08
    17a4:	e8 81       	ld	r30, Y
    17a6:	f9 81       	ldd	r31, Y+1	; 0x01
    17a8:	01 90       	ld	r0, Z+
    17aa:	f0 81       	ld	r31, Z
    17ac:	e0 2d       	mov	r30, r0
    17ae:	09 95       	icall
    17b0:	88 23       	and	r24, r24
    17b2:	19 f0       	breq	.+6      	; 0x17ba <Debouncer::begin()+0x1e>
_ZN9Debouncer12setStateFlagEh():
    17b4:	88 85       	ldd	r24, Y+8	; 0x08
    17b6:	83 60       	ori	r24, 0x03	; 3
    17b8:	88 87       	std	Y+8, r24	; 0x08
_ZN9Debouncer5beginEv():
    17ba:	0e 94 bc 0c 	call	0x1978	; 0x1978 <millis>
    17be:	6a 83       	std	Y+2, r22	; 0x02
    17c0:	7b 83       	std	Y+3, r23	; 0x03
    17c2:	8c 83       	std	Y+4, r24	; 0x04
    17c4:	9d 83       	std	Y+5, r25	; 0x05
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	08 95       	ret

000017cc <Debouncer::update()>:
_ZN9Debouncer6updateEv():
    17cc:	cf 92       	push	r12
    17ce:	df 92       	push	r13
    17d0:	ef 92       	push	r14
    17d2:	ff 92       	push	r15
    17d4:	0f 93       	push	r16
    17d6:	1f 93       	push	r17
    17d8:	cf 93       	push	r28
    17da:	df 93       	push	r29
    17dc:	ec 01       	movw	r28, r24
_ZN9Debouncer14unsetStateFlagEh():
    17de:	88 85       	ldd	r24, Y+8	; 0x08
    17e0:	8b 7f       	andi	r24, 0xFB	; 251
    17e2:	88 87       	std	Y+8, r24	; 0x08
_ZN9Debouncer6updateEv():
    17e4:	e8 81       	ld	r30, Y
    17e6:	f9 81       	ldd	r31, Y+1	; 0x01
    17e8:	01 90       	ld	r0, Z+
    17ea:	f0 81       	ld	r31, Z
    17ec:	e0 2d       	mov	r30, r0
    17ee:	ce 01       	movw	r24, r28
    17f0:	09 95       	icall
    17f2:	18 2f       	mov	r17, r24
_ZNK9Debouncer12getStateFlagEh():
    17f4:	88 85       	ldd	r24, Y+8	; 0x08
    17f6:	86 95       	lsr	r24
    17f8:	81 70       	andi	r24, 0x01	; 1
_ZN9Debouncer6updateEv():
    17fa:	18 17       	cp	r17, r24
    17fc:	b9 f0       	breq	.+46     	; 0x182c <Debouncer::update()+0x60>
    17fe:	0e 94 bc 0c 	call	0x1978	; 0x1978 <millis>
    1802:	6a 83       	std	Y+2, r22	; 0x02
    1804:	7b 83       	std	Y+3, r23	; 0x03
    1806:	8c 83       	std	Y+4, r24	; 0x04
    1808:	9d 83       	std	Y+5, r25	; 0x05
_ZN9Debouncer15toggleStateFlagEh():
    180a:	88 85       	ldd	r24, Y+8	; 0x08
    180c:	92 e0       	ldi	r25, 0x02	; 2
    180e:	89 27       	eor	r24, r25
    1810:	88 87       	std	Y+8, r24	; 0x08
_ZNK9Debouncer12getStateFlagEh():
    1812:	88 85       	ldd	r24, Y+8	; 0x08
_ZN9Debouncer6updateEv():
    1814:	82 fb       	bst	r24, 2
    1816:	88 27       	eor	r24, r24
    1818:	80 f9       	bld	r24, 0
    181a:	df 91       	pop	r29
    181c:	cf 91       	pop	r28
    181e:	1f 91       	pop	r17
    1820:	0f 91       	pop	r16
    1822:	ff 90       	pop	r15
    1824:	ef 90       	pop	r14
    1826:	df 90       	pop	r13
    1828:	cf 90       	pop	r12
    182a:	08 95       	ret
    182c:	0e 94 bc 0c 	call	0x1978	; 0x1978 <millis>
    1830:	ca 80       	ldd	r12, Y+2	; 0x02
    1832:	db 80       	ldd	r13, Y+3	; 0x03
    1834:	ec 80       	ldd	r14, Y+4	; 0x04
    1836:	fd 80       	ldd	r15, Y+5	; 0x05
    1838:	ab 01       	movw	r20, r22
    183a:	bc 01       	movw	r22, r24
    183c:	4c 19       	sub	r20, r12
    183e:	5d 09       	sbc	r21, r13
    1840:	6e 09       	sbc	r22, r14
    1842:	7f 09       	sbc	r23, r15
    1844:	8e 81       	ldd	r24, Y+6	; 0x06
    1846:	9f 81       	ldd	r25, Y+7	; 0x07
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	a0 e0       	ldi	r26, 0x00	; 0
    184c:	48 17       	cp	r20, r24
    184e:	59 07       	cpc	r21, r25
    1850:	6a 07       	cpc	r22, r26
    1852:	7b 07       	cpc	r23, r27
    1854:	f0 f2       	brcs	.-68     	; 0x1812 <Debouncer::update()+0x46>
_ZNK9Debouncer12getStateFlagEh():
    1856:	88 85       	ldd	r24, Y+8	; 0x08
    1858:	81 70       	andi	r24, 0x01	; 1
_ZN9Debouncer6updateEv():
    185a:	18 17       	cp	r17, r24
    185c:	d1 f2       	breq	.-76     	; 0x1812 <Debouncer::update()+0x46>
    185e:	0e 94 bc 0c 	call	0x1978	; 0x1978 <millis>
    1862:	6a 83       	std	Y+2, r22	; 0x02
    1864:	7b 83       	std	Y+3, r23	; 0x03
    1866:	8c 83       	std	Y+4, r24	; 0x04
    1868:	9d 83       	std	Y+5, r25	; 0x05
_ZN9Debouncer15toggleStateFlagEh():
    186a:	88 85       	ldd	r24, Y+8	; 0x08
    186c:	91 e0       	ldi	r25, 0x01	; 1
    186e:	89 27       	eor	r24, r25
_ZN9Debouncer12setStateFlagEh():
    1870:	84 60       	ori	r24, 0x04	; 4
    1872:	88 87       	std	Y+8, r24	; 0x08
_ZN9Debouncer11changeStateEv():
    1874:	0e 94 bc 0c 	call	0x1978	; 0x1978 <millis>
    1878:	09 85       	ldd	r16, Y+9	; 0x09
    187a:	1a 85       	ldd	r17, Y+10	; 0x0a
    187c:	2b 85       	ldd	r18, Y+11	; 0x0b
    187e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1880:	60 1b       	sub	r22, r16
    1882:	71 0b       	sbc	r23, r17
    1884:	82 0b       	sbc	r24, r18
    1886:	93 0b       	sbc	r25, r19
    1888:	6d 87       	std	Y+13, r22	; 0x0d
    188a:	7e 87       	std	Y+14, r23	; 0x0e
    188c:	8f 87       	std	Y+15, r24	; 0x0f
    188e:	98 8b       	std	Y+16, r25	; 0x10
    1890:	0e 94 bc 0c 	call	0x1978	; 0x1978 <millis>
    1894:	69 87       	std	Y+9, r22	; 0x09
    1896:	7a 87       	std	Y+10, r23	; 0x0a
    1898:	8b 87       	std	Y+11, r24	; 0x0b
    189a:	9c 87       	std	Y+12, r25	; 0x0c
    189c:	ba cf       	rjmp	.-140    	; 0x1812 <Debouncer::update()+0x46>

0000189e <Debouncer::read() const>:
_ZNK9Debouncer12getStateFlagEh():
    189e:	fc 01       	movw	r30, r24
    18a0:	80 85       	ldd	r24, Z+8	; 0x08
_ZNK9Debouncer4readEv():
    18a2:	81 70       	andi	r24, 0x01	; 1
    18a4:	08 95       	ret

000018a6 <Bounce::Bounce()>:
_ZN6BounceC2Ev():
    18a6:	cf 93       	push	r28
    18a8:	df 93       	push	r29
    18aa:	ec 01       	movw	r28, r24
    18ac:	0e 94 bb 0b 	call	0x1776	; 0x1776 <Debouncer::Debouncer()>
    18b0:	80 e2       	ldi	r24, 0x20	; 32
    18b2:	93 e0       	ldi	r25, 0x03	; 3
    18b4:	99 83       	std	Y+1, r25	; 0x01
    18b6:	88 83       	st	Y, r24
    18b8:	19 8a       	std	Y+17, r1	; 0x11
    18ba:	df 91       	pop	r29
    18bc:	cf 91       	pop	r28
    18be:	08 95       	ret

000018c0 <Bounce::attach(int, int)>:
_ZN6Bounce6attachEii():
C:\Users\Jacek\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:149
}

void Bounce::attach(int pin, int mode){
    18c0:	1f 93       	push	r17
    18c2:	cf 93       	push	r28
    18c4:	df 93       	push	r29
    18c6:	ec 01       	movw	r28, r24
    18c8:	16 2f       	mov	r17, r22
C:\Users\Jacek\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:150
    setPinMode(pin, mode);
    18ca:	e8 81       	ld	r30, Y
    18cc:	f9 81       	ldd	r31, Y+1	; 0x01
    18ce:	02 80       	ldd	r0, Z+2	; 0x02
    18d0:	f3 81       	ldd	r31, Z+3	; 0x03
    18d2:	e0 2d       	mov	r30, r0
    18d4:	09 95       	icall
_ZN6Bounce6attachEi():
C:\Users\Jacek\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:143
Bounce::Bounce()
    : pin(0)
{}

void Bounce::attach(int pin) {
    this->pin = pin;
    18d6:	19 8b       	std	Y+17, r17	; 0x11
C:\Users\Jacek\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:146
    
    // SET INITIAL STATE
    begin();
    18d8:	ce 01       	movw	r24, r28
_ZN6Bounce6attachEii():
C:\Users\Jacek\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:152
}

void Bounce::attach(int pin, int mode){
    setPinMode(pin, mode);
    this->attach(pin);
}
    18da:	df 91       	pop	r29
    18dc:	cf 91       	pop	r28
    18de:	1f 91       	pop	r17
_ZN6Bounce6attachEi():
C:\Users\Jacek\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:146

void Bounce::attach(int pin) {
    this->pin = pin;
    
    // SET INITIAL STATE
    begin();
    18e0:	0c 94 ce 0b 	jmp	0x179c	; 0x179c <Debouncer::begin()>

000018e4 <__vector_16>:
__vector_16():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    18e4:	1f 92       	push	r1
    18e6:	0f 92       	push	r0
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	0f 92       	push	r0
    18ec:	11 24       	eor	r1, r1
    18ee:	2f 93       	push	r18
    18f0:	3f 93       	push	r19
    18f2:	8f 93       	push	r24
    18f4:	9f 93       	push	r25
    18f6:	af 93       	push	r26
    18f8:	bf 93       	push	r27
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    18fa:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <timer0_millis>
    18fe:	90 91 a1 03 	lds	r25, 0x03A1	; 0x8003a1 <timer0_millis+0x1>
    1902:	a0 91 a2 03 	lds	r26, 0x03A2	; 0x8003a2 <timer0_millis+0x2>
    1906:	b0 91 a3 03 	lds	r27, 0x03A3	; 0x8003a3 <timer0_millis+0x3>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    190a:	30 91 9f 03 	lds	r19, 0x039F	; 0x80039f <timer0_fract>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    190e:	23 e0       	ldi	r18, 0x03	; 3
    1910:	23 0f       	add	r18, r19
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    1912:	2d 37       	cpi	r18, 0x7D	; 125
    1914:	68 f1       	brcs	.+90     	; 0x1970 <__vector_16+0x8c>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    1916:	26 e8       	ldi	r18, 0x86	; 134
    1918:	23 0f       	add	r18, r19
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    191a:	02 96       	adiw	r24, 0x02	; 2
    191c:	a1 1d       	adc	r26, r1
    191e:	b1 1d       	adc	r27, r1
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    1920:	20 93 9f 03 	sts	0x039F, r18	; 0x80039f <timer0_fract>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    1924:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <timer0_millis>
    1928:	90 93 a1 03 	sts	0x03A1, r25	; 0x8003a1 <timer0_millis+0x1>
    192c:	a0 93 a2 03 	sts	0x03A2, r26	; 0x8003a2 <timer0_millis+0x2>
    1930:	b0 93 a3 03 	sts	0x03A3, r27	; 0x8003a3 <timer0_millis+0x3>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    1934:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <timer0_overflow_count>
    1938:	90 91 9c 03 	lds	r25, 0x039C	; 0x80039c <timer0_overflow_count+0x1>
    193c:	a0 91 9d 03 	lds	r26, 0x039D	; 0x80039d <timer0_overflow_count+0x2>
    1940:	b0 91 9e 03 	lds	r27, 0x039E	; 0x80039e <timer0_overflow_count+0x3>
    1944:	01 96       	adiw	r24, 0x01	; 1
    1946:	a1 1d       	adc	r26, r1
    1948:	b1 1d       	adc	r27, r1
    194a:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <timer0_overflow_count>
    194e:	90 93 9c 03 	sts	0x039C, r25	; 0x80039c <timer0_overflow_count+0x1>
    1952:	a0 93 9d 03 	sts	0x039D, r26	; 0x80039d <timer0_overflow_count+0x2>
    1956:	b0 93 9e 03 	sts	0x039E, r27	; 0x80039e <timer0_overflow_count+0x3>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:213
#endif
}
    195a:	bf 91       	pop	r27
    195c:	af 91       	pop	r26
    195e:	9f 91       	pop	r25
    1960:	8f 91       	pop	r24
    1962:	3f 91       	pop	r19
    1964:	2f 91       	pop	r18
    1966:	0f 90       	pop	r0
    1968:	0f be       	out	0x3f, r0	; 63
    196a:	0f 90       	pop	r0
    196c:	1f 90       	pop	r1
    196e:	18 95       	reti
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    1970:	01 96       	adiw	r24, 0x01	; 1
    1972:	a1 1d       	adc	r26, r1
    1974:	b1 1d       	adc	r27, r1
    1976:	d4 cf       	rjmp	.-88     	; 0x1920 <__vector_16+0x3c>

00001978 <millis>:
millis():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
    1978:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
    197a:	f8 94       	cli
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
    197c:	60 91 a0 03 	lds	r22, 0x03A0	; 0x8003a0 <timer0_millis>
    1980:	70 91 a1 03 	lds	r23, 0x03A1	; 0x8003a1 <timer0_millis+0x1>
    1984:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <timer0_millis+0x2>
    1988:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <timer0_millis+0x3>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
    198c:	2f bf       	out	0x3f, r18	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:227

  return m;
}
    198e:	08 95       	ret

00001990 <micros>:
micros():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
    1990:	3f b7       	in	r19, 0x3f	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
    1992:	f8 94       	cli
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
    1994:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <timer0_overflow_count>
    1998:	90 91 9c 03 	lds	r25, 0x039C	; 0x80039c <timer0_overflow_count+0x1>
    199c:	a0 91 9d 03 	lds	r26, 0x039D	; 0x80039d <timer0_overflow_count+0x2>
    19a0:	b0 91 9e 03 	lds	r27, 0x039E	; 0x80039e <timer0_overflow_count+0x3>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    19a4:	26 b5       	in	r18, 0x26	; 38
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    19a6:	a8 9b       	sbis	0x15, 0	; 21
    19a8:	05 c0       	rjmp	.+10     	; 0x19b4 <micros+0x24>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261 (discriminator 1)
    19aa:	2f 3f       	cpi	r18, 0xFF	; 255
    19ac:	19 f0       	breq	.+6      	; 0x19b4 <micros+0x24>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
    19ae:	01 96       	adiw	r24, 0x01	; 1
    19b0:	a1 1d       	adc	r26, r1
    19b2:	b1 1d       	adc	r27, r1
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
    19b4:	3f bf       	out	0x3f, r19	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
    19b6:	ba 2f       	mov	r27, r26
    19b8:	a9 2f       	mov	r26, r25
    19ba:	98 2f       	mov	r25, r24
    19bc:	88 27       	eor	r24, r24
    19be:	bc 01       	movw	r22, r24
    19c0:	cd 01       	movw	r24, r26
    19c2:	62 0f       	add	r22, r18
    19c4:	71 1d       	adc	r23, r1
    19c6:	81 1d       	adc	r24, r1
    19c8:	91 1d       	adc	r25, r1
    19ca:	42 e0       	ldi	r20, 0x02	; 2
    19cc:	66 0f       	add	r22, r22
    19ce:	77 1f       	adc	r23, r23
    19d0:	88 1f       	adc	r24, r24
    19d2:	99 1f       	adc	r25, r25
    19d4:	4a 95       	dec	r20
    19d6:	d1 f7       	brne	.-12     	; 0x19cc <micros+0x3c>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
    19d8:	08 95       	ret

000019da <delay>:
delay():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
    19da:	8f 92       	push	r8
    19dc:	9f 92       	push	r9
    19de:	af 92       	push	r10
    19e0:	bf 92       	push	r11
    19e2:	cf 92       	push	r12
    19e4:	df 92       	push	r13
    19e6:	ef 92       	push	r14
    19e8:	ff 92       	push	r15
    19ea:	6b 01       	movw	r12, r22
    19ec:	7c 01       	movw	r14, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
    19ee:	0e 94 c8 0c 	call	0x1990	; 0x1990 <micros>
    19f2:	4b 01       	movw	r8, r22
    19f4:	5c 01       	movw	r10, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
    19f6:	c1 14       	cp	r12, r1
    19f8:	d1 04       	cpc	r13, r1
    19fa:	e1 04       	cpc	r14, r1
    19fc:	f1 04       	cpc	r15, r1
    19fe:	e9 f0       	breq	.+58     	; 0x1a3a <delay+0x60>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:400
    yield();
    1a00:	0e 94 dd 10 	call	0x21ba	; 0x21ba <yield>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    1a04:	0e 94 c8 0c 	call	0x1990	; 0x1990 <micros>
    1a08:	68 19       	sub	r22, r8
    1a0a:	79 09       	sbc	r23, r9
    1a0c:	8a 09       	sbc	r24, r10
    1a0e:	9b 09       	sbc	r25, r11
    1a10:	68 3e       	cpi	r22, 0xE8	; 232
    1a12:	73 40       	sbci	r23, 0x03	; 3
    1a14:	81 05       	cpc	r24, r1
    1a16:	91 05       	cpc	r25, r1
    1a18:	70 f3       	brcs	.-36     	; 0x19f6 <delay+0x1c>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:402
      ms--;
    1a1a:	21 e0       	ldi	r18, 0x01	; 1
    1a1c:	c2 1a       	sub	r12, r18
    1a1e:	d1 08       	sbc	r13, r1
    1a20:	e1 08       	sbc	r14, r1
    1a22:	f1 08       	sbc	r15, r1
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    1a24:	88 ee       	ldi	r24, 0xE8	; 232
    1a26:	88 0e       	add	r8, r24
    1a28:	83 e0       	ldi	r24, 0x03	; 3
    1a2a:	98 1e       	adc	r9, r24
    1a2c:	a1 1c       	adc	r10, r1
    1a2e:	b1 1c       	adc	r11, r1
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    1a30:	c1 14       	cp	r12, r1
    1a32:	d1 04       	cpc	r13, r1
    1a34:	e1 04       	cpc	r14, r1
    1a36:	f1 04       	cpc	r15, r1
    1a38:	29 f7       	brne	.-54     	; 0x1a04 <delay+0x2a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
    1a3a:	ff 90       	pop	r15
    1a3c:	ef 90       	pop	r14
    1a3e:	df 90       	pop	r13
    1a40:	cf 90       	pop	r12
    1a42:	bf 90       	pop	r11
    1a44:	af 90       	pop	r10
    1a46:	9f 90       	pop	r9
    1a48:	8f 90       	pop	r8
    1a4a:	08 95       	ret

00001a4c <delayMicroseconds>:
delayMicroseconds():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
    1a4c:	82 30       	cpi	r24, 0x02	; 2
    1a4e:	91 05       	cpc	r25, r1
    1a50:	38 f0       	brcs	.+14     	; 0x1a60 <delayMicroseconds+0x14>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
    1a52:	88 0f       	add	r24, r24
    1a54:	99 1f       	adc	r25, r25
    1a56:	88 0f       	add	r24, r24
    1a58:	99 1f       	adc	r25, r25
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
    1a5a:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	f1 f7       	brne	.-4      	; 0x1a5c <delayMicroseconds+0x10>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    1a60:	08 95       	ret

00001a62 <init>:
init():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    1a62:	78 94       	sei
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    1a64:	84 b5       	in	r24, 0x24	; 36
    1a66:	83 60       	ori	r24, 0x03	; 3
    1a68:	84 bd       	out	0x24, r24	; 36
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    1a6a:	85 b5       	in	r24, 0x25	; 37
    1a6c:	83 60       	ori	r24, 0x03	; 3
    1a6e:	85 bd       	out	0x25, r24	; 37
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    1a70:	ee e6       	ldi	r30, 0x6E	; 110
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	81 60       	ori	r24, 0x01	; 1
    1a78:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    1a7a:	e1 e8       	ldi	r30, 0x81	; 129
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	82 e0       	ldi	r24, 0x02	; 2
    1a80:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    1a82:	80 81       	ld	r24, Z
    1a84:	81 60       	ori	r24, 0x01	; 1
    1a86:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    1a88:	e0 e8       	ldi	r30, 0x80	; 128
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	81 60       	ori	r24, 0x01	; 1
    1a90:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    1a92:	e1 eb       	ldi	r30, 0xB1	; 177
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	84 60       	ori	r24, 0x04	; 4
    1a9a:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    1a9c:	e0 eb       	ldi	r30, 0xB0	; 176
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	81 60       	ori	r24, 0x01	; 1
    1aa4:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    1aa6:	87 e8       	ldi	r24, 0x87	; 135
    1aa8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    1aac:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    1ab0:	08 95       	ret

00001ab2 <turnOffPWM>:
turnOffPWM():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    1ab2:	84 30       	cpi	r24, 0x04	; 4
    1ab4:	81 f0       	breq	.+32     	; 0x1ad6 <turnOffPWM+0x24>
    1ab6:	28 f4       	brcc	.+10     	; 0x1ac2 <turnOffPWM+0x10>
    1ab8:	82 30       	cpi	r24, 0x02	; 2
    1aba:	e9 f0       	breq	.+58     	; 0x1af6 <turnOffPWM+0x44>
    1abc:	83 30       	cpi	r24, 0x03	; 3
    1abe:	f9 f0       	breq	.+62     	; 0x1afe <turnOffPWM+0x4c>
    1ac0:	08 95       	ret
    1ac2:	88 30       	cpi	r24, 0x08	; 8
    1ac4:	71 f0       	breq	.+28     	; 0x1ae2 <turnOffPWM+0x30>
    1ac6:	89 30       	cpi	r24, 0x09	; 9
    1ac8:	91 f0       	breq	.+36     	; 0x1aee <turnOffPWM+0x3c>
    1aca:	85 30       	cpi	r24, 0x05	; 5
    1acc:	b9 f4       	brne	.+46     	; 0x1afc <turnOffPWM+0x4a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    1ace:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1ad2:	8f 7d       	andi	r24, 0xDF	; 223
    1ad4:	03 c0       	rjmp	.+6      	; 0x1adc <turnOffPWM+0x2a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    1ad6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1ada:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    1adc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    1ae0:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    1ae2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1ae6:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    1ae8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
    1aec:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    1aee:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1af2:	8f 7d       	andi	r24, 0xDF	; 223
    1af4:	f9 cf       	rjmp	.-14     	; 0x1ae8 <turnOffPWM+0x36>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    1af6:	84 b5       	in	r24, 0x24	; 36
    1af8:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    1afa:	84 bd       	out	0x24, r24	; 36
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    1afc:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    1afe:	84 b5       	in	r24, 0x24	; 36
    1b00:	8f 7d       	andi	r24, 0xDF	; 223
    1b02:	fb cf       	rjmp	.-10     	; 0x1afa <turnOffPWM+0x48>

00001b04 <pinMode>:
pinMode():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1b04:	cf 93       	push	r28
    1b06:	df 93       	push	r29
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	fc 01       	movw	r30, r24
    1b0c:	e1 58       	subi	r30, 0x81	; 129
    1b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b10:	24 91       	lpm	r18, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    1b12:	8a 56       	subi	r24, 0x6A	; 106
    1b14:	9f 4f       	sbci	r25, 0xFF	; 255
    1b16:	fc 01       	movw	r30, r24
    1b18:	84 91       	lpm	r24, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    1b1a:	88 23       	and	r24, r24
    1b1c:	c9 f0       	breq	.+50     	; 0x1b50 <pinMode+0x4c>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	88 0f       	add	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	fc 01       	movw	r30, r24
    1b26:	ef 53       	subi	r30, 0x3F	; 63
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	a5 91       	lpm	r26, Z+
    1b2c:	b4 91       	lpm	r27, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    1b2e:	fc 01       	movw	r30, r24
    1b30:	e9 54       	subi	r30, 0x49	; 73
    1b32:	ff 4f       	sbci	r31, 0xFF	; 255
    1b34:	c5 91       	lpm	r28, Z+
    1b36:	d4 91       	lpm	r29, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    1b38:	61 11       	cpse	r22, r1
    1b3a:	0d c0       	rjmp	.+26     	; 0x1b56 <pinMode+0x52>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    1b3c:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    1b3e:	f8 94       	cli
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    1b40:	8c 91       	ld	r24, X
    1b42:	20 95       	com	r18
    1b44:	82 23       	and	r24, r18
    1b46:	8c 93       	st	X, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    1b48:	88 81       	ld	r24, Y
    1b4a:	28 23       	and	r18, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    1b4c:	28 83       	st	Y, r18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    1b4e:	9f bf       	out	0x3f, r25	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    1b50:	df 91       	pop	r29
    1b52:	cf 91       	pop	r28
    1b54:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    1b56:	62 30       	cpi	r22, 0x02	; 2
    1b58:	51 f4       	brne	.+20     	; 0x1b6e <pinMode+0x6a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    1b5a:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    1b5c:	f8 94       	cli
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    1b5e:	3c 91       	ld	r19, X
    1b60:	82 2f       	mov	r24, r18
    1b62:	80 95       	com	r24
    1b64:	83 23       	and	r24, r19
    1b66:	8c 93       	st	X, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    1b68:	e8 81       	ld	r30, Y
    1b6a:	2e 2b       	or	r18, r30
    1b6c:	ef cf       	rjmp	.-34     	; 0x1b4c <pinMode+0x48>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    1b6e:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    1b70:	f8 94       	cli
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    1b72:	ec 91       	ld	r30, X
    1b74:	2e 2b       	or	r18, r30
    1b76:	2c 93       	st	X, r18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    1b78:	8f bf       	out	0x3f, r24	; 63
    1b7a:	ea cf       	rjmp	.-44     	; 0x1b50 <pinMode+0x4c>

00001b7c <digitalWrite>:
digitalWrite():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1b7c:	1f 93       	push	r17
    1b7e:	cf 93       	push	r28
    1b80:	df 93       	push	r29
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    1b82:	28 2f       	mov	r18, r24
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	f9 01       	movw	r30, r18
    1b88:	e8 59       	subi	r30, 0x98	; 152
    1b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8c:	84 91       	lpm	r24, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    1b8e:	f9 01       	movw	r30, r18
    1b90:	e1 58       	subi	r30, 0x81	; 129
    1b92:	ff 4f       	sbci	r31, 0xFF	; 255
    1b94:	d4 91       	lpm	r29, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    1b96:	f9 01       	movw	r30, r18
    1b98:	ea 56       	subi	r30, 0x6A	; 106
    1b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9c:	c4 91       	lpm	r28, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    1b9e:	cc 23       	and	r28, r28
    1ba0:	a9 f0       	breq	.+42     	; 0x1bcc <digitalWrite+0x50>
    1ba2:	16 2f       	mov	r17, r22
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1ba4:	81 11       	cpse	r24, r1
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    1ba6:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <turnOffPWM>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    1baa:	ec 2f       	mov	r30, r28
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	ee 0f       	add	r30, r30
    1bb0:	ff 1f       	adc	r31, r31
    1bb2:	e9 54       	subi	r30, 0x49	; 73
    1bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb6:	a5 91       	lpm	r26, Z+
    1bb8:	b4 91       	lpm	r27, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    1bba:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    1bbc:	f8 94       	cli
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    1bbe:	ec 91       	ld	r30, X
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    1bc0:	11 11       	cpse	r17, r1
    1bc2:	08 c0       	rjmp	.+16     	; 0x1bd4 <digitalWrite+0x58>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    1bc4:	d0 95       	com	r29
    1bc6:	de 23       	and	r29, r30
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    1bc8:	dc 93       	st	X, r29
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    1bca:	8f bf       	out	0x3f, r24	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
    1bcc:	df 91       	pop	r29
    1bce:	cf 91       	pop	r28
    1bd0:	1f 91       	pop	r17
    1bd2:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    1bd4:	de 2b       	or	r29, r30
    1bd6:	f8 cf       	rjmp	.-16     	; 0x1bc8 <digitalWrite+0x4c>

00001bd8 <digitalRead>:
digitalRead():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    1bdc:	28 2f       	mov	r18, r24
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	f9 01       	movw	r30, r18
    1be2:	e8 59       	subi	r30, 0x98	; 152
    1be4:	ff 4f       	sbci	r31, 0xFF	; 255
    1be6:	84 91       	lpm	r24, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    1be8:	f9 01       	movw	r30, r18
    1bea:	e1 58       	subi	r30, 0x81	; 129
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	d4 91       	lpm	r29, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    1bf0:	f9 01       	movw	r30, r18
    1bf2:	ea 56       	subi	r30, 0x6A	; 106
    1bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf6:	c4 91       	lpm	r28, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    1bf8:	cc 23       	and	r28, r28
    1bfa:	a1 f0       	breq	.+40     	; 0x1c24 <digitalRead+0x4c>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1bfc:	81 11       	cpse	r24, r1
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    1bfe:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <turnOffPWM>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    1c02:	ec 2f       	mov	r30, r28
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	ee 0f       	add	r30, r30
    1c08:	ff 1f       	adc	r31, r31
    1c0a:	e3 55       	subi	r30, 0x53	; 83
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	a5 91       	lpm	r26, Z+
    1c10:	b4 91       	lpm	r27, Z
    1c12:	ec 91       	ld	r30, X
    1c14:	ed 23       	and	r30, r29
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	09 f4       	brne	.+2      	; 0x1c1e <digitalRead+0x46>
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    1c1e:	df 91       	pop	r29
    1c20:	cf 91       	pop	r28
    1c22:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	fa cf       	rjmp	.-12     	; 0x1c1e <digitalRead+0x46>

00001c2a <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1c2a:	fc 01       	movw	r30, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1c2c:	91 8d       	ldd	r25, Z+25	; 0x19
    1c2e:	22 8d       	ldd	r18, Z+26	; 0x1a
    1c30:	89 2f       	mov	r24, r25
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	80 5c       	subi	r24, 0xC0	; 192
    1c36:	9f 4f       	sbci	r25, 0xFF	; 255
    1c38:	82 1b       	sub	r24, r18
    1c3a:	91 09       	sbc	r25, r1
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:152
}
    1c3c:	8f 73       	andi	r24, 0x3F	; 63
    1c3e:	99 27       	eor	r25, r25
    1c40:	08 95       	ret

00001c42 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
    1c42:	fc 01       	movw	r30, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
    1c44:	91 8d       	ldd	r25, Z+25	; 0x19
    1c46:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c48:	98 17       	cp	r25, r24
    1c4a:	31 f0       	breq	.+12     	; 0x1c58 <HardwareSerial::peek()+0x16>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1c4c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c4e:	e8 0f       	add	r30, r24
    1c50:	f1 1d       	adc	r31, r1
    1c52:	85 8d       	ldd	r24, Z+29	; 0x1d
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1c58:	8f ef       	ldi	r24, 0xFF	; 255
    1c5a:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1c5c:	08 95       	ret

00001c5e <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
    1c5e:	fc 01       	movw	r30, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1c60:	91 8d       	ldd	r25, Z+25	; 0x19
    1c62:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c64:	98 17       	cp	r25, r24
    1c66:	61 f0       	breq	.+24     	; 0x1c80 <HardwareSerial::read()+0x22>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1c68:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1c6a:	ae 0f       	add	r26, r30
    1c6c:	bf 2f       	mov	r27, r31
    1c6e:	b1 1d       	adc	r27, r1
    1c70:	5d 96       	adiw	r26, 0x1d	; 29
    1c72:	8c 91       	ld	r24, X
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1c74:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c76:	9f 5f       	subi	r25, 0xFF	; 255
    1c78:	9f 73       	andi	r25, 0x3F	; 63
    1c7a:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1c80:	8f ef       	ldi	r24, 0xFF	; 255
    1c82:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1c84:	08 95       	ret

00001c86 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    1c86:	fc 01       	movw	r30, r24
    1c88:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
    1c8a:	44 8d       	ldd	r20, Z+28	; 0x1c
    1c8c:	25 2f       	mov	r18, r21
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	84 2f       	mov	r24, r20
    1c92:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1c94:	82 1b       	sub	r24, r18
    1c96:	93 0b       	sbc	r25, r19
    1c98:	54 17       	cp	r21, r20
    1c9a:	10 f0       	brcs	.+4      	; 0x1ca0 <HardwareSerial::availableForWrite()+0x1a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
    1c9c:	cf 96       	adiw	r24, 0x3f	; 63
    1c9e:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
    1ca0:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:188
}
    1ca2:	08 95       	ret

00001ca4 <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1ca4:	88 e9       	ldi	r24, 0x98	; 152
    1ca6:	9f e0       	ldi	r25, 0x0F	; 15
    1ca8:	89 2b       	or	r24, r25
    1caa:	49 f0       	breq	.+18     	; 0x1cbe <serialEventRun()+0x1a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	89 2b       	or	r24, r25
    1cb2:	29 f0       	breq	.+10     	; 0x1cbe <serialEventRun()+0x1a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
    1cb4:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <Serial0_available()>
    1cb8:	81 11       	cpse	r24, r1
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
    1cba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    1cbe:	08 95       	ret

00001cc0 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1cc0:	fc 01       	movw	r30, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1cc2:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1cc4:	a8 0f       	add	r26, r24
    1cc6:	b9 2f       	mov	r27, r25
    1cc8:	b1 1d       	adc	r27, r1
    1cca:	a3 5a       	subi	r26, 0xA3	; 163
    1ccc:	bf 4f       	sbci	r27, 0xFF	; 255
    1cce:	2c 91       	ld	r18, X
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1cd0:	84 8d       	ldd	r24, Z+28	; 0x1c
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	01 96       	adiw	r24, 0x01	; 1
    1cd6:	8f 73       	andi	r24, 0x3F	; 63
    1cd8:	99 27       	eor	r25, r25
    1cda:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
    1cdc:	a6 89       	ldd	r26, Z+22	; 0x16
    1cde:	b7 89       	ldd	r27, Z+23	; 0x17
    1ce0:	2c 93       	st	X, r18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
    1ce2:	a0 89       	ldd	r26, Z+16	; 0x10
    1ce4:	b1 89       	ldd	r27, Z+17	; 0x11
    1ce6:	8c 91       	ld	r24, X
    1ce8:	80 64       	ori	r24, 0x40	; 64
    1cea:	8c 93       	st	X, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
    1cec:	93 8d       	ldd	r25, Z+27	; 0x1b
    1cee:	84 8d       	ldd	r24, Z+28	; 0x1c
    1cf0:	98 13       	cpse	r25, r24
    1cf2:	06 c0       	rjmp	.+12     	; 0x1d00 <HardwareSerial::_tx_udr_empty_irq()+0x40>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    1cf4:	02 88       	ldd	r0, Z+18	; 0x12
    1cf6:	f3 89       	ldd	r31, Z+19	; 0x13
    1cf8:	e0 2d       	mov	r30, r0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	8f 7d       	andi	r24, 0xDF	; 223
    1cfe:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
    1d00:	08 95       	ret

00001d02 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1d02:	cf 93       	push	r28
    1d04:	df 93       	push	r29
    1d06:	ec 01       	movw	r28, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1d08:	88 8d       	ldd	r24, Y+24	; 0x18
    1d0a:	88 23       	and	r24, r24
    1d0c:	b9 f0       	breq	.+46     	; 0x1d3c <HardwareSerial::flush()+0x3a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1d0e:	aa 89       	ldd	r26, Y+18	; 0x12
    1d10:	bb 89       	ldd	r27, Y+19	; 0x13
    1d12:	e8 89       	ldd	r30, Y+16	; 0x10
    1d14:	f9 89       	ldd	r31, Y+17	; 0x11
    1d16:	8c 91       	ld	r24, X
    1d18:	85 fd       	sbrc	r24, 5
    1d1a:	03 c0       	rjmp	.+6      	; 0x1d22 <HardwareSerial::flush()+0x20>
    1d1c:	80 81       	ld	r24, Z
    1d1e:	86 fd       	sbrc	r24, 6
    1d20:	0d c0       	rjmp	.+26     	; 0x1d3c <HardwareSerial::flush()+0x3a>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1d22:	0f b6       	in	r0, 0x3f	; 63
    1d24:	07 fc       	sbrc	r0, 7
    1d26:	f7 cf       	rjmp	.-18     	; 0x1d16 <HardwareSerial::flush()+0x14>
    1d28:	8c 91       	ld	r24, X
    1d2a:	85 ff       	sbrs	r24, 5
    1d2c:	f2 cf       	rjmp	.-28     	; 0x1d12 <HardwareSerial::flush()+0x10>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    1d2e:	80 81       	ld	r24, Z
    1d30:	85 ff       	sbrs	r24, 5
    1d32:	ed cf       	rjmp	.-38     	; 0x1d0e <HardwareSerial::flush()+0xc>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
    1d34:	ce 01       	movw	r24, r28
    1d36:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <HardwareSerial::_tx_udr_empty_irq()>
    1d3a:	e9 cf       	rjmp	.-46     	; 0x1d0e <HardwareSerial::flush()+0xc>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1d3c:	df 91       	pop	r29
    1d3e:	cf 91       	pop	r28
    1d40:	08 95       	ret

00001d42 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
    1d42:	ef 92       	push	r14
    1d44:	ff 92       	push	r15
    1d46:	0f 93       	push	r16
    1d48:	1f 93       	push	r17
    1d4a:	cf 93       	push	r28
    1d4c:	df 93       	push	r29
    1d4e:	ec 01       	movw	r28, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1d54:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d56:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d58:	98 13       	cpse	r25, r24
    1d5a:	16 c0       	rjmp	.+44     	; 0x1d88 <HardwareSerial::write(unsigned char)+0x46>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
    1d5c:	e8 89       	ldd	r30, Y+16	; 0x10
    1d5e:	f9 89       	ldd	r31, Y+17	; 0x11
    1d60:	80 81       	ld	r24, Z
    1d62:	85 ff       	sbrs	r24, 5
    1d64:	11 c0       	rjmp	.+34     	; 0x1d88 <HardwareSerial::write(unsigned char)+0x46>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
    1d66:	ee 89       	ldd	r30, Y+22	; 0x16
    1d68:	ff 89       	ldd	r31, Y+23	; 0x17
    1d6a:	60 83       	st	Z, r22
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
    1d6c:	e8 89       	ldd	r30, Y+16	; 0x10
    1d6e:	f9 89       	ldd	r31, Y+17	; 0x11
    1d70:	80 81       	ld	r24, Z
    1d72:	80 64       	ori	r24, 0x40	; 64
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
    1d74:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	df 91       	pop	r29
    1d7c:	cf 91       	pop	r28
    1d7e:	1f 91       	pop	r17
    1d80:	0f 91       	pop	r16
    1d82:	ff 90       	pop	r15
    1d84:	ef 90       	pop	r14
    1d86:	08 95       	ret
    1d88:	f6 2e       	mov	r15, r22
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1d8a:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1d8c:	10 e0       	ldi	r17, 0x00	; 0
    1d8e:	0f 5f       	subi	r16, 0xFF	; 255
    1d90:	1f 4f       	sbci	r17, 0xFF	; 255
    1d92:	0f 73       	andi	r16, 0x3F	; 63
    1d94:	11 27       	eor	r17, r17
    1d96:	e0 2e       	mov	r14, r16
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1d98:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d9a:	8e 11       	cpse	r24, r14
    1d9c:	0c c0       	rjmp	.+24     	; 0x1db6 <HardwareSerial::write(unsigned char)+0x74>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
    1d9e:	0f b6       	in	r0, 0x3f	; 63
    1da0:	07 fc       	sbrc	r0, 7
    1da2:	fa cf       	rjmp	.-12     	; 0x1d98 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1da4:	e8 89       	ldd	r30, Y+16	; 0x10
    1da6:	f9 89       	ldd	r31, Y+17	; 0x11
    1da8:	80 81       	ld	r24, Z
    1daa:	85 ff       	sbrs	r24, 5
    1dac:	f5 cf       	rjmp	.-22     	; 0x1d98 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
    1dae:	ce 01       	movw	r24, r28
    1db0:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <HardwareSerial::_tx_udr_empty_irq()>
    1db4:	f1 cf       	rjmp	.-30     	; 0x1d98 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1db6:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1db8:	ec 0f       	add	r30, r28
    1dba:	fd 2f       	mov	r31, r29
    1dbc:	f1 1d       	adc	r31, r1
    1dbe:	e3 5a       	subi	r30, 0xA3	; 163
    1dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc2:	f0 82       	st	Z, r15
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
    1dc4:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
    1dc6:	ea 89       	ldd	r30, Y+18	; 0x12
    1dc8:	fb 89       	ldd	r31, Y+19	; 0x13
    1dca:	80 81       	ld	r24, Z
    1dcc:	80 62       	ori	r24, 0x20	; 32
    1dce:	d2 cf       	rjmp	.-92     	; 0x1d74 <HardwareSerial::write(unsigned char)+0x32>

00001dd0 <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:104
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1dd0:	cf 92       	push	r12
    1dd2:	df 92       	push	r13
    1dd4:	ef 92       	push	r14
    1dd6:	ff 92       	push	r15
    1dd8:	1f 93       	push	r17
    1dda:	cf 93       	push	r28
    1ddc:	df 93       	push	r29
    1dde:	ec 01       	movw	r28, r24
    1de0:	6a 01       	movw	r12, r20
    1de2:	7b 01       	movw	r14, r22
    1de4:	12 2f       	mov	r17, r18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:107
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1de6:	e8 89       	ldd	r30, Y+16	; 0x10
    1de8:	f9 89       	ldd	r31, Y+17	; 0x11
    1dea:	82 e0       	ldi	r24, 0x02	; 2
    1dec:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1dee:	c1 14       	cp	r12, r1
    1df0:	81 ee       	ldi	r24, 0xE1	; 225
    1df2:	d8 06       	cpc	r13, r24
    1df4:	e1 04       	cpc	r14, r1
    1df6:	f1 04       	cpc	r15, r1
    1df8:	a1 f0       	breq	.+40     	; 0x1e22 <HardwareSerial::begin(unsigned long, unsigned char)+0x52>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:106 (discriminator 1)
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1dfa:	60 e0       	ldi	r22, 0x00	; 0
    1dfc:	79 e0       	ldi	r23, 0x09	; 9
    1dfe:	8d e3       	ldi	r24, 0x3D	; 61
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	a7 01       	movw	r20, r14
    1e04:	96 01       	movw	r18, r12
    1e06:	0e 94 de 10 	call	0x21bc	; 0x21bc <__udivmodsi4>
    1e0a:	21 50       	subi	r18, 0x01	; 1
    1e0c:	31 09       	sbc	r19, r1
    1e0e:	41 09       	sbc	r20, r1
    1e10:	51 09       	sbc	r21, r1
    1e12:	56 95       	lsr	r21
    1e14:	47 95       	ror	r20
    1e16:	37 95       	ror	r19
    1e18:	27 95       	ror	r18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114 (discriminator 1)
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1e1a:	21 15       	cp	r18, r1
    1e1c:	80 e1       	ldi	r24, 0x10	; 16
    1e1e:	38 07       	cpc	r19, r24
    1e20:	98 f0       	brcs	.+38     	; 0x1e48 <HardwareSerial::begin(unsigned long, unsigned char)+0x78>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:116
  {
    *_ucsra = 0;
    1e22:	e8 89       	ldd	r30, Y+16	; 0x10
    1e24:	f9 89       	ldd	r31, Y+17	; 0x11
    1e26:	10 82       	st	Z, r1
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:117
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1e28:	60 e8       	ldi	r22, 0x80	; 128
    1e2a:	74 e8       	ldi	r23, 0x84	; 132
    1e2c:	8e e1       	ldi	r24, 0x1E	; 30
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	a7 01       	movw	r20, r14
    1e32:	96 01       	movw	r18, r12
    1e34:	0e 94 de 10 	call	0x21bc	; 0x21bc <__udivmodsi4>
    1e38:	21 50       	subi	r18, 0x01	; 1
    1e3a:	31 09       	sbc	r19, r1
    1e3c:	41 09       	sbc	r20, r1
    1e3e:	51 09       	sbc	r21, r1
    1e40:	56 95       	lsr	r21
    1e42:	47 95       	ror	r20
    1e44:	37 95       	ror	r19
    1e46:	27 95       	ror	r18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1e48:	ec 85       	ldd	r30, Y+12	; 0x0c
    1e4a:	fd 85       	ldd	r31, Y+13	; 0x0d
    1e4c:	30 83       	st	Z, r19
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
    1e4e:	ee 85       	ldd	r30, Y+14	; 0x0e
    1e50:	ff 85       	ldd	r31, Y+15	; 0x0f
    1e52:	20 83       	st	Z, r18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:124

  _written = false;
    1e54:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:132
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1e56:	ec 89       	ldd	r30, Y+20	; 0x14
    1e58:	fd 89       	ldd	r31, Y+21	; 0x15
    1e5a:	10 83       	st	Z, r17
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:134
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    1e5c:	ea 89       	ldd	r30, Y+18	; 0x12
    1e5e:	fb 89       	ldd	r31, Y+19	; 0x13
    1e60:	80 81       	ld	r24, Z
    1e62:	88 69       	ori	r24, 0x98	; 152
    1e64:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  *_ucsrb &= ~_BV(UDRIE0);
    1e66:	ea 89       	ldd	r30, Y+18	; 0x12
    1e68:	fb 89       	ldd	r31, Y+19	; 0x13
    1e6a:	80 81       	ld	r24, Z
    1e6c:	8f 7d       	andi	r24, 0xDF	; 223
    1e6e:	80 83       	st	Z, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:136
}
    1e70:	df 91       	pop	r29
    1e72:	cf 91       	pop	r28
    1e74:	1f 91       	pop	r17
    1e76:	ff 90       	pop	r15
    1e78:	ef 90       	pop	r14
    1e7a:	df 90       	pop	r13
    1e7c:	cf 90       	pop	r12
    1e7e:	08 95       	ret

00001e80 <__vector_18>:
__vector_18():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1e80:	1f 92       	push	r1
    1e82:	0f 92       	push	r0
    1e84:	0f b6       	in	r0, 0x3f	; 63
    1e86:	0f 92       	push	r0
    1e88:	11 24       	eor	r1, r1
    1e8a:	2f 93       	push	r18
    1e8c:	8f 93       	push	r24
    1e8e:	9f 93       	push	r25
    1e90:	ef 93       	push	r30
    1e92:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1e94:	e0 91 b4 03 	lds	r30, 0x03B4	; 0x8003b4 <Serial+0x10>
    1e98:	f0 91 b5 03 	lds	r31, 0x03B5	; 0x8003b5 <Serial+0x11>
    1e9c:	80 81       	ld	r24, Z
    1e9e:	e0 91 ba 03 	lds	r30, 0x03BA	; 0x8003ba <Serial+0x16>
    1ea2:	f0 91 bb 03 	lds	r31, 0x03BB	; 0x8003bb <Serial+0x17>
    1ea6:	82 fd       	sbrc	r24, 2
    1ea8:	1b c0       	rjmp	.+54     	; 0x1ee0 <__vector_18+0x60>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1eaa:	90 81       	ld	r25, Z
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1eac:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <Serial+0x19>
    1eb0:	8f 5f       	subi	r24, 0xFF	; 255
    1eb2:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1eb4:	20 91 be 03 	lds	r18, 0x03BE	; 0x8003be <Serial+0x1a>
    1eb8:	82 17       	cp	r24, r18
    1eba:	41 f0       	breq	.+16     	; 0x1ecc <__vector_18+0x4c>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
    1ebc:	e0 91 bd 03 	lds	r30, 0x03BD	; 0x8003bd <Serial+0x19>
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	ec 55       	subi	r30, 0x5C	; 92
    1ec4:	fc 4f       	sbci	r31, 0xFC	; 252
    1ec6:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
    1ec8:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <Serial+0x19>
__vector_18():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    1ecc:	ff 91       	pop	r31
    1ece:	ef 91       	pop	r30
    1ed0:	9f 91       	pop	r25
    1ed2:	8f 91       	pop	r24
    1ed4:	2f 91       	pop	r18
    1ed6:	0f 90       	pop	r0
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	0f 90       	pop	r0
    1edc:	1f 90       	pop	r1
    1ede:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1ee0:	80 81       	ld	r24, Z
__vector_18():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    1ee2:	f4 cf       	rjmp	.-24     	; 0x1ecc <__vector_18+0x4c>

00001ee4 <__vector_19>:
__vector_19():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1ee4:	1f 92       	push	r1
    1ee6:	0f 92       	push	r0
    1ee8:	0f b6       	in	r0, 0x3f	; 63
    1eea:	0f 92       	push	r0
    1eec:	11 24       	eor	r1, r1
    1eee:	2f 93       	push	r18
    1ef0:	3f 93       	push	r19
    1ef2:	4f 93       	push	r20
    1ef4:	5f 93       	push	r21
    1ef6:	6f 93       	push	r22
    1ef8:	7f 93       	push	r23
    1efa:	8f 93       	push	r24
    1efc:	9f 93       	push	r25
    1efe:	af 93       	push	r26
    1f00:	bf 93       	push	r27
    1f02:	ef 93       	push	r30
    1f04:	ff 93       	push	r31
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    1f06:	84 ea       	ldi	r24, 0xA4	; 164
    1f08:	93 e0       	ldi	r25, 0x03	; 3
    1f0a:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    1f0e:	ff 91       	pop	r31
    1f10:	ef 91       	pop	r30
    1f12:	bf 91       	pop	r27
    1f14:	af 91       	pop	r26
    1f16:	9f 91       	pop	r25
    1f18:	8f 91       	pop	r24
    1f1a:	7f 91       	pop	r23
    1f1c:	6f 91       	pop	r22
    1f1e:	5f 91       	pop	r21
    1f20:	4f 91       	pop	r20
    1f22:	3f 91       	pop	r19
    1f24:	2f 91       	pop	r18
    1f26:	0f 90       	pop	r0
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	0f 90       	pop	r0
    1f2c:	1f 90       	pop	r1
    1f2e:	18 95       	reti

00001f30 <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1f30:	84 ea       	ldi	r24, 0xA4	; 164
    1f32:	93 e0       	ldi	r25, 0x03	; 3
    1f34:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <HardwareSerial::available()>
    1f38:	21 e0       	ldi	r18, 0x01	; 1
    1f3a:	89 2b       	or	r24, r25
    1f3c:	09 f4       	brne	.+2      	; 0x1f40 <Serial0_available()+0x10>
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
    1f40:	82 2f       	mov	r24, r18
    1f42:	08 95       	ret

00001f44 <_GLOBAL__sub_I___vector_18>:
_ZN5PrintC4Ev():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1f44:	e4 ea       	ldi	r30, 0xA4	; 164
    1f46:	f3 e0       	ldi	r31, 0x03	; 3
    1f48:	13 82       	std	Z+3, r1	; 0x03
    1f4a:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1f4c:	88 ee       	ldi	r24, 0xE8	; 232
    1f4e:	93 e0       	ldi	r25, 0x03	; 3
    1f50:	a0 e0       	ldi	r26, 0x00	; 0
    1f52:	b0 e0       	ldi	r27, 0x00	; 0
    1f54:	84 83       	std	Z+4, r24	; 0x04
    1f56:	95 83       	std	Z+5, r25	; 0x05
    1f58:	a6 83       	std	Z+6, r26	; 0x06
    1f5a:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1f5c:	88 e2       	ldi	r24, 0x28	; 40
    1f5e:	93 e0       	ldi	r25, 0x03	; 3
    1f60:	91 83       	std	Z+1, r25	; 0x01
    1f62:	80 83       	st	Z, r24
    1f64:	85 ec       	ldi	r24, 0xC5	; 197
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	95 87       	std	Z+13, r25	; 0x0d
    1f6a:	84 87       	std	Z+12, r24	; 0x0c
    1f6c:	84 ec       	ldi	r24, 0xC4	; 196
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	97 87       	std	Z+15, r25	; 0x0f
    1f72:	86 87       	std	Z+14, r24	; 0x0e
    1f74:	80 ec       	ldi	r24, 0xC0	; 192
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	91 8b       	std	Z+17, r25	; 0x11
    1f7a:	80 8b       	std	Z+16, r24	; 0x10
    1f7c:	81 ec       	ldi	r24, 0xC1	; 193
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	93 8b       	std	Z+19, r25	; 0x13
    1f82:	82 8b       	std	Z+18, r24	; 0x12
    1f84:	82 ec       	ldi	r24, 0xC2	; 194
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	95 8b       	std	Z+21, r25	; 0x15
    1f8a:	84 8b       	std	Z+20, r24	; 0x14
    1f8c:	86 ec       	ldi	r24, 0xC6	; 198
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	97 8b       	std	Z+23, r25	; 0x17
    1f92:	86 8b       	std	Z+22, r24	; 0x16
    1f94:	11 8e       	std	Z+25, r1	; 0x19
    1f96:	12 8e       	std	Z+26, r1	; 0x1a
    1f98:	13 8e       	std	Z+27, r1	; 0x1b
    1f9a:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_18():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
    1f9c:	08 95       	ret

00001f9e <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:228

  fdev_setup_stream(&f, printf_putchar, NULL, _FDEV_SETUP_WRITE);
  fdev_set_udata(&f, this);
  va_start(ap, format);
  return vfprintf_P(&f, (const char *)format, ap);
}
    1f9e:	af 92       	push	r10
    1fa0:	bf 92       	push	r11
    1fa2:	cf 92       	push	r12
    1fa4:	df 92       	push	r13
    1fa6:	ef 92       	push	r14
    1fa8:	ff 92       	push	r15
    1faa:	0f 93       	push	r16
    1fac:	1f 93       	push	r17
    1fae:	cf 93       	push	r28
    1fb0:	df 93       	push	r29
    1fb2:	6c 01       	movw	r12, r24
    1fb4:	7b 01       	movw	r14, r22
    1fb6:	8b 01       	movw	r16, r22
    1fb8:	04 0f       	add	r16, r20
    1fba:	15 1f       	adc	r17, r21
    1fbc:	eb 01       	movw	r28, r22
    1fbe:	5e 01       	movw	r10, r28
    1fc0:	ae 18       	sub	r10, r14
    1fc2:	bf 08       	sbc	r11, r15
    1fc4:	c0 17       	cp	r28, r16
    1fc6:	d1 07       	cpc	r29, r17
    1fc8:	59 f0       	breq	.+22     	; 0x1fe0 <Print::write(unsigned char const*, unsigned int)+0x42>
    1fca:	69 91       	ld	r22, Y+
    1fcc:	d6 01       	movw	r26, r12
    1fce:	ed 91       	ld	r30, X+
    1fd0:	fc 91       	ld	r31, X
    1fd2:	01 90       	ld	r0, Z+
    1fd4:	f0 81       	ld	r31, Z
    1fd6:	e0 2d       	mov	r30, r0
    1fd8:	c6 01       	movw	r24, r12
    1fda:	09 95       	icall
    1fdc:	89 2b       	or	r24, r25
    1fde:	79 f7       	brne	.-34     	; 0x1fbe <Print::write(unsigned char const*, unsigned int)+0x20>
    1fe0:	c5 01       	movw	r24, r10
    1fe2:	df 91       	pop	r29
    1fe4:	cf 91       	pop	r28
    1fe6:	1f 91       	pop	r17
    1fe8:	0f 91       	pop	r16
    1fea:	ff 90       	pop	r15
    1fec:	ef 90       	pop	r14
    1fee:	df 90       	pop	r13
    1ff0:	cf 90       	pop	r12
    1ff2:	bf 90       	pop	r11
    1ff4:	af 90       	pop	r10
    1ff6:	08 95       	ret

00001ff8 <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    1ff8:	fb 01       	movw	r30, r22
    1ffa:	01 90       	ld	r0, Z+
    1ffc:	00 20       	and	r0, r0
    1ffe:	e9 f7       	brne	.-6      	; 0x1ffa <Print::write(char const*) [clone .part.2]+0x2>
    2000:	31 97       	sbiw	r30, 0x01	; 1
    2002:	af 01       	movw	r20, r30
    2004:	46 1b       	sub	r20, r22
    2006:	57 0b       	sbc	r21, r23
    2008:	dc 01       	movw	r26, r24
    200a:	ed 91       	ld	r30, X+
    200c:	fc 91       	ld	r31, X
    200e:	02 80       	ldd	r0, Z+2	; 0x02
    2010:	f3 81       	ldd	r31, Z+3	; 0x03
    2012:	e0 2d       	mov	r30, r0
    2014:	09 94       	ijmp

00002016 <Print::print(char const*)>:
    2016:	61 15       	cp	r22, r1
    2018:	71 05       	cpc	r23, r1
    201a:	11 f0       	breq	.+4      	; 0x2020 <Print::print(char const*)+0xa>
    201c:	0c 94 fc 0f 	jmp	0x1ff8	; 0x1ff8 <Print::write(char const*) [clone .part.2]>
_ZN5Print5printEPKc():
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	08 95       	ret

00002026 <Print::print(char)>:
_ZN5Print5printEc():
    2026:	dc 01       	movw	r26, r24
    2028:	ed 91       	ld	r30, X+
    202a:	fc 91       	ld	r31, X
    202c:	01 90       	ld	r0, Z+
    202e:	f0 81       	ld	r31, Z
    2030:	e0 2d       	mov	r30, r0
    2032:	09 94       	ijmp

00002034 <Print::println()>:
_ZN5Print5writeEPKc():
    2034:	66 e3       	ldi	r22, 0x36	; 54
    2036:	73 e0       	ldi	r23, 0x03	; 3
    2038:	0c 94 fc 0f 	jmp	0x1ff8	; 0x1ff8 <Print::write(char const*) [clone .part.2]>

0000203c <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:233

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    203c:	8f 92       	push	r8
    203e:	9f 92       	push	r9
    2040:	af 92       	push	r10
    2042:	bf 92       	push	r11
    2044:	ef 92       	push	r14
    2046:	ff 92       	push	r15
    2048:	0f 93       	push	r16
    204a:	1f 93       	push	r17
    204c:	cf 93       	push	r28
    204e:	df 93       	push	r29
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
    2054:	a1 97       	sbiw	r28, 0x21	; 33
    2056:	0f b6       	in	r0, 0x3f	; 63
    2058:	f8 94       	cli
    205a:	de bf       	out	0x3e, r29	; 62
    205c:	0f be       	out	0x3f, r0	; 63
    205e:	cd bf       	out	0x3d, r28	; 61
    2060:	7c 01       	movw	r14, r24
    2062:	fa 01       	movw	r30, r20
    2064:	cb 01       	movw	r24, r22
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:237
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    2066:	19 a2       	std	Y+33, r1	; 0x21
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    2068:	22 30       	cpi	r18, 0x02	; 2
    206a:	08 f4       	brcc	.+2      	; 0x206e <Print::printNumber(unsigned long, unsigned char)+0x32>
    206c:	2a e0       	ldi	r18, 0x0A	; 10
    206e:	8e 01       	movw	r16, r28
    2070:	0f 5d       	subi	r16, 0xDF	; 223
    2072:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
    2074:	82 2e       	mov	r8, r18
    2076:	91 2c       	mov	r9, r1
    2078:	b1 2c       	mov	r11, r1
    207a:	a1 2c       	mov	r10, r1
    207c:	bf 01       	movw	r22, r30
    207e:	a5 01       	movw	r20, r10
    2080:	94 01       	movw	r18, r8
    2082:	0e 94 de 10 	call	0x21bc	; 0x21bc <__udivmodsi4>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:244
    n /= base;
    2086:	f9 01       	movw	r30, r18
    2088:	ca 01       	movw	r24, r20
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    208a:	6a 30       	cpi	r22, 0x0A	; 10
    208c:	0c f5       	brge	.+66     	; 0x20d0 <Print::printNumber(unsigned long, unsigned char)+0x94>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:246 (discriminator 1)
    208e:	60 5d       	subi	r22, 0xD0	; 208
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:246 (discriminator 4)
    2090:	d8 01       	movw	r26, r16
    2092:	6e 93       	st	-X, r22
    2094:	8d 01       	movw	r16, r26
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:247 (discriminator 4)
  } while(n);
    2096:	23 2b       	or	r18, r19
    2098:	24 2b       	or	r18, r20
    209a:	25 2b       	or	r18, r21
    209c:	79 f7       	brne	.-34     	; 0x207c <Print::printNumber(unsigned long, unsigned char)+0x40>
_ZN5Print5writeEPKc():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	80 e0       	ldi	r24, 0x00	; 0
    20a2:	10 97       	sbiw	r26, 0x00	; 0
    20a4:	21 f0       	breq	.+8      	; 0x20ae <Print::printNumber(unsigned long, unsigned char)+0x72>
    20a6:	bd 01       	movw	r22, r26
    20a8:	c7 01       	movw	r24, r14
    20aa:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:250

  return write(str);
}
    20ae:	a1 96       	adiw	r28, 0x21	; 33
    20b0:	0f b6       	in	r0, 0x3f	; 63
    20b2:	f8 94       	cli
    20b4:	de bf       	out	0x3e, r29	; 62
    20b6:	0f be       	out	0x3f, r0	; 63
    20b8:	cd bf       	out	0x3d, r28	; 61
    20ba:	df 91       	pop	r29
    20bc:	cf 91       	pop	r28
    20be:	1f 91       	pop	r17
    20c0:	0f 91       	pop	r16
    20c2:	ff 90       	pop	r15
    20c4:	ef 90       	pop	r14
    20c6:	bf 90       	pop	r11
    20c8:	af 90       	pop	r10
    20ca:	9f 90       	pop	r9
    20cc:	8f 90       	pop	r8
    20ce:	08 95       	ret
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:246 (discriminator 2)

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    20d0:	69 5c       	subi	r22, 0xC9	; 201
    20d2:	de cf       	rjmp	.-68     	; 0x2090 <Print::printNumber(unsigned long, unsigned char)+0x54>

000020d4 <Print::print(long, int)>:
_ZN5Print5printEli():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:88
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    20d4:	cf 92       	push	r12
    20d6:	df 92       	push	r13
    20d8:	ef 92       	push	r14
    20da:	ff 92       	push	r15
    20dc:	0f 93       	push	r16
    20de:	1f 93       	push	r17
    20e0:	cf 93       	push	r28
    20e2:	df 93       	push	r29
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:89
  if (base == 0) {
    20e4:	21 15       	cp	r18, r1
    20e6:	31 05       	cpc	r19, r1
    20e8:	81 f4       	brne	.+32     	; 0x210a <Print::print(long, int)+0x36>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:90
    return write(n);
    20ea:	dc 01       	movw	r26, r24
    20ec:	ed 91       	ld	r30, X+
    20ee:	fc 91       	ld	r31, X
    20f0:	01 90       	ld	r0, Z+
    20f2:	f0 81       	ld	r31, Z
    20f4:	e0 2d       	mov	r30, r0
    20f6:	64 2f       	mov	r22, r20
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:101
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    20f8:	df 91       	pop	r29
    20fa:	cf 91       	pop	r28
    20fc:	1f 91       	pop	r17
    20fe:	0f 91       	pop	r16
    2100:	ff 90       	pop	r15
    2102:	ef 90       	pop	r14
    2104:	df 90       	pop	r13
    2106:	cf 90       	pop	r12
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:90
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    2108:	09 94       	ijmp
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:91
  } else if (base == 10) {
    210a:	2a 30       	cpi	r18, 0x0A	; 10
    210c:	31 05       	cpc	r19, r1
    210e:	01 f5       	brne	.+64     	; 0x2150 <Print::print(long, int)+0x7c>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:97
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    2110:	2a e0       	ldi	r18, 0x0A	; 10
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:92
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
    2112:	77 ff       	sbrs	r23, 7
    2114:	1d c0       	rjmp	.+58     	; 0x2150 <Print::print(long, int)+0x7c>
    2116:	6a 01       	movw	r12, r20
    2118:	7b 01       	movw	r14, r22
    211a:	ec 01       	movw	r28, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:93
      int t = print('-');
    211c:	6d e2       	ldi	r22, 0x2D	; 45
    211e:	0e 94 13 10 	call	0x2026	; 0x2026 <Print::print(char)>
    2122:	8c 01       	movw	r16, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:94
      n = -n;
    2124:	44 27       	eor	r20, r20
    2126:	55 27       	eor	r21, r21
    2128:	ba 01       	movw	r22, r20
    212a:	4c 19       	sub	r20, r12
    212c:	5d 09       	sbc	r21, r13
    212e:	6e 09       	sbc	r22, r14
    2130:	7f 09       	sbc	r23, r15
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:95
      return printNumber(n, 10) + t;
    2132:	2a e0       	ldi	r18, 0x0A	; 10
    2134:	ce 01       	movw	r24, r28
    2136:	0e 94 1e 10 	call	0x203c	; 0x203c <Print::printNumber(unsigned long, unsigned char)>
    213a:	80 0f       	add	r24, r16
    213c:	91 1f       	adc	r25, r17
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:101
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    213e:	df 91       	pop	r29
    2140:	cf 91       	pop	r28
    2142:	1f 91       	pop	r17
    2144:	0f 91       	pop	r16
    2146:	ff 90       	pop	r15
    2148:	ef 90       	pop	r14
    214a:	df 90       	pop	r13
    214c:	cf 90       	pop	r12
    214e:	08 95       	ret
    2150:	df 91       	pop	r29
    2152:	cf 91       	pop	r28
    2154:	1f 91       	pop	r17
    2156:	0f 91       	pop	r16
    2158:	ff 90       	pop	r15
    215a:	ef 90       	pop	r14
    215c:	df 90       	pop	r13
    215e:	cf 90       	pop	r12
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:99
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    2160:	0c 94 1e 10 	jmp	0x203c	; 0x203c <Print::printNumber(unsigned long, unsigned char)>

00002164 <Print::print(int, int)>:
_ZN5Print5printEii():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:78
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    2164:	9a 01       	movw	r18, r20
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:79
  return print((long) n, base);
    2166:	ab 01       	movw	r20, r22
    2168:	77 0f       	add	r23, r23
    216a:	66 0b       	sbc	r22, r22
    216c:	77 0b       	sbc	r23, r23
    216e:	0c 94 6a 10 	jmp	0x20d4	; 0x20d4 <Print::print(long, int)>

00002172 <Print::println(int, int)>:
_ZN5Print7printlnEii():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:160
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    2172:	0f 93       	push	r16
    2174:	1f 93       	push	r17
    2176:	cf 93       	push	r28
    2178:	df 93       	push	r29
    217a:	ec 01       	movw	r28, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:161
  size_t n = print(num, base);
    217c:	0e 94 b2 10 	call	0x2164	; 0x2164 <Print::print(int, int)>
    2180:	8c 01       	movw	r16, r24
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:162
  n += println();
    2182:	ce 01       	movw	r24, r28
    2184:	0e 94 1a 10 	call	0x2034	; 0x2034 <Print::println()>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:164
  return n;
}
    2188:	80 0f       	add	r24, r16
    218a:	91 1f       	adc	r25, r17
    218c:	df 91       	pop	r29
    218e:	cf 91       	pop	r28
    2190:	1f 91       	pop	r17
    2192:	0f 91       	pop	r16
    2194:	08 95       	ret

00002196 <__cxa_pure_virtual>:
__cxa_pure_virtual():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/abi.cpp:27
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    2196:	0e 94 41 12 	call	0x2482	; 0x2482 <abort>

0000219a <initVariant>:
initVariant():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    219a:	08 95       	ret

0000219c <main>:
main():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    219c:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <init>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    21a0:	0e 94 cd 10 	call	0x219a	; 0x219a <initVariant>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    21a4:	0e 94 92 00 	call	0x124	; 0x124 <setup>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    21a8:	c2 e5       	ldi	r28, 0x52	; 82
    21aa:	de e0       	ldi	r29, 0x0E	; 14
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    21ac:	0e 94 8b 02 	call	0x516	; 0x516 <loop>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    21b0:	20 97       	sbiw	r28, 0x00	; 0
    21b2:	e1 f3       	breq	.-8      	; 0x21ac <main+0x10>
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    21b4:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <serialEventRun()>
    21b8:	f9 cf       	rjmp	.-14     	; 0x21ac <main+0x10>

000021ba <yield>:
__empty():
C:\Users\Jacek\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    21ba:	08 95       	ret

000021bc <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    21bc:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    21be:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    21c0:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    21c2:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    21c4:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    21c6:	0d c0       	rjmp	.+26     	; 0x21e2 <__udivmodsi4_ep>

000021c8 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    21c8:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    21ca:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    21cc:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    21ce:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    21d0:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    21d2:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    21d4:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    21d6:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    21d8:	20 f0       	brcs	.+8      	; 0x21e2 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    21da:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    21dc:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    21de:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    21e0:	f5 0b       	sbc	r31, r21

000021e2 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    21e2:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    21e4:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    21e6:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    21e8:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    21ea:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    21ec:	69 f7       	brne	.-38     	; 0x21c8 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    21ee:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    21f0:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    21f2:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    21f4:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    21f6:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    21f8:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    21fa:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    21fc:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    21fe:	08 95       	ret

00002200 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    2200:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    2202:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    2204:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    2206:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    2208:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    220a:	09 94       	ijmp

0000220c <__usmulhisi3>:
__usmulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:545
    220c:	0e 94 0d 11 	call	0x221a	; 0x221a <__umulhisi3>

00002210 <__usmulhisi3_tail>:
__usmulhisi3_tail():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:551
    2210:	b7 ff       	sbrs	r27, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:552
    2212:	08 95       	ret
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:553
    2214:	82 1b       	sub	r24, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:554
    2216:	93 0b       	sbc	r25, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:555
    2218:	08 95       	ret

0000221a <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    221a:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    221c:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    221e:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    2220:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    2222:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    2224:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    2226:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    2228:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    222a:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    222c:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    222e:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    2230:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    2232:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    2234:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    2236:	08 95       	ret

00002238 <malloc>:
malloc():
    2238:	0f 93       	push	r16
    223a:	1f 93       	push	r17
    223c:	cf 93       	push	r28
    223e:	df 93       	push	r29
    2240:	82 30       	cpi	r24, 0x02	; 2
    2242:	91 05       	cpc	r25, r1
    2244:	10 f4       	brcc	.+4      	; 0x224a <malloc+0x12>
    2246:	82 e0       	ldi	r24, 0x02	; 2
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	e0 91 43 04 	lds	r30, 0x0443	; 0x800443 <__flp>
    224e:	f0 91 44 04 	lds	r31, 0x0444	; 0x800444 <__flp+0x1>
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	a0 e0       	ldi	r26, 0x00	; 0
    225a:	30 97       	sbiw	r30, 0x00	; 0
    225c:	99 f4       	brne	.+38     	; 0x2284 <malloc+0x4c>
    225e:	21 15       	cp	r18, r1
    2260:	31 05       	cpc	r19, r1
    2262:	09 f4       	brne	.+2      	; 0x2266 <malloc+0x2e>
    2264:	4a c0       	rjmp	.+148    	; 0x22fa <malloc+0xc2>
    2266:	28 1b       	sub	r18, r24
    2268:	39 0b       	sbc	r19, r25
    226a:	24 30       	cpi	r18, 0x04	; 4
    226c:	31 05       	cpc	r19, r1
    226e:	d8 f5       	brcc	.+118    	; 0x22e6 <malloc+0xae>
    2270:	8a 81       	ldd	r24, Y+2	; 0x02
    2272:	9b 81       	ldd	r25, Y+3	; 0x03
    2274:	61 15       	cp	r22, r1
    2276:	71 05       	cpc	r23, r1
    2278:	89 f1       	breq	.+98     	; 0x22dc <malloc+0xa4>
    227a:	fb 01       	movw	r30, r22
    227c:	93 83       	std	Z+3, r25	; 0x03
    227e:	82 83       	std	Z+2, r24	; 0x02
    2280:	fe 01       	movw	r30, r28
    2282:	11 c0       	rjmp	.+34     	; 0x22a6 <malloc+0x6e>
    2284:	40 81       	ld	r20, Z
    2286:	51 81       	ldd	r21, Z+1	; 0x01
    2288:	02 81       	ldd	r16, Z+2	; 0x02
    228a:	13 81       	ldd	r17, Z+3	; 0x03
    228c:	48 17       	cp	r20, r24
    228e:	59 07       	cpc	r21, r25
    2290:	e0 f0       	brcs	.+56     	; 0x22ca <malloc+0x92>
    2292:	48 17       	cp	r20, r24
    2294:	59 07       	cpc	r21, r25
    2296:	99 f4       	brne	.+38     	; 0x22be <malloc+0x86>
    2298:	10 97       	sbiw	r26, 0x00	; 0
    229a:	61 f0       	breq	.+24     	; 0x22b4 <malloc+0x7c>
    229c:	12 96       	adiw	r26, 0x02	; 2
    229e:	0c 93       	st	X, r16
    22a0:	12 97       	sbiw	r26, 0x02	; 2
    22a2:	13 96       	adiw	r26, 0x03	; 3
    22a4:	1c 93       	st	X, r17
    22a6:	32 96       	adiw	r30, 0x02	; 2
    22a8:	cf 01       	movw	r24, r30
    22aa:	df 91       	pop	r29
    22ac:	cf 91       	pop	r28
    22ae:	1f 91       	pop	r17
    22b0:	0f 91       	pop	r16
    22b2:	08 95       	ret
    22b4:	00 93 43 04 	sts	0x0443, r16	; 0x800443 <__flp>
    22b8:	10 93 44 04 	sts	0x0444, r17	; 0x800444 <__flp+0x1>
    22bc:	f4 cf       	rjmp	.-24     	; 0x22a6 <malloc+0x6e>
    22be:	21 15       	cp	r18, r1
    22c0:	31 05       	cpc	r19, r1
    22c2:	51 f0       	breq	.+20     	; 0x22d8 <malloc+0xa0>
    22c4:	42 17       	cp	r20, r18
    22c6:	53 07       	cpc	r21, r19
    22c8:	38 f0       	brcs	.+14     	; 0x22d8 <malloc+0xa0>
    22ca:	a9 01       	movw	r20, r18
    22cc:	db 01       	movw	r26, r22
    22ce:	9a 01       	movw	r18, r20
    22d0:	bd 01       	movw	r22, r26
    22d2:	df 01       	movw	r26, r30
    22d4:	f8 01       	movw	r30, r16
    22d6:	c1 cf       	rjmp	.-126    	; 0x225a <malloc+0x22>
    22d8:	ef 01       	movw	r28, r30
    22da:	f9 cf       	rjmp	.-14     	; 0x22ce <malloc+0x96>
    22dc:	90 93 44 04 	sts	0x0444, r25	; 0x800444 <__flp+0x1>
    22e0:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <__flp>
    22e4:	cd cf       	rjmp	.-102    	; 0x2280 <malloc+0x48>
    22e6:	fe 01       	movw	r30, r28
    22e8:	e2 0f       	add	r30, r18
    22ea:	f3 1f       	adc	r31, r19
    22ec:	81 93       	st	Z+, r24
    22ee:	91 93       	st	Z+, r25
    22f0:	22 50       	subi	r18, 0x02	; 2
    22f2:	31 09       	sbc	r19, r1
    22f4:	39 83       	std	Y+1, r19	; 0x01
    22f6:	28 83       	st	Y, r18
    22f8:	d7 cf       	rjmp	.-82     	; 0x22a8 <malloc+0x70>
    22fa:	20 91 41 04 	lds	r18, 0x0441	; 0x800441 <__brkval>
    22fe:	30 91 42 04 	lds	r19, 0x0442	; 0x800442 <__brkval+0x1>
    2302:	23 2b       	or	r18, r19
    2304:	41 f4       	brne	.+16     	; 0x2316 <malloc+0xde>
    2306:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    230a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    230e:	30 93 42 04 	sts	0x0442, r19	; 0x800442 <__brkval+0x1>
    2312:	20 93 41 04 	sts	0x0441, r18	; 0x800441 <__brkval>
    2316:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    231a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    231e:	21 15       	cp	r18, r1
    2320:	31 05       	cpc	r19, r1
    2322:	41 f4       	brne	.+16     	; 0x2334 <malloc+0xfc>
    2324:	2d b7       	in	r18, 0x3d	; 61
    2326:	3e b7       	in	r19, 0x3e	; 62
    2328:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    232c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2330:	24 1b       	sub	r18, r20
    2332:	35 0b       	sbc	r19, r21
    2334:	e0 91 41 04 	lds	r30, 0x0441	; 0x800441 <__brkval>
    2338:	f0 91 42 04 	lds	r31, 0x0442	; 0x800442 <__brkval+0x1>
    233c:	e2 17       	cp	r30, r18
    233e:	f3 07       	cpc	r31, r19
    2340:	a0 f4       	brcc	.+40     	; 0x236a <malloc+0x132>
    2342:	2e 1b       	sub	r18, r30
    2344:	3f 0b       	sbc	r19, r31
    2346:	28 17       	cp	r18, r24
    2348:	39 07       	cpc	r19, r25
    234a:	78 f0       	brcs	.+30     	; 0x236a <malloc+0x132>
    234c:	ac 01       	movw	r20, r24
    234e:	4e 5f       	subi	r20, 0xFE	; 254
    2350:	5f 4f       	sbci	r21, 0xFF	; 255
    2352:	24 17       	cp	r18, r20
    2354:	35 07       	cpc	r19, r21
    2356:	48 f0       	brcs	.+18     	; 0x236a <malloc+0x132>
    2358:	4e 0f       	add	r20, r30
    235a:	5f 1f       	adc	r21, r31
    235c:	50 93 42 04 	sts	0x0442, r21	; 0x800442 <__brkval+0x1>
    2360:	40 93 41 04 	sts	0x0441, r20	; 0x800441 <__brkval>
    2364:	81 93       	st	Z+, r24
    2366:	91 93       	st	Z+, r25
    2368:	9f cf       	rjmp	.-194    	; 0x22a8 <malloc+0x70>
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	e0 e0       	ldi	r30, 0x00	; 0
    236e:	9c cf       	rjmp	.-200    	; 0x22a8 <malloc+0x70>

00002370 <free>:
free():
    2370:	cf 93       	push	r28
    2372:	df 93       	push	r29
    2374:	00 97       	sbiw	r24, 0x00	; 0
    2376:	e9 f0       	breq	.+58     	; 0x23b2 <free+0x42>
    2378:	fc 01       	movw	r30, r24
    237a:	32 97       	sbiw	r30, 0x02	; 2
    237c:	13 82       	std	Z+3, r1	; 0x03
    237e:	12 82       	std	Z+2, r1	; 0x02
    2380:	a0 91 43 04 	lds	r26, 0x0443	; 0x800443 <__flp>
    2384:	b0 91 44 04 	lds	r27, 0x0444	; 0x800444 <__flp+0x1>
    2388:	ed 01       	movw	r28, r26
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	10 97       	sbiw	r26, 0x00	; 0
    2390:	a1 f4       	brne	.+40     	; 0x23ba <free+0x4a>
    2392:	20 81       	ld	r18, Z
    2394:	31 81       	ldd	r19, Z+1	; 0x01
    2396:	82 0f       	add	r24, r18
    2398:	93 1f       	adc	r25, r19
    239a:	20 91 41 04 	lds	r18, 0x0441	; 0x800441 <__brkval>
    239e:	30 91 42 04 	lds	r19, 0x0442	; 0x800442 <__brkval+0x1>
    23a2:	28 17       	cp	r18, r24
    23a4:	39 07       	cpc	r19, r25
    23a6:	09 f0       	breq	.+2      	; 0x23aa <free+0x3a>
    23a8:	61 c0       	rjmp	.+194    	; 0x246c <free+0xfc>
    23aa:	f0 93 42 04 	sts	0x0442, r31	; 0x800442 <__brkval+0x1>
    23ae:	e0 93 41 04 	sts	0x0441, r30	; 0x800441 <__brkval>
    23b2:	df 91       	pop	r29
    23b4:	cf 91       	pop	r28
    23b6:	08 95       	ret
    23b8:	ea 01       	movw	r28, r20
    23ba:	ce 17       	cp	r28, r30
    23bc:	df 07       	cpc	r29, r31
    23be:	e8 f5       	brcc	.+122    	; 0x243a <free+0xca>
    23c0:	4a 81       	ldd	r20, Y+2	; 0x02
    23c2:	5b 81       	ldd	r21, Y+3	; 0x03
    23c4:	9e 01       	movw	r18, r28
    23c6:	41 15       	cp	r20, r1
    23c8:	51 05       	cpc	r21, r1
    23ca:	b1 f7       	brne	.-20     	; 0x23b8 <free+0x48>
    23cc:	e9 01       	movw	r28, r18
    23ce:	fb 83       	std	Y+3, r31	; 0x03
    23d0:	ea 83       	std	Y+2, r30	; 0x02
    23d2:	49 91       	ld	r20, Y+
    23d4:	59 91       	ld	r21, Y+
    23d6:	c4 0f       	add	r28, r20
    23d8:	d5 1f       	adc	r29, r21
    23da:	ec 17       	cp	r30, r28
    23dc:	fd 07       	cpc	r31, r29
    23de:	61 f4       	brne	.+24     	; 0x23f8 <free+0x88>
    23e0:	80 81       	ld	r24, Z
    23e2:	91 81       	ldd	r25, Z+1	; 0x01
    23e4:	02 96       	adiw	r24, 0x02	; 2
    23e6:	84 0f       	add	r24, r20
    23e8:	95 1f       	adc	r25, r21
    23ea:	e9 01       	movw	r28, r18
    23ec:	99 83       	std	Y+1, r25	; 0x01
    23ee:	88 83       	st	Y, r24
    23f0:	82 81       	ldd	r24, Z+2	; 0x02
    23f2:	93 81       	ldd	r25, Z+3	; 0x03
    23f4:	9b 83       	std	Y+3, r25	; 0x03
    23f6:	8a 83       	std	Y+2, r24	; 0x02
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	e0 e0       	ldi	r30, 0x00	; 0
    23fc:	12 96       	adiw	r26, 0x02	; 2
    23fe:	8d 91       	ld	r24, X+
    2400:	9c 91       	ld	r25, X
    2402:	13 97       	sbiw	r26, 0x03	; 3
    2404:	00 97       	sbiw	r24, 0x00	; 0
    2406:	b9 f5       	brne	.+110    	; 0x2476 <free+0x106>
    2408:	2d 91       	ld	r18, X+
    240a:	3c 91       	ld	r19, X
    240c:	11 97       	sbiw	r26, 0x01	; 1
    240e:	cd 01       	movw	r24, r26
    2410:	02 96       	adiw	r24, 0x02	; 2
    2412:	82 0f       	add	r24, r18
    2414:	93 1f       	adc	r25, r19
    2416:	20 91 41 04 	lds	r18, 0x0441	; 0x800441 <__brkval>
    241a:	30 91 42 04 	lds	r19, 0x0442	; 0x800442 <__brkval+0x1>
    241e:	28 17       	cp	r18, r24
    2420:	39 07       	cpc	r19, r25
    2422:	39 f6       	brne	.-114    	; 0x23b2 <free+0x42>
    2424:	30 97       	sbiw	r30, 0x00	; 0
    2426:	51 f5       	brne	.+84     	; 0x247c <free+0x10c>
    2428:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <__flp+0x1>
    242c:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <__flp>
    2430:	b0 93 42 04 	sts	0x0442, r27	; 0x800442 <__brkval+0x1>
    2434:	a0 93 41 04 	sts	0x0441, r26	; 0x800441 <__brkval>
    2438:	bc cf       	rjmp	.-136    	; 0x23b2 <free+0x42>
    243a:	d3 83       	std	Z+3, r29	; 0x03
    243c:	c2 83       	std	Z+2, r28	; 0x02
    243e:	40 81       	ld	r20, Z
    2440:	51 81       	ldd	r21, Z+1	; 0x01
    2442:	84 0f       	add	r24, r20
    2444:	95 1f       	adc	r25, r21
    2446:	c8 17       	cp	r28, r24
    2448:	d9 07       	cpc	r29, r25
    244a:	61 f4       	brne	.+24     	; 0x2464 <free+0xf4>
    244c:	4e 5f       	subi	r20, 0xFE	; 254
    244e:	5f 4f       	sbci	r21, 0xFF	; 255
    2450:	88 81       	ld	r24, Y
    2452:	99 81       	ldd	r25, Y+1	; 0x01
    2454:	48 0f       	add	r20, r24
    2456:	59 1f       	adc	r21, r25
    2458:	51 83       	std	Z+1, r21	; 0x01
    245a:	40 83       	st	Z, r20
    245c:	8a 81       	ldd	r24, Y+2	; 0x02
    245e:	9b 81       	ldd	r25, Y+3	; 0x03
    2460:	93 83       	std	Z+3, r25	; 0x03
    2462:	82 83       	std	Z+2, r24	; 0x02
    2464:	21 15       	cp	r18, r1
    2466:	31 05       	cpc	r19, r1
    2468:	09 f0       	breq	.+2      	; 0x246c <free+0xfc>
    246a:	b0 cf       	rjmp	.-160    	; 0x23cc <free+0x5c>
    246c:	f0 93 44 04 	sts	0x0444, r31	; 0x800444 <__flp+0x1>
    2470:	e0 93 43 04 	sts	0x0443, r30	; 0x800443 <__flp>
    2474:	9e cf       	rjmp	.-196    	; 0x23b2 <free+0x42>
    2476:	fd 01       	movw	r30, r26
    2478:	dc 01       	movw	r26, r24
    247a:	c0 cf       	rjmp	.-128    	; 0x23fc <free+0x8c>
    247c:	13 82       	std	Z+3, r1	; 0x03
    247e:	12 82       	std	Z+2, r1	; 0x02
    2480:	d7 cf       	rjmp	.-82     	; 0x2430 <free+0xc0>

00002482 <abort>:
abort():
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	f8 94       	cli
    2488:	0c 94 55 12 	jmp	0x24aa	; 0x24aa <_exit>

0000248c <strncpy>:
strncpy():
    248c:	fb 01       	movw	r30, r22
    248e:	dc 01       	movw	r26, r24
    2490:	41 50       	subi	r20, 0x01	; 1
    2492:	50 40       	sbci	r21, 0x00	; 0
    2494:	48 f0       	brcs	.+18     	; 0x24a8 <strncpy+0x1c>
    2496:	01 90       	ld	r0, Z+
    2498:	0d 92       	st	X+, r0
    249a:	00 20       	and	r0, r0
    249c:	c9 f7       	brne	.-14     	; 0x2490 <strncpy+0x4>
    249e:	01 c0       	rjmp	.+2      	; 0x24a2 <strncpy+0x16>
    24a0:	1d 92       	st	X+, r1
    24a2:	41 50       	subi	r20, 0x01	; 1
    24a4:	50 40       	sbci	r21, 0x00	; 0
    24a6:	e0 f7       	brcc	.-8      	; 0x24a0 <strncpy+0x14>
    24a8:	08 95       	ret

000024aa <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    24aa:	f8 94       	cli

000024ac <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    24ac:	ff cf       	rjmp	.-2      	; 0x24ac <__stop_program>
